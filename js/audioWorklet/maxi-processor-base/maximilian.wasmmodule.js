// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end <= _emscripten_get_heap_size()) {
    HEAP32[DYNAMICTOP_PTR>>2] = end;
  } else {
    return 0;
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is currently only used for LLVM backend under certain
// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.
function addFunction(func, sig) {

  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html




/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 19408,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5262288,
    DYNAMIC_BASE = 5262288,
    DYNAMICTOP_PTR = 19152;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 19400;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 19392
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function __ZN10maxiFilter5hiresEddd() {
  err('missing function: _ZN10maxiFilter5hiresEddd'); abort(-1);
  }

  function __ZN10maxiFilter5loresEddd() {
  err('missing function: _ZN10maxiFilter5loresEddd'); abort(-1);
  }

  function __ZN10maxiFilter6hipassEdd() {
  err('missing function: _ZN10maxiFilter6hipassEdd'); abort(-1);
  }

  function __ZN10maxiFilter6lopassEdd() {
  err('missing function: _ZN10maxiFilter6lopassEdd'); abort(-1);
  }

  function __ZN10maxiFilter8bandpassEddd() {
  err('missing function: _ZN10maxiFilter8bandpassEddd'); abort(-1);
  }

  function __ZN10maxiSample4playEd() {
  err('missing function: _ZN10maxiSample4playEd'); abort(-1);
  }

  function __ZN10maxiSample4playEddd() {
  err('missing function: _ZN10maxiSample4playEddd'); abort(-1);
  }

  function __ZN10maxiSample4playEv() {
  err('missing function: _ZN10maxiSample4playEv'); abort(-1);
  }

  function __ZN10maxiSample5play4Eddd() {
  err('missing function: _ZN10maxiSample5play4Eddd'); abort(-1);
  }

  function __ZN10maxiSample7isReadyEv() {
  err('missing function: _ZN10maxiSample7isReadyEv'); abort(-1);
  }

  function __ZN10maxiSample7triggerEv() {
  err('missing function: _ZN10maxiSample7triggerEv'); abort(-1);
  }

  function __ZN10maxiSample8playOnceEd() {
  err('missing function: _ZN10maxiSample8playOnceEd'); abort(-1);
  }

  function __ZN10maxiSample8playOnceEv() {
  err('missing function: _ZN10maxiSample8playOnceEv'); abort(-1);
  }

  function __ZN10maxiSample9getLengthEv() {
  err('missing function: _ZN10maxiSample9getLengthEv'); abort(-1);
  }

  function __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE() {
  err('missing function: _ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE'); abort(-1);
  }

  function __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi() {
  err('missing function: _ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi'); abort(-1);
  }

  function __ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE() {
  err('missing function: _ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE'); abort(-1);
  }

  function __ZN12maxiEnvelope7triggerEid() {
  err('missing function: _ZN12maxiEnvelope7triggerEid'); abort(-1);
  }

  function __ZN13maxiDelayline2dlEdid() {
  err('missing function: _ZN13maxiDelayline2dlEdid'); abort(-1);
  }

  function __ZN13maxiDelayline2dlEdidi() {
  err('missing function: _ZN13maxiDelayline2dlEdidi'); abort(-1);
  }

  function __ZN13maxiDelaylineC1Ev() {
  err('missing function: _ZN13maxiDelaylineC1Ev'); abort(-1);
  }

  function __ZN7convert4mtofEi() {
  err('missing function: _ZN7convert4mtofEi'); abort(-1);
  }

  function __ZN7maxiDyn10compressorEddddd() {
  err('missing function: _ZN7maxiDyn10compressorEddddd'); abort(-1);
  }

  function __ZN7maxiDyn10setReleaseEd() {
  err('missing function: _ZN7maxiDyn10setReleaseEd'); abort(-1);
  }

  function __ZN7maxiDyn12setThresholdEd() {
  err('missing function: _ZN7maxiDyn12setThresholdEd'); abort(-1);
  }

  function __ZN7maxiDyn4gateEddldd() {
  err('missing function: _ZN7maxiDyn4gateEddldd'); abort(-1);
  }

  function __ZN7maxiDyn8compressEd() {
  err('missing function: _ZN7maxiDyn8compressEd'); abort(-1);
  }

  function __ZN7maxiDyn8setRatioEd() {
  err('missing function: _ZN7maxiDyn8setRatioEd'); abort(-1);
  }

  function __ZN7maxiDyn9setAttackEd() {
  err('missing function: _ZN7maxiDyn9setAttackEd'); abort(-1);
  }

  function __ZN7maxiEnv10setReleaseEd() {
  err('missing function: _ZN7maxiEnv10setReleaseEd'); abort(-1);
  }

  function __ZN7maxiEnv10setSustainEd() {
  err('missing function: _ZN7maxiEnv10setSustainEd'); abort(-1);
  }

  function __ZN7maxiEnv2arEdddli() {
  err('missing function: _ZN7maxiEnv2arEdddli'); abort(-1);
  }

  function __ZN7maxiEnv4adsrEdddddli() {
  err('missing function: _ZN7maxiEnv4adsrEdddddli'); abort(-1);
  }

  function __ZN7maxiEnv4adsrEdi() {
  err('missing function: _ZN7maxiEnv4adsrEdi'); abort(-1);
  }

  function __ZN7maxiEnv8setDecayEd() {
  err('missing function: _ZN7maxiEnv8setDecayEd'); abort(-1);
  }

  function __ZN7maxiEnv9setAttackEd() {
  err('missing function: _ZN7maxiEnv9setAttackEd'); abort(-1);
  }

  function __ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd() {
  err('missing function: _ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd'); abort(-1);
  }

  function __ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd() {
  err('missing function: _ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd'); abort(-1);
  }

  function __ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd() {
  err('missing function: _ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd'); abort(-1);
  }

  function __ZN7maxiOsc10phaseResetEd() {
  err('missing function: _ZN7maxiOsc10phaseResetEd'); abort(-1);
  }

  function __ZN7maxiOsc3sawEd() {
  err('missing function: _ZN7maxiOsc3sawEd'); abort(-1);
  }

  function __ZN7maxiOsc4rectEdd() {
  err('missing function: _ZN7maxiOsc4rectEdd'); abort(-1);
  }

  function __ZN7maxiOsc4sawnEd() {
  err('missing function: _ZN7maxiOsc4sawnEd'); abort(-1);
  }

  function __ZN7maxiOsc5noiseEv() {
  err('missing function: _ZN7maxiOsc5noiseEv'); abort(-1);
  }

  function __ZN7maxiOsc5pulseEdd() {
  err('missing function: _ZN7maxiOsc5pulseEdd'); abort(-1);
  }

  function __ZN7maxiOsc6phasorEd() {
  err('missing function: _ZN7maxiOsc6phasorEd'); abort(-1);
  }

  function __ZN7maxiOsc6phasorEddd() {
  err('missing function: _ZN7maxiOsc6phasorEddd'); abort(-1);
  }

  function __ZN7maxiOsc6squareEd() {
  err('missing function: _ZN7maxiOsc6squareEd'); abort(-1);
  }

  function __ZN7maxiOsc7coswaveEd() {
  err('missing function: _ZN7maxiOsc7coswaveEd'); abort(-1);
  }

  function __ZN7maxiOsc7sinebufEd() {
  err('missing function: _ZN7maxiOsc7sinebufEd'); abort(-1);
  }

  function __ZN7maxiOsc8sinebuf4Ed() {
  err('missing function: _ZN7maxiOsc8sinebuf4Ed'); abort(-1);
  }

  function __ZN7maxiOsc8sinewaveEd() {
  err('missing function: _ZN7maxiOsc8sinewaveEd'); abort(-1);
  }

  function __ZN7maxiOsc8triangleEd() {
  err('missing function: _ZN7maxiOsc8triangleEd'); abort(-1);
  }

  function __ZN7maxiOscC1Ev() {
  err('missing function: _ZN7maxiOscC1Ev'); abort(-1);
  }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        err('exception during cxa_free_exception: ' + e);
      }
    }var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  
  var _Math_imul=undefined;  

  
  var SYSCALLS={buffers:[null,[],[]],printChar:function (stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in FILESYSTEM=0
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  
  var _Math_clz32=undefined;   

  function ___unlock() {}

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      fn
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.constructor;
          if (undefined === proto[methodName]) {
              // This is the first function to be registered with this name.
              unboundTypesHandler.argCount = argCount-1;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
              // the function handlers go into an overload table.
              var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
              var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
              if (undefined === proto[methodName].overloadTable) {
                  func.argCount = argCount-1;
                  proto[methodName] = func;
              } else {
                  proto[methodName].overloadTable[argCount-1] = func;
              }
              return [];
          });
          return [];
      });
    }

  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = embind__requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_smart_ptr(
      rawType,
      rawPointeeType,
      name,
      sharingPolicy,
      getPointeeSignature,
      rawGetPointee,
      constructorSignature,
      rawConstructor,
      shareSignature,
      rawShare,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      rawGetPointee = embind__requireFunction(getPointeeSignature, rawGetPointee);
      rawConstructor = embind__requireFunction(constructorSignature, rawConstructor);
      rawShare = embind__requireFunction(shareSignature, rawShare);
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
  
      whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
          pointeeType = pointeeType[0];
  
          var registeredPointer = new RegisteredPointer(
              name,
              pointeeType.registeredClass,
              false,
              false,
              // smart pointer properties
              true,
              pointeeType,
              sharingPolicy,
              rawGetPointee,
              rawConstructor,
              rawShare,
              rawDestructor);
          return [registeredPointer];
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_lookupTypes(argCount, argTypes, argWireTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          var type = types[i];
          args[i] = type['readValueFromPointer'](argv);
          argv += type['argPackAdvance'];
      }
  
      var rv = handle.apply(undefined, args);
      return __emval_register(rv);
    }


  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      Module['abort']();
    }

   

   

  function _emscripten_get_heap_size() {
      return TOTAL_MEMORY;
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
  var _Int8Array=undefined;
  
  var _Int32Array=undefined; 

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      dynCall_v(func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    } 

  function __ZN12maxiSettings10bufferSizeE() {
  err('missing function: _ZN12maxiSettings10bufferSizeE'); abort(-1);
  }

  function __ZN12maxiSettings10sampleRateE() {
  err('missing function: _ZN12maxiSettings10sampleRateE'); abort(-1);
  }

  function __ZN12maxiSettings8channelsE() {
  err('missing function: _ZN12maxiSettings8channelsE'); abort(-1);
  }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


function nullFunc_dddd(x) { err("Invalid function pointer called with signature 'dddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dddddd(x) { err("Invalid function pointer called with signature 'dddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { err("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_did(x) { err("Invalid function pointer called with signature 'did'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didd(x) { err("Invalid function pointer called with signature 'didd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diddd(x) { err("Invalid function pointer called with signature 'diddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diddddd(x) { err("Invalid function pointer called with signature 'diddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didddddii(x) { err("Invalid function pointer called with signature 'didddddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didddii(x) { err("Invalid function pointer called with signature 'didddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diddidd(x) { err("Invalid function pointer called with signature 'diddidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didi(x) { err("Invalid function pointer called with signature 'didi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didid(x) { err("Invalid function pointer called with signature 'didid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dididdd(x) { err("Invalid function pointer called with signature 'dididdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dididi(x) { err("Invalid function pointer called with signature 'dididi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { err("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diid(x) { err("Invalid function pointer called with signature 'diid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidd(x) { err("Invalid function pointer called with signature 'diidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiddd(x) { err("Invalid function pointer called with signature 'diiddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiddddd(x) { err("Invalid function pointer called with signature 'diiddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidddddii(x) { err("Invalid function pointer called with signature 'diidddddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidddii(x) { err("Invalid function pointer called with signature 'diidddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiddidd(x) { err("Invalid function pointer called with signature 'diiddidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidi(x) { err("Invalid function pointer called with signature 'diidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidid(x) { err("Invalid function pointer called with signature 'diidid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diididdd(x) { err("Invalid function pointer called with signature 'diididdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diididi(x) { err("Invalid function pointer called with signature 'diididi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { err("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiii(x) { err("Invalid function pointer called with signature 'diiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { err("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { err("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { err("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiid(x) { err("Invalid function pointer called with signature 'iiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { err("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { err("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidid(x) { err("Invalid function pointer called with signature 'vidid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vididd(x) { err("Invalid function pointer called with signature 'vididd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vididdd(x) { err("Invalid function pointer called with signature 'vididdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { err("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidd(x) { err("Invalid function pointer called with signature 'viidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidid(x) { err("Invalid function pointer called with signature 'viidid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viididd(x) { err("Invalid function pointer called with signature 'viididd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viididdd(x) { err("Invalid function pointer called with signature 'viididdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiid(x) { err("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array }

var asmLibraryArg = { "a": abort, "b": setTempRet0, "c": getTempRet0, "d": abortStackOverflow, "e": nullFunc_dddd, "f": nullFunc_dddddd, "g": nullFunc_di, "h": nullFunc_did, "i": nullFunc_didd, "j": nullFunc_diddd, "k": nullFunc_diddddd, "l": nullFunc_didddddii, "m": nullFunc_didddii, "n": nullFunc_diddidd, "o": nullFunc_didi, "p": nullFunc_didid, "q": nullFunc_dididdd, "r": nullFunc_dididi, "s": nullFunc_dii, "t": nullFunc_diid, "u": nullFunc_diidd, "v": nullFunc_diiddd, "w": nullFunc_diiddddd, "x": nullFunc_diidddddii, "y": nullFunc_diidddii, "z": nullFunc_diiddidd, "A": nullFunc_diidi, "B": nullFunc_diidid, "C": nullFunc_diididdd, "D": nullFunc_diididi, "E": nullFunc_diii, "F": nullFunc_diiii, "G": nullFunc_i, "H": nullFunc_ii, "I": nullFunc_iid, "J": nullFunc_iii, "K": nullFunc_iiid, "L": nullFunc_iiii, "M": nullFunc_iiiid, "N": nullFunc_iiiii, "O": nullFunc_v, "P": nullFunc_vi, "Q": nullFunc_vid, "R": nullFunc_vidd, "S": nullFunc_vidid, "T": nullFunc_vididd, "U": nullFunc_vididdd, "V": nullFunc_vii, "W": nullFunc_viid, "X": nullFunc_viidd, "Y": nullFunc_viidid, "Z": nullFunc_viididd, "_": nullFunc_viididdd, "$": nullFunc_viii, "aa": nullFunc_viiid, "ab": nullFunc_viiii, "ac": nullFunc_viiiii, "ad": nullFunc_viiiiii, "ae": ClassHandle, "af": ClassHandle_clone, "ag": ClassHandle_delete, "ah": ClassHandle_deleteLater, "ai": ClassHandle_isAliasOf, "aj": ClassHandle_isDeleted, "ak": RegisteredClass, "al": RegisteredPointer, "am": RegisteredPointer_deleteObject, "an": RegisteredPointer_destructor, "ao": RegisteredPointer_fromWireType, "ap": RegisteredPointer_getPointee, "aq": __ZN10maxiFilter5hiresEddd, "ar": __ZN10maxiFilter5loresEddd, "as": __ZN10maxiFilter6hipassEdd, "at": __ZN10maxiFilter6lopassEdd, "au": __ZN10maxiFilter8bandpassEddd, "av": __ZN10maxiSample4playEd, "aw": __ZN10maxiSample4playEddd, "ax": __ZN10maxiSample4playEv, "ay": __ZN10maxiSample5play4Eddd, "az": __ZN10maxiSample7isReadyEv, "aA": __ZN10maxiSample7triggerEv, "aB": __ZN10maxiSample8playOnceEd, "aC": __ZN10maxiSample8playOnceEv, "aD": __ZN10maxiSample9getLengthEv, "aE": __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE, "aF": __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi, "aG": __ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE, "aH": __ZN12maxiEnvelope7triggerEid, "aI": __ZN13maxiDelayline2dlEdid, "aJ": __ZN13maxiDelayline2dlEdidi, "aK": __ZN13maxiDelaylineC1Ev, "aL": __ZN7convert4mtofEi, "aM": __ZN7maxiDyn10compressorEddddd, "aN": __ZN7maxiDyn10setReleaseEd, "aO": __ZN7maxiDyn12setThresholdEd, "aP": __ZN7maxiDyn4gateEddldd, "aQ": __ZN7maxiDyn8compressEd, "aR": __ZN7maxiDyn8setRatioEd, "aS": __ZN7maxiDyn9setAttackEd, "aT": __ZN7maxiEnv10setReleaseEd, "aU": __ZN7maxiEnv10setSustainEd, "aV": __ZN7maxiEnv2arEdddli, "aW": __ZN7maxiEnv4adsrEdddddli, "aX": __ZN7maxiEnv4adsrEdi, "aY": __ZN7maxiEnv8setDecayEd, "aZ": __ZN7maxiEnv9setAttackEd, "a_": __ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd, "a$": __ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd, "ba": __ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd, "bb": __ZN7maxiOsc10phaseResetEd, "bc": __ZN7maxiOsc3sawEd, "bd": __ZN7maxiOsc4rectEdd, "be": __ZN7maxiOsc4sawnEd, "bf": __ZN7maxiOsc5noiseEv, "bg": __ZN7maxiOsc5pulseEdd, "bh": __ZN7maxiOsc6phasorEd, "bi": __ZN7maxiOsc6phasorEddd, "bj": __ZN7maxiOsc6squareEd, "bk": __ZN7maxiOsc7coswaveEd, "bl": __ZN7maxiOsc7sinebufEd, "bm": __ZN7maxiOsc8sinebuf4Ed, "bn": __ZN7maxiOsc8sinewaveEd, "bo": __ZN7maxiOsc8triangleEd, "bp": __ZN7maxiOscC1Ev, "bq": __ZSt18uncaught_exceptionv, "br": ___cxa_allocate_exception, "bs": ___cxa_begin_catch, "bt": ___cxa_find_matching_catch, "bu": ___cxa_free_exception, "bv": ___cxa_throw, "bw": ___gxx_personality_v0, "bx": ___lock, "by": ___resumeException, "bz": ___setErrNo, "bA": ___syscall140, "bB": ___syscall146, "bC": ___syscall54, "bD": ___syscall6, "bE": ___unlock, "bF": __embind_register_bool, "bG": __embind_register_class, "bH": __embind_register_class_class_function, "bI": __embind_register_class_constructor, "bJ": __embind_register_class_function, "bK": __embind_register_class_property, "bL": __embind_register_emval, "bM": __embind_register_float, "bN": __embind_register_integer, "bO": __embind_register_memory_view, "bP": __embind_register_smart_ptr, "bQ": __embind_register_std_string, "bR": __embind_register_std_wstring, "bS": __embind_register_void, "bT": __emval_call, "bU": __emval_decref, "bV": __emval_incref, "bW": __emval_lookupTypes, "bX": __emval_register, "bY": __emval_take_value, "bZ": _abort, "b_": _embind_repr, "b$": _emscripten_get_heap_size, "ca": _emscripten_memcpy_big, "cb": _emscripten_resize_heap, "cc": _pthread_getspecific, "cd": _pthread_key_create, "ce": _pthread_once, "cf": _pthread_setspecific, "cg": abortOnCannotGrowMemory, "ch": constNoSmartPtrRawPointerToWireType, "ci": count_emval_handles, "cj": craftInvokerFunction, "ck": createNamedFunction, "cl": downcastPointer, "cm": embind__requireFunction, "cn": embind_init_charCodes, "co": ensureOverloadTable, "cp": exposePublicSymbol, "cq": extendError, "cr": floatReadValueFromPointer, "cs": flushPendingDeletes, "ct": flush_NO_FILESYSTEM, "cu": genericPointerToWireType, "cv": getBasestPointer, "cw": getInheritedInstance, "cx": getInheritedInstanceCount, "cy": getLiveInheritedInstances, "cz": getShiftFromSize, "cA": getTypeName, "cB": get_first_emval, "cC": heap32VectorToArray, "cD": init_ClassHandle, "cE": init_RegisteredPointer, "cF": init_embind, "cG": init_emval, "cH": integerReadValueFromPointer, "cI": makeClassHandle, "cJ": makeLegalFunctionName, "cK": new_, "cL": nonConstNoSmartPtrRawPointerToWireType, "cM": readLatin1String, "cN": registerType, "cO": replacePublicSymbol, "cP": requireHandle, "cQ": requireRegisteredType, "cR": runDestructor, "cS": runDestructors, "cT": setDelayFunction, "cU": shallowCopyInternalPointer, "cV": simpleReadValueFromPointer, "cW": throwBindingError, "cX": throwInstanceAlreadyDeleted, "cY": throwInternalError, "cZ": throwUnboundTypeError, "c_": upcastPointer, "c$": validateThis, "da": whenDependentTypesAreResolved, "db": tempDoublePtr, "dc": DYNAMICTOP_PTR, "dd": __ZN12maxiSettings10bufferSizeE, "de": __ZN12maxiSettings10sampleRateE, "df": __ZN12maxiSettings8channelsE }
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.db|0,
  DYNAMICTOP_PTR=env.dc|0,
  __ZN12maxiSettings10bufferSizeE=env.dd|0,
  __ZN12maxiSettings10sampleRateE=env.de|0,
  __ZN12maxiSettings8channelsE=env.df|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_abs=global.Math.abs,
  Math_pow=global.Math.pow,
  Math_tan=global.Math.tan,
  Math_acos=global.Math.acos,
  Math_atan=global.Math.atan,
  Math_log=global.Math.log,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.a,
  setTempRet0=env.b,
  getTempRet0=env.c,
  abortStackOverflow=env.d,
  nullFunc_dddd=env.e,
  nullFunc_dddddd=env.f,
  nullFunc_di=env.g,
  nullFunc_did=env.h,
  nullFunc_didd=env.i,
  nullFunc_diddd=env.j,
  nullFunc_diddddd=env.k,
  nullFunc_didddddii=env.l,
  nullFunc_didddii=env.m,
  nullFunc_diddidd=env.n,
  nullFunc_didi=env.o,
  nullFunc_didid=env.p,
  nullFunc_dididdd=env.q,
  nullFunc_dididi=env.r,
  nullFunc_dii=env.s,
  nullFunc_diid=env.t,
  nullFunc_diidd=env.u,
  nullFunc_diiddd=env.v,
  nullFunc_diiddddd=env.w,
  nullFunc_diidddddii=env.x,
  nullFunc_diidddii=env.y,
  nullFunc_diiddidd=env.z,
  nullFunc_diidi=env.A,
  nullFunc_diidid=env.B,
  nullFunc_diididdd=env.C,
  nullFunc_diididi=env.D,
  nullFunc_diii=env.E,
  nullFunc_diiii=env.F,
  nullFunc_i=env.G,
  nullFunc_ii=env.H,
  nullFunc_iid=env.I,
  nullFunc_iii=env.J,
  nullFunc_iiid=env.K,
  nullFunc_iiii=env.L,
  nullFunc_iiiid=env.M,
  nullFunc_iiiii=env.N,
  nullFunc_v=env.O,
  nullFunc_vi=env.P,
  nullFunc_vid=env.Q,
  nullFunc_vidd=env.R,
  nullFunc_vidid=env.S,
  nullFunc_vididd=env.T,
  nullFunc_vididdd=env.U,
  nullFunc_vii=env.V,
  nullFunc_viid=env.W,
  nullFunc_viidd=env.X,
  nullFunc_viidid=env.Y,
  nullFunc_viididd=env.Z,
  nullFunc_viididdd=env._,
  nullFunc_viii=env.$,
  nullFunc_viiid=env.aa,
  nullFunc_viiii=env.ab,
  nullFunc_viiiii=env.ac,
  nullFunc_viiiiii=env.ad,
  ClassHandle=env.ae,
  ClassHandle_clone=env.af,
  ClassHandle_delete=env.ag,
  ClassHandle_deleteLater=env.ah,
  ClassHandle_isAliasOf=env.ai,
  ClassHandle_isDeleted=env.aj,
  RegisteredClass=env.ak,
  RegisteredPointer=env.al,
  RegisteredPointer_deleteObject=env.am,
  RegisteredPointer_destructor=env.an,
  RegisteredPointer_fromWireType=env.ao,
  RegisteredPointer_getPointee=env.ap,
  __ZN10maxiFilter5hiresEddd=env.aq,
  __ZN10maxiFilter5loresEddd=env.ar,
  __ZN10maxiFilter6hipassEdd=env.as,
  __ZN10maxiFilter6lopassEdd=env.at,
  __ZN10maxiFilter8bandpassEddd=env.au,
  __ZN10maxiSample4playEd=env.av,
  __ZN10maxiSample4playEddd=env.aw,
  __ZN10maxiSample4playEv=env.ax,
  __ZN10maxiSample5play4Eddd=env.ay,
  __ZN10maxiSample7isReadyEv=env.az,
  __ZN10maxiSample7triggerEv=env.aA,
  __ZN10maxiSample8playOnceEd=env.aB,
  __ZN10maxiSample8playOnceEv=env.aC,
  __ZN10maxiSample9getLengthEv=env.aD,
  __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE=env.aE,
  __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi=env.aF,
  __ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE=env.aG,
  __ZN12maxiEnvelope7triggerEid=env.aH,
  __ZN13maxiDelayline2dlEdid=env.aI,
  __ZN13maxiDelayline2dlEdidi=env.aJ,
  __ZN13maxiDelaylineC1Ev=env.aK,
  __ZN7convert4mtofEi=env.aL,
  __ZN7maxiDyn10compressorEddddd=env.aM,
  __ZN7maxiDyn10setReleaseEd=env.aN,
  __ZN7maxiDyn12setThresholdEd=env.aO,
  __ZN7maxiDyn4gateEddldd=env.aP,
  __ZN7maxiDyn8compressEd=env.aQ,
  __ZN7maxiDyn8setRatioEd=env.aR,
  __ZN7maxiDyn9setAttackEd=env.aS,
  __ZN7maxiEnv10setReleaseEd=env.aT,
  __ZN7maxiEnv10setSustainEd=env.aU,
  __ZN7maxiEnv2arEdddli=env.aV,
  __ZN7maxiEnv4adsrEdddddli=env.aW,
  __ZN7maxiEnv4adsrEdi=env.aX,
  __ZN7maxiEnv8setDecayEd=env.aY,
  __ZN7maxiEnv9setAttackEd=env.aZ,
  __ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd=env.a_,
  __ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd=env.a$,
  __ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd=env.ba,
  __ZN7maxiOsc10phaseResetEd=env.bb,
  __ZN7maxiOsc3sawEd=env.bc,
  __ZN7maxiOsc4rectEdd=env.bd,
  __ZN7maxiOsc4sawnEd=env.be,
  __ZN7maxiOsc5noiseEv=env.bf,
  __ZN7maxiOsc5pulseEdd=env.bg,
  __ZN7maxiOsc6phasorEd=env.bh,
  __ZN7maxiOsc6phasorEddd=env.bi,
  __ZN7maxiOsc6squareEd=env.bj,
  __ZN7maxiOsc7coswaveEd=env.bk,
  __ZN7maxiOsc7sinebufEd=env.bl,
  __ZN7maxiOsc8sinebuf4Ed=env.bm,
  __ZN7maxiOsc8sinewaveEd=env.bn,
  __ZN7maxiOsc8triangleEd=env.bo,
  __ZN7maxiOscC1Ev=env.bp,
  __ZSt18uncaught_exceptionv=env.bq,
  ___cxa_allocate_exception=env.br,
  ___cxa_begin_catch=env.bs,
  ___cxa_find_matching_catch=env.bt,
  ___cxa_free_exception=env.bu,
  ___cxa_throw=env.bv,
  ___gxx_personality_v0=env.bw,
  ___lock=env.bx,
  ___resumeException=env.by,
  ___setErrNo=env.bz,
  ___syscall140=env.bA,
  ___syscall146=env.bB,
  ___syscall54=env.bC,
  ___syscall6=env.bD,
  ___unlock=env.bE,
  __embind_register_bool=env.bF,
  __embind_register_class=env.bG,
  __embind_register_class_class_function=env.bH,
  __embind_register_class_constructor=env.bI,
  __embind_register_class_function=env.bJ,
  __embind_register_class_property=env.bK,
  __embind_register_emval=env.bL,
  __embind_register_float=env.bM,
  __embind_register_integer=env.bN,
  __embind_register_memory_view=env.bO,
  __embind_register_smart_ptr=env.bP,
  __embind_register_std_string=env.bQ,
  __embind_register_std_wstring=env.bR,
  __embind_register_void=env.bS,
  __emval_call=env.bT,
  __emval_decref=env.bU,
  __emval_incref=env.bV,
  __emval_lookupTypes=env.bW,
  __emval_register=env.bX,
  __emval_take_value=env.bY,
  _abort=env.bZ,
  _embind_repr=env.b_,
  _emscripten_get_heap_size=env.b$,
  _emscripten_memcpy_big=env.ca,
  _emscripten_resize_heap=env.cb,
  _pthread_getspecific=env.cc,
  _pthread_key_create=env.cd,
  _pthread_once=env.ce,
  _pthread_setspecific=env.cf,
  abortOnCannotGrowMemory=env.cg,
  constNoSmartPtrRawPointerToWireType=env.ch,
  count_emval_handles=env.ci,
  craftInvokerFunction=env.cj,
  createNamedFunction=env.ck,
  downcastPointer=env.cl,
  embind__requireFunction=env.cm,
  embind_init_charCodes=env.cn,
  ensureOverloadTable=env.co,
  exposePublicSymbol=env.cp,
  extendError=env.cq,
  floatReadValueFromPointer=env.cr,
  flushPendingDeletes=env.cs,
  flush_NO_FILESYSTEM=env.ct,
  genericPointerToWireType=env.cu,
  getBasestPointer=env.cv,
  getInheritedInstance=env.cw,
  getInheritedInstanceCount=env.cx,
  getLiveInheritedInstances=env.cy,
  getShiftFromSize=env.cz,
  getTypeName=env.cA,
  get_first_emval=env.cB,
  heap32VectorToArray=env.cC,
  init_ClassHandle=env.cD,
  init_RegisteredPointer=env.cE,
  init_embind=env.cF,
  init_emval=env.cG,
  integerReadValueFromPointer=env.cH,
  makeClassHandle=env.cI,
  makeLegalFunctionName=env.cJ,
  new_=env.cK,
  nonConstNoSmartPtrRawPointerToWireType=env.cL,
  readLatin1String=env.cM,
  registerType=env.cN,
  replacePublicSymbol=env.cO,
  requireHandle=env.cP,
  requireRegisteredType=env.cQ,
  runDestructor=env.cR,
  runDestructors=env.cS,
  setDelayFunction=env.cT,
  shallowCopyInternalPointer=env.cU,
  simpleReadValueFromPointer=env.cV,
  throwBindingError=env.cW,
  throwInstanceAlreadyDeleted=env.cX,
  throwInternalError=env.cY,
  throwUnboundTypeError=env.cZ,
  upcastPointer=env.c_,
  validateThis=env.c$,
  whenDependentTypesAreResolved=env.da,
  STACKTOP = 19408,
  STACK_MAX = 5262288,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
  function globalCtors() {
    __GLOBAL__sub_I_maximilian_embind_cpp();
    __GLOBAL__sub_I_bind_cpp();
  }
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(0);
 return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($0) {
 $0 = $0|0;
 var $$byval_copy34 = 0, $$fca$0$load = 0, $$fca$0$load102 = 0, $$fca$0$load114 = 0, $$fca$0$load126 = 0, $$fca$0$load140 = 0, $$fca$0$load152 = 0, $$fca$0$load208 = 0, $$fca$0$load220 = 0, $$fca$0$load264 = 0, $$fca$0$load276 = 0, $$fca$0$load44 = 0, $$fca$0$load78 = 0, $$fca$0$load90 = 0, $$fca$1$gep$i = 0, $$fca$1$gep$i308 = 0, $$fca$1$gep$i320 = 0, $$fca$1$gep$i324 = 0, $$fca$1$gep$i330 = 0, $$fca$1$gep$i336 = 0;
 var $$fca$1$gep$i342 = 0, $$fca$1$gep$i348 = 0, $$fca$1$gep$i354 = 0, $$fca$1$gep$i360 = 0, $$fca$1$gep$i366 = 0, $$fca$1$gep$i372 = 0, $$fca$1$gep$i378 = 0, $$fca$1$gep$i384 = 0, $$fca$1$gep$i390 = 0, $$fca$1$gep$i396 = 0, $$fca$1$gep$i402 = 0, $$fca$1$gep$i408 = 0, $$fca$1$gep$i414 = 0, $$fca$1$gep$i426 = 0, $$fca$1$gep$i438 = 0, $$fca$1$gep$i444 = 0, $$fca$1$gep$i450 = 0, $$fca$1$gep$i456 = 0, $$fca$1$gep$i462 = 0, $$fca$1$gep$i468 = 0;
 var $$fca$1$gep$i474 = 0, $$fca$1$gep$i480 = 0, $$fca$1$gep$i492 = 0, $$fca$1$gep$i504 = 0, $$fca$1$gep$i510 = 0, $$fca$1$gep$i516 = 0, $$fca$1$gep$i522 = 0, $$fca$1$gep$i528 = 0, $$fca$1$gep$i534 = 0, $$fca$1$gep$i540 = 0, $$fca$1$gep$i552 = 0, $$fca$1$gep$i564 = 0, $$fca$1$gep$i576 = 0, $$fca$1$gep$i582 = 0, $$fca$1$gep$i588 = 0, $$fca$1$gep$i594 = 0, $$fca$1$gep$i600 = 0, $$fca$1$gep$i606 = 0, $$fca$1$gep$i612 = 0, $$fca$1$gep$i618 = 0;
 var $$fca$1$gep$i624 = 0, $$fca$1$gep$i630 = 0, $$fca$1$gep$i636 = 0, $$fca$1$gep$i642 = 0, $$fca$1$gep$i648 = 0, $$fca$1$gep$i654 = 0, $$fca$1$gep$i660 = 0, $$fca$1$gep$i666 = 0, $$fca$1$gep$i672 = 0, $$fca$1$gep$i678 = 0, $$fca$1$gep$i684 = 0, $$fca$1$gep$i690 = 0, $$fca$1$gep$i696 = 0, $$fca$1$gep$i702 = 0, $$fca$1$gep$i708 = 0, $$fca$1$gep$i714 = 0, $$fca$1$gep$i720 = 0, $$fca$1$gep$i726 = 0, $$fca$1$gep$i732 = 0, $$fca$1$gep$i744 = 0;
 var $$fca$1$gep$i750 = 0, $$fca$1$gep$i756 = 0, $$fca$1$gep$i762 = 0, $$fca$1$gep$i768 = 0, $$fca$1$gep$i774 = 0, $$fca$1$gep$i780 = 0, $$fca$1$gep$i786 = 0, $$fca$1$gep$i792 = 0, $$fca$1$gep$i798 = 0, $$fca$1$gep$i804 = 0, $$fca$1$gep100 = 0, $$fca$1$gep104 = 0, $$fca$1$gep112 = 0, $$fca$1$gep116 = 0, $$fca$1$gep124 = 0, $$fca$1$gep128 = 0, $$fca$1$gep138 = 0, $$fca$1$gep142 = 0, $$fca$1$gep150 = 0, $$fca$1$gep154 = 0;
 var $$fca$1$gep206 = 0, $$fca$1$gep210 = 0, $$fca$1$gep218 = 0, $$fca$1$gep222 = 0, $$fca$1$gep262 = 0, $$fca$1$gep266 = 0, $$fca$1$gep274 = 0, $$fca$1$gep278 = 0, $$fca$1$gep34 = 0, $$fca$1$gep36 = 0, $$fca$1$gep4$i = 0, $$fca$1$gep4$i306 = 0, $$fca$1$gep4$i318 = 0, $$fca$1$gep4$i424 = 0, $$fca$1$gep4$i436 = 0, $$fca$1$gep4$i490 = 0, $$fca$1$gep4$i502 = 0, $$fca$1$gep4$i550 = 0, $$fca$1$gep4$i562 = 0, $$fca$1$gep4$i574 = 0;
 var $$fca$1$gep4$i742 = 0, $$fca$1$gep42 = 0, $$fca$1$gep46 = 0, $$fca$1$gep76 = 0, $$fca$1$gep80 = 0, $$fca$1$gep88 = 0, $$fca$1$gep92 = 0, $$fca$1$load = 0, $$fca$1$load105 = 0, $$fca$1$load117 = 0, $$fca$1$load129 = 0, $$fca$1$load143 = 0, $$fca$1$load155 = 0, $$fca$1$load211 = 0, $$fca$1$load223 = 0, $$fca$1$load267 = 0, $$fca$1$load279 = 0, $$fca$1$load47 = 0, $$fca$1$load81 = 0, $$fca$1$load93 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy34 = sp + 224|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = sp + 216|0;
 $4 = sp + 208|0;
 $5 = sp + 200|0;
 $6 = sp + 192|0;
 $7 = sp + 184|0;
 $8 = sp + 176|0;
 $9 = sp + 168|0;
 $10 = sp + 160|0;
 $11 = sp + 152|0;
 $12 = sp + 144|0;
 $13 = sp + 136|0;
 $14 = sp + 128|0;
 $15 = sp + 120|0;
 $16 = sp + 112|0;
 $17 = sp + 104|0;
 $18 = sp + 96|0;
 $19 = sp + 88|0;
 $20 = sp + 80|0;
 $21 = sp + 72|0;
 $22 = sp + 64|0;
 $23 = sp + 56|0;
 $24 = sp + 48|0;
 $25 = sp + 40|0;
 $26 = sp + 32|0;
 $27 = sp + 24|0;
 $28 = sp + 16|0;
 __ZN10emscripten15register_vectorIiEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(7432);
 __ZN10emscripten15register_vectorIdEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(7442);
 __ZN10emscripten15register_vectorIcEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(7455);
 __ZN10emscripten15register_vectorIfEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(7466);
 __ZN10emscripten8internal11NoBaseClass6verifyI11vectorToolsEEvv();
 $29 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI11vectorToolsEEPFvvEv()|0);
 $30 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI11vectorToolsEEPFvvEv()|0);
 $31 = (__ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv()|0);
 $32 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI11vectorToolsEEE3getEv()|0);
 $33 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK11vectorToolsEEE3getEv()|0);
 $34 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $37 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $38 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($31|0),($32|0),($33|0),($34|0),($35|0),(3|0),($36|0),($29|0),($37|0),($30|0),(7478|0),($38|0),(126|0));
 $39 = (__ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv()|0);
 $40 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP11vectorToolsEE8getCountEv($$byval_copy34)|0);
 $41 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP11vectorToolsEE8getTypesEv($$byval_copy34)|0);
 $42 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($39|0),($40|0),($41|0),($42|0),(4|0),(1|0));
 $43 = (__ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv()|0);
 $44 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIdNS4_9allocatorIdEEEEEE8getCountEv($$byval_copy34)|0);
 $45 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIdNS4_9allocatorIdEEEEEE8getTypesEv($$byval_copy34)|0);
 $46 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 __embind_register_class_class_function(($43|0),(7490|0),($44|0),($45|0),($46|0),(1|0),(127|0));
 $47 = (__ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv()|0);
 $48 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIfNS4_9allocatorIfEEEEEE8getCountEv($$byval_copy34)|0);
 $49 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIfNS4_9allocatorIfEEEEEE8getTypesEv($$byval_copy34)|0);
 $50 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 __embind_register_class_class_function(($47|0),(7505|0),($48|0),($49|0),($50|0),(2|0),(128|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI12maxiSettingsEEvv();
 $51 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI12maxiSettingsEEPFvvEv()|0);
 $52 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI12maxiSettingsEEPFvvEv()|0);
 $53 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $54 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI12maxiSettingsEEE3getEv()|0);
 $55 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK12maxiSettingsEEE3getEv()|0);
 $56 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $57 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $58 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $59 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $60 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($53|0),($54|0),($55|0),($56|0),($57|0),(5|0),($58|0),($51|0),($59|0),($52|0),(7522|0),($60|0),(129|0));
 $61 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $62 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP12maxiSettingsEE8getCountEv($$byval_copy34)|0);
 $63 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP12maxiSettingsEE8getTypesEv($$byval_copy34)|0);
 $64 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($61|0),($62|0),($63|0),($64|0),(6|0),(2|0));
 $65 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $66 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiiEE8getCountEv($$byval_copy34)|0);
 $67 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiiEE8getTypesEv($$byval_copy34)|0);
 $68 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 __embind_register_class_class_function(($65|0),(7535|0),($66|0),($67|0),($68|0),(4|0),(1|0));
 $69 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $70 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $71 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (7);
 $$fca$1$gep4$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $72 = (__ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE10getContextES4_($$byval_copy34)|0);
 $73 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $74 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (3);
 $$fca$1$gep$i = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $75 = (__ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE10getContextES4_($$byval_copy34)|0);
 __embind_register_class_property(($69|0),(7541|0),($70|0),($71|0),(18|0),($72|0),($73|0),($74|0),(2|0),($75|0));
 $76 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $77 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $78 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (8);
 $$fca$1$gep4$i306 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i306>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $79 = (__ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE10getContextES4_($$byval_copy34)|0);
 $80 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $81 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (4);
 $$fca$1$gep$i308 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i308>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $82 = (__ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE10getContextES4_($$byval_copy34)|0);
 __embind_register_class_property(($76|0),(7552|0),($77|0),($78|0),(18|0),($79|0),($80|0),($81|0),(2|0),($82|0));
 $83 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $84 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $85 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (9);
 $$fca$1$gep4$i318 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i318>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $86 = (__ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE10getContextES4_($$byval_copy34)|0);
 $87 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $88 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (5);
 $$fca$1$gep$i320 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i320>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $89 = (__ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE10getContextES4_($$byval_copy34)|0);
 __embind_register_class_property(($83|0),(7561|0),($84|0),($85|0),(18|0),($86|0),($87|0),($88|0),(2|0),($89|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiOscEEvv();
 $90 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiOscEEPFvvEv()|0);
 $91 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiOscEEPFvvEv()|0);
 $92 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $93 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiOscEEE3getEv()|0);
 $94 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiOscEEE3getEv()|0);
 $95 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $96 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $97 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $98 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $99 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($92|0),($93|0),($94|0),($95|0),($96|0),(10|0),($97|0),($90|0),($98|0),($91|0),(7572|0),($99|0),(130|0));
 $100 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiOscEEE3getEv()|0);
 $101 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $102 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE18get_sharing_policyEv()|0);
 $103 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $104 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $105 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $106 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($100|0),($101|0),(7580|0),($102|0),($103|0),(11|0),($104|0),(3|0),($105|0),(19|0),($106|0),(131|0));
 $107 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $108 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiOscEEEE8getCountEv($$byval_copy34)|0);
 $109 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiOscEEEE8getTypesEv($$byval_copy34)|0);
 $110 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($107|0),($108|0),($109|0),($110|0),(12|0),(132|0));
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i324 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i324>>2] = 0;
 $111 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $112 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $113 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $114 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $115 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($111|0),(7600|0),($112|0),($113|0),($114|0),(1|0),($115|0),0);
 HEAP32[$$byval_copy34>>2] = (2);
 $$fca$1$gep$i330 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i330>>2] = 0;
 $116 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $117 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $118 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $119 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $120 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($116|0),(7609|0),($117|0),($118|0),($119|0),(1|0),($120|0),0);
 HEAP32[$4>>2] = (3);
 $$fca$1$gep274 = ((($4)) + 4|0);
 HEAP32[$$fca$1$gep274>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$4+4>>2]|0;
 __ZN10emscripten15select_overloadIFddE7maxiOscEEDtfp_EMT0_T_($3,$$byval_copy34);
 $$fca$0$load276 = HEAP32[$3>>2]|0;
 $$fca$1$gep278 = ((($3)) + 4|0);
 $$fca$1$load279 = HEAP32[$$fca$1$gep278>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load276;
 $$fca$1$gep$i336 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i336>>2] = $$fca$1$load279;
 $121 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $122 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $123 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $124 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $125 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($121|0),(7617|0),($122|0),($123|0),($124|0),(1|0),($125|0),0);
 HEAP32[$6>>2] = (1);
 $$fca$1$gep262 = ((($6)) + 4|0);
 HEAP32[$$fca$1$gep262>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$6+4>>2]|0;
 __ZN10emscripten15select_overloadIFddddE7maxiOscEEDtfp_EMT0_T_($5,$$byval_copy34);
 $$fca$0$load264 = HEAP32[$5>>2]|0;
 $$fca$1$gep266 = ((($5)) + 4|0);
 $$fca$1$load267 = HEAP32[$$fca$1$gep266>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load264;
 $$fca$1$gep$i342 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i342>>2] = $$fca$1$load267;
 $126 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $127 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEE8getCountEv($1)|0);
 $128 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEE8getTypesEv($1)|0);
 $129 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $130 = (__ZN10emscripten8internal10getContextIM7maxiOscFddddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($126|0),(7617|0),($127|0),($128|0),($129|0),(1|0),($130|0),0);
 HEAP32[$$byval_copy34>>2] = (4);
 $$fca$1$gep$i348 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i348>>2] = 0;
 $131 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $132 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $133 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $134 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $135 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($131|0),(7624|0),($132|0),($133|0),($134|0),(1|0),($135|0),0);
 HEAP32[$$byval_copy34>>2] = (5);
 $$fca$1$gep$i354 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i354>>2] = 0;
 $136 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $137 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $138 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $139 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $140 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($136|0),(7628|0),($137|0),($138|0),($139|0),(1|0),($140|0),0);
 HEAP32[$$byval_copy34>>2] = (6);
 $$fca$1$gep$i360 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i360>>2] = 0;
 $141 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $142 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $143 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $144 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $145 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($141|0),(7637|0),($142|0),($143|0),($144|0),(1|0),($145|0),0);
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i366 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i366>>2] = 0;
 $146 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $147 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getCountEv($1)|0);
 $148 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getTypesEv($1)|0);
 $149 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $150 = (__ZN10emscripten8internal10getContextIM7maxiOscFdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($146|0),(7644|0),($147|0),($148|0),($149|0),(1|0),($150|0),0);
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i372 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i372>>2] = 0;
 $151 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $152 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEE8getCountEv($1)|0);
 $153 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEE8getTypesEv($1)|0);
 $154 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $155 = (__ZN10emscripten8internal10getContextIM7maxiOscFdvEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($151|0),(7650|0),($152|0),($153|0),($154|0),(1|0),($155|0),0);
 HEAP32[$$byval_copy34>>2] = (7);
 $$fca$1$gep$i378 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i378>>2] = 0;
 $156 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $157 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $158 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $159 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $160 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($156|0),(7656|0),($157|0),($158|0),($159|0),(1|0),($160|0),0);
 HEAP32[$$byval_copy34>>2] = (8);
 $$fca$1$gep$i384 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i384>>2] = 0;
 $161 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $162 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $163 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $164 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $165 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($161|0),(7664|0),($162|0),($163|0),($164|0),(1|0),($165|0),0);
 HEAP32[$$byval_copy34>>2] = (9);
 $$fca$1$gep$i390 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i390>>2] = 0;
 $166 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $167 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $168 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $169 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $170 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($166|0),(7673|0),($167|0),($168|0),($169|0),(1|0),($170|0),0);
 HEAP32[$$byval_copy34>>2] = (2);
 $$fca$1$gep$i396 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i396>>2] = 0;
 $171 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $172 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getCountEv($1)|0);
 $173 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getTypesEv($1)|0);
 $174 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $175 = (__ZN10emscripten8internal10getContextIM7maxiOscFdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($171|0),(7678|0),($172|0),($173|0),($174|0),(1|0),($175|0),0);
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i402 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i402>>2] = 0;
 $176 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $177 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $178 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $179 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $180 = (__ZN10emscripten8internal10getContextIM7maxiOscFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($176|0),(7683|0),($177|0),($178|0),($179|0),(1|0),($180|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI12maxiEnvelopeEEvv();
 $181 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI12maxiEnvelopeEEPFvvEv()|0);
 $182 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI12maxiEnvelopeEEPFvvEv()|0);
 $183 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $184 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI12maxiEnvelopeEEE3getEv()|0);
 $185 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK12maxiEnvelopeEEE3getEv()|0);
 $186 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $187 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $188 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $189 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $190 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($183|0),($184|0),($185|0),($186|0),($187|0),(13|0),($188|0),($181|0),($189|0),($182|0),(7694|0),($190|0),(133|0));
 $191 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI12maxiEnvelopeEEE3getEv()|0);
 $192 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $193 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE18get_sharing_policyEv()|0);
 $194 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $195 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $196 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $197 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($191|0),($192|0),(7707|0),($193|0),($194|0),(14|0),($195|0),(4|0),($196|0),(20|0),($197|0),(134|0));
 $198 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $199 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEE8getCountEv($$byval_copy34)|0);
 $200 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEE8getTypesEv($$byval_copy34)|0);
 $201 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($198|0),($199|0),($200|0),($201|0),(15|0),(135|0));
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i408 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i408>>2] = 0;
 $202 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $203 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getCountEv($1)|0);
 $204 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getTypesEv($1)|0);
 $205 = (__ZN10emscripten8internal19getGenericSignatureIJdiiiiEEEPKcv()|0);
 $206 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeFdiRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEPT_RKSB_($$byval_copy34)|0);
 __embind_register_class_function(($202|0),(7732|0),($203|0),($204|0),($205|0),(1|0),($206|0),0);
 HEAP32[$$byval_copy34>>2] = (2);
 $$fca$1$gep$i414 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i414>>2] = 0;
 $207 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $208 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEE8getCountEv($1)|0);
 $209 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEE8getTypesEv($1)|0);
 $210 = (__ZN10emscripten8internal19getGenericSignatureIJviiidEEEPKcv()|0);
 $211 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeFvidEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($207|0),(7737|0),($208|0),($209|0),($210|0),(1|0),($211|0),0);
 $212 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $213 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $214 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (2);
 $$fca$1$gep4$i424 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i424>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $215 = (__ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFdvEE10getContextES4_($$byval_copy34)|0);
 $216 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $217 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (2);
 $$fca$1$gep$i426 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i426>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $218 = (__ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFvdEE10getContextES4_($$byval_copy34)|0);
 __embind_register_class_property(($212|0),(7745|0),($213|0),($214|0),(2|0),($215|0),($216|0),($217|0),(3|0),($218|0));
 $219 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $220 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $221 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (16);
 $$fca$1$gep4$i436 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i436>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $222 = (__ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFivEE10getContextES4_($$byval_copy34)|0);
 $223 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $224 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (6);
 $$fca$1$gep$i438 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i438>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $225 = (__ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFviEE10getContextES4_($$byval_copy34)|0);
 __embind_register_class_property(($219|0),(7755|0),($220|0),($221|0),(21|0),($222|0),($223|0),($224|0),(3|0),($225|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI13maxiDelaylineEEvv();
 $226 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI13maxiDelaylineEEPFvvEv()|0);
 $227 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI13maxiDelaylineEEPFvvEv()|0);
 $228 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $229 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI13maxiDelaylineEEE3getEv()|0);
 $230 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK13maxiDelaylineEEE3getEv()|0);
 $231 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $232 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $233 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $234 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $235 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($228|0),($229|0),($230|0),($231|0),($232|0),(17|0),($233|0),($226|0),($234|0),($227|0),(7764|0),($235|0),(136|0));
 $236 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI13maxiDelaylineEEE3getEv()|0);
 $237 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $238 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE18get_sharing_policyEv()|0);
 $239 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $240 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $241 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $242 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($236|0),($237|0),(7778|0),($238|0),($239|0),(18|0),($240|0),(5|0),($241|0),(22|0),($242|0),(137|0));
 $243 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $244 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEE8getCountEv($$byval_copy34)|0);
 $245 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEE8getTypesEv($$byval_copy34)|0);
 $246 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($243|0),($244|0),($245|0),($246|0),(19|0),(138|0));
 HEAP32[$8>>2] = (1);
 $$fca$1$gep218 = ((($8)) + 4|0);
 HEAP32[$$fca$1$gep218>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$8+4>>2]|0;
 __ZN10emscripten15select_overloadIFddidE13maxiDelaylineEEDtfp_EMT0_T_($7,$$byval_copy34);
 $$fca$0$load220 = HEAP32[$7>>2]|0;
 $$fca$1$gep222 = ((($7)) + 4|0);
 $$fca$1$load223 = HEAP32[$$fca$1$gep222>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load220;
 $$fca$1$gep$i444 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i444>>2] = $$fca$1$load223;
 $247 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $248 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEE8getCountEv($1)|0);
 $249 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEE8getTypesEv($1)|0);
 $250 = (__ZN10emscripten8internal19getGenericSignatureIJdiididEEEPKcv()|0);
 $251 = (__ZN10emscripten8internal10getContextIM13maxiDelaylineFddidEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($247|0),(7804|0),($248|0),($249|0),($250|0),(1|0),($251|0),0);
 HEAP32[$10>>2] = (1);
 $$fca$1$gep206 = ((($10)) + 4|0);
 HEAP32[$$fca$1$gep206>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$10+4>>2]|0;
 __ZN10emscripten15select_overloadIFddidiE13maxiDelaylineEEDtfp_EMT0_T_($9,$$byval_copy34);
 $$fca$0$load208 = HEAP32[$9>>2]|0;
 $$fca$1$gep210 = ((($9)) + 4|0);
 $$fca$1$load211 = HEAP32[$$fca$1$gep210>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load208;
 $$fca$1$gep$i450 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i450>>2] = $$fca$1$load211;
 $252 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $253 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEE8getCountEv($1)|0);
 $254 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEE8getTypesEv($1)|0);
 $255 = (__ZN10emscripten8internal19getGenericSignatureIJdiididiEEEPKcv()|0);
 $256 = (__ZN10emscripten8internal10getContextIM13maxiDelaylineFddidiEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($252|0),(7804|0),($253|0),($254|0),($255|0),(1|0),($256|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI10maxiFilterEEvv();
 $257 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiFilterEEPFvvEv()|0);
 $258 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiFilterEEPFvvEv()|0);
 $259 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $260 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiFilterEEE3getEv()|0);
 $261 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiFilterEEE3getEv()|0);
 $262 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $263 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $264 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $265 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $266 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($259|0),($260|0),($261|0),($262|0),($263|0),(20|0),($264|0),($257|0),($265|0),($258|0),(7807|0),($266|0),(139|0));
 $267 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiFilterEEE3getEv()|0);
 $268 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $269 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE18get_sharing_policyEv()|0);
 $270 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $271 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $272 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $273 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($267|0),($268|0),(7818|0),($269|0),($270|0),(21|0),($271|0),(6|0),($272|0),(23|0),($273|0),(140|0));
 $274 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $275 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiFilterEEEE8getCountEv($$byval_copy34)|0);
 $276 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiFilterEEEE8getTypesEv($$byval_copy34)|0);
 $277 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($274|0),($275|0),($276|0),($277|0),(22|0),(141|0));
 HEAP32[$$byval_copy34>>2] = (2);
 $$fca$1$gep$i456 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i456>>2] = 0;
 $278 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $279 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getCountEv($1)|0);
 $280 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getTypesEv($1)|0);
 $281 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $282 = (__ZN10emscripten8internal10getContextIM10maxiFilterFddddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($278|0),(7841|0),($279|0),($280|0),($281|0),(2|0),($282|0),0);
 HEAP32[$$byval_copy34>>2] = (3);
 $$fca$1$gep$i462 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i462>>2] = 0;
 $283 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $284 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getCountEv($1)|0);
 $285 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getTypesEv($1)|0);
 $286 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $287 = (__ZN10emscripten8internal10getContextIM10maxiFilterFddddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($283|0),(7847|0),($284|0),($285|0),($286|0),(2|0),($287|0),0);
 HEAP32[$$byval_copy34>>2] = (4);
 $$fca$1$gep$i468 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i468>>2] = 0;
 $288 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $289 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getCountEv($1)|0);
 $290 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getTypesEv($1)|0);
 $291 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $292 = (__ZN10emscripten8internal10getContextIM10maxiFilterFddddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($288|0),(7853|0),($289|0),($290|0),($291|0),(2|0),($292|0),0);
 HEAP32[$$byval_copy34>>2] = (3);
 $$fca$1$gep$i474 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i474>>2] = 0;
 $293 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $294 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getCountEv($1)|0);
 $295 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getTypesEv($1)|0);
 $296 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $297 = (__ZN10emscripten8internal10getContextIM10maxiFilterFdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($293|0),(7862|0),($294|0),($295|0),($296|0),(2|0),($297|0),0);
 HEAP32[$$byval_copy34>>2] = (4);
 $$fca$1$gep$i480 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i480>>2] = 0;
 $298 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $299 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getCountEv($1)|0);
 $300 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getTypesEv($1)|0);
 $301 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $302 = (__ZN10emscripten8internal10getContextIM10maxiFilterFdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($298|0),(7869|0),($299|0),($300|0),($301|0),(2|0),($302|0),0);
 $303 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $304 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $305 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (3);
 $$fca$1$gep4$i490 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i490>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $306 = (__ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE10getContextES4_($$byval_copy34)|0);
 $307 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $308 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (3);
 $$fca$1$gep$i492 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i492>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $309 = (__ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE10getContextES4_($$byval_copy34)|0);
 __embind_register_class_property(($303|0),(7876|0),($304|0),($305|0),(3|0),($306|0),($307|0),($308|0),(4|0),($309|0));
 $310 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $311 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $312 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (4);
 $$fca$1$gep4$i502 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i502>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $313 = (__ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE10getContextES4_($$byval_copy34)|0);
 $314 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $315 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (4);
 $$fca$1$gep$i504 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i504>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $316 = (__ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE10getContextES4_($$byval_copy34)|0);
 __embind_register_class_property(($310|0),(7883|0),($311|0),($312|0),(3|0),($313|0),($314|0),($315|0),(4|0),($316|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiMixEEvv();
 $317 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiMixEEPFvvEv()|0);
 $318 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiMixEEPFvvEv()|0);
 $319 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $320 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiMixEEE3getEv()|0);
 $321 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiMixEEE3getEv()|0);
 $322 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $323 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $324 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $325 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $326 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($319|0),($320|0),($321|0),($322|0),($323|0),(23|0),($324|0),($317|0),($325|0),($318|0),(7893|0),($326|0),(142|0));
 $327 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiMixEEE3getEv()|0);
 $328 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $329 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE18get_sharing_policyEv()|0);
 $330 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $331 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $332 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $333 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($327|0),($328|0),(7901|0),($329|0),($330|0),(24|0),($331|0),(7|0),($332|0),(24|0),($333|0),(143|0));
 $334 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $335 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMixEEEE8getCountEv($$byval_copy34)|0);
 $336 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMixEEEE8getTypesEv($$byval_copy34)|0);
 $337 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($334|0),($335|0),($336|0),($337|0),(25|0),(144|0));
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i510 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i510>>2] = 0;
 $338 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $339 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdEE8getCountEv($1)|0);
 $340 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdEE8getTypesEv($1)|0);
 $341 = (__ZN10emscripten8internal19getGenericSignatureIJviididEEEPKcv()|0);
 $342 = (__ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdEEEPT_RKSB_($$byval_copy34)|0);
 __embind_register_class_function(($338|0),(7921|0),($339|0),($340|0),($341|0),(1|0),($342|0),0);
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i516 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i516>>2] = 0;
 $343 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $344 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEddEE8getCountEv($1)|0);
 $345 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEddEE8getTypesEv($1)|0);
 $346 = (__ZN10emscripten8internal19getGenericSignatureIJviididdEEEPKcv()|0);
 $347 = (__ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEddEEEPT_RKSB_($$byval_copy34)|0);
 __embind_register_class_function(($343|0),(7928|0),($344|0),($345|0),($346|0),(1|0),($347|0),0);
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i522 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i522>>2] = 0;
 $348 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $349 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdddEE8getCountEv($1)|0);
 $350 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdddEE8getTypesEv($1)|0);
 $351 = (__ZN10emscripten8internal19getGenericSignatureIJviididddEEEPKcv()|0);
 $352 = (__ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdddEEEPT_RKSB_($$byval_copy34)|0);
 __embind_register_class_function(($348|0),(7933|0),($349|0),($350|0),($351|0),(1|0),($352|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI10maxiLagExpIdEEEvv();
 $353 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiLagExpIdEEEPFvvEv()|0);
 $354 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiLagExpIdEEEPFvvEv()|0);
 $355 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $356 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiLagExpIdEEEE3getEv()|0);
 $357 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiLagExpIdEEEE3getEv()|0);
 $358 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $359 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $360 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $361 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $362 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($355|0),($356|0),($357|0),($358|0),($359|0),(26|0),($360|0),($353|0),($361|0),($354|0),(7943|0),($362|0),(145|0));
 $363 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiLagExpIdEEEE3getEv()|0);
 $364 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $365 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE18get_sharing_policyEv()|0);
 $366 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $367 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $368 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $369 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($363|0),($364|0),(7954|0),($365|0),($366|0),(27|0),($367|0),(8|0),($368|0),(25|0),($369|0),(146|0));
 $370 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $371 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEE8getCountEv($$byval_copy34)|0);
 $372 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEE8getTypesEv($$byval_copy34)|0);
 $373 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($370|0),($371|0),($372|0),($373|0),(28|0),(147|0));
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i528 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i528>>2] = 0;
 $374 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $375 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEE8getCountEv($1)|0);
 $376 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEE8getTypesEv($1)|0);
 $377 = (__ZN10emscripten8internal19getGenericSignatureIJviiddEEEPKcv()|0);
 $378 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvddEEEPT_RKS6_($$byval_copy34)|0);
 __embind_register_class_function(($374|0),(7985|0),($375|0),($376|0),($377|0),(1|0),($378|0),0);
 HEAP32[$$byval_copy34>>2] = (5);
 $$fca$1$gep$i534 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i534>>2] = 0;
 $379 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $380 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEE8getCountEv($1)|0);
 $381 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEE8getTypesEv($1)|0);
 $382 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $383 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvdEEEPT_RKS6_($$byval_copy34)|0);
 __embind_register_class_function(($379|0),(7990|0),($380|0),($381|0),($382|0),(5|0),($383|0),0);
 HEAP32[$$byval_copy34>>2] = (5);
 $$fca$1$gep$i540 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i540>>2] = 0;
 $384 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $385 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEE8getCountEv($1)|0);
 $386 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEE8getTypesEv($1)|0);
 $387 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $388 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEKFdvEEEPT_RKS6_($$byval_copy34)|0);
 __embind_register_class_function(($384|0),(8000|0),($385|0),($386|0),($387|0),(4|0),($388|0),0);
 $389 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $390 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $391 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (6);
 $$fca$1$gep4$i550 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i550>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $392 = (__ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE10getContextES5_($$byval_copy34)|0);
 $393 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $394 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (6);
 $$fca$1$gep$i552 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i552>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $395 = (__ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE10getContextES5_($$byval_copy34)|0);
 __embind_register_class_property(($389|0),(8006|0),($390|0),($391|0),(5|0),($392|0),($393|0),($394|0),(6|0),($395|0));
 $396 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $397 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $398 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (7);
 $$fca$1$gep4$i562 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i562>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $399 = (__ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE10getContextES5_($$byval_copy34)|0);
 $400 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $401 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (7);
 $$fca$1$gep$i564 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i564>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $402 = (__ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE10getContextES5_($$byval_copy34)|0);
 __embind_register_class_property(($396|0),(8012|0),($397|0),($398|0),(5|0),($399|0),($400|0),($401|0),(6|0),($402|0));
 $403 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $404 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $405 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (5);
 $$fca$1$gep4$i574 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i574>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $406 = (__ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE10getContextES5_($$byval_copy34)|0);
 $407 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $408 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (8);
 $$fca$1$gep$i576 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i576>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $409 = (__ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE10getContextES5_($$byval_copy34)|0);
 __embind_register_class_property(($403|0),(8028|0),($404|0),($405|0),(5|0),($406|0),($407|0),($408|0),(6|0),($409|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI10maxiSampleEEvv();
 $410 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiSampleEEPFvvEv()|0);
 $411 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiSampleEEPFvvEv()|0);
 $412 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $413 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiSampleEEE3getEv()|0);
 $414 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiSampleEEE3getEv()|0);
 $415 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $416 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $417 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $418 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $419 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($412|0),($413|0),($414|0),($415|0),($416|0),(29|0),($417|0),($410|0),($418|0),($411|0),(8032|0),($419|0),(148|0));
 $420 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiSampleEEE3getEv()|0);
 $421 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $422 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE18get_sharing_policyEv()|0);
 $423 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $424 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $425 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $426 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($420|0),($421|0),(8043|0),($422|0),($423|0),(30|0),($424|0),(9|0),($425|0),(26|0),($426|0),(149|0));
 $427 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $428 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiSampleEEEE8getCountEv($$byval_copy34)|0);
 $429 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiSampleEEEE8getTypesEv($$byval_copy34)|0);
 $430 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($427|0),($428|0),($429|0),($430|0),(31|0),(150|0));
 HEAP32[$$byval_copy34>>2] = (151);
 $$fca$1$gep$i582 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i582>>2] = 0;
 $431 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $432 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $433 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $434 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $435 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvvEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($431|0),(8066|0),($432|0),($433|0),($434|0),(7|0),($435|0),0);
 HEAP32[$12>>2] = (8);
 $$fca$1$gep150 = ((($12)) + 4|0);
 HEAP32[$$fca$1$gep150>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$12+4>>2]|0;
 __ZN10emscripten15select_overloadIFvRNSt3__26vectorIdNS1_9allocatorIdEEEEE10maxiSampleEEDtfp_EMT0_T_($11,$$byval_copy34);
 $$fca$0$load152 = HEAP32[$11>>2]|0;
 $$fca$1$gep154 = ((($11)) + 4|0);
 $$fca$1$load155 = HEAP32[$$fca$1$gep154>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load152;
 $$fca$1$gep$i588 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i588>>2] = $$fca$1$load155;
 $436 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $437 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getCountEv($1)|0);
 $438 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getTypesEv($1)|0);
 $439 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $440 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEPT_RKSB_($$byval_copy34)|0);
 __embind_register_class_function(($436|0),(8076|0),($437|0),($438|0),($439|0),(4|0),($440|0),0);
 HEAP32[$14>>2] = (5);
 $$fca$1$gep138 = ((($14)) + 4|0);
 HEAP32[$$fca$1$gep138>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$14+4>>2]|0;
 __ZN10emscripten15select_overloadIFvRNSt3__26vectorIdNS1_9allocatorIdEEEEiE10maxiSampleEEDtfp_EMT0_T_($13,$$byval_copy34);
 $$fca$0$load140 = HEAP32[$13>>2]|0;
 $$fca$1$gep142 = ((($13)) + 4|0);
 $$fca$1$load143 = HEAP32[$$fca$1$gep142>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load140;
 $$fca$1$gep$i594 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i594>>2] = $$fca$1$load143;
 $441 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $442 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEiEE8getCountEv($1)|0);
 $443 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEiEE8getTypesEv($1)|0);
 $444 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $445 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEiEEEPT_RKSB_($$byval_copy34)|0);
 __embind_register_class_function(($441|0),(8076|0),($442|0),($443|0),($444|0),(5|0),($445|0),0);
 HEAP32[$$byval_copy34>>2] = (32);
 $$fca$1$gep$i600 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i600>>2] = 0;
 $446 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $447 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $448 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $449 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $450 = (__ZN10emscripten8internal10getContextIM10maxiSampleFbvEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($446|0),(8086|0),($447|0),($448|0),($449|0),(27|0),($450|0),0);
 HEAP32[$16>>2] = (8);
 $$fca$1$gep124 = ((($16)) + 4|0);
 HEAP32[$$fca$1$gep124>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$16+4>>2]|0;
 __ZN10emscripten15select_overloadIFdvE10maxiSampleEEDtfp_EMT0_T_($15,$$byval_copy34);
 $$fca$0$load126 = HEAP32[$15>>2]|0;
 $$fca$1$gep128 = ((($15)) + 4|0);
 $$fca$1$load129 = HEAP32[$$fca$1$gep128>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load126;
 $$fca$1$gep$i606 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i606>>2] = $$fca$1$load129;
 $451 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $452 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $453 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $454 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $455 = (__ZN10emscripten8internal10getContextIM10maxiSampleFdvEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($451|0),(8094|0),($452|0),($453|0),($454|0),(6|0),($455|0),0);
 HEAP32[$18>>2] = (10);
 $$fca$1$gep112 = ((($18)) + 4|0);
 HEAP32[$$fca$1$gep112>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$18+4>>2]|0;
 __ZN10emscripten15select_overloadIFddE10maxiSampleEEDtfp_EMT0_T_($17,$$byval_copy34);
 $$fca$0$load114 = HEAP32[$17>>2]|0;
 $$fca$1$gep116 = ((($17)) + 4|0);
 $$fca$1$load117 = HEAP32[$$fca$1$gep116>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load114;
 $$fca$1$gep$i612 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i612>>2] = $$fca$1$load117;
 $456 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $457 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getCountEv($1)|0);
 $458 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getTypesEv($1)|0);
 $459 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $460 = (__ZN10emscripten8internal10getContextIM10maxiSampleFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($456|0),(8094|0),($457|0),($458|0),($459|0),(2|0),($460|0),0);
 HEAP32[$20>>2] = (9);
 $$fca$1$gep100 = ((($20)) + 4|0);
 HEAP32[$$fca$1$gep100>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$20+4>>2]|0;
 __ZN10emscripten15select_overloadIFdvE10maxiSampleEEDtfp_EMT0_T_($19,$$byval_copy34);
 $$fca$0$load102 = HEAP32[$19>>2]|0;
 $$fca$1$gep104 = ((($19)) + 4|0);
 $$fca$1$load105 = HEAP32[$$fca$1$gep104>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load102;
 $$fca$1$gep$i618 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i618>>2] = $$fca$1$load105;
 $461 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $462 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $463 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $464 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $465 = (__ZN10emscripten8internal10getContextIM10maxiSampleFdvEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($461|0),(8103|0),($462|0),($463|0),($464|0),(6|0),($465|0),0);
 HEAP32[$22>>2] = (11);
 $$fca$1$gep88 = ((($22)) + 4|0);
 HEAP32[$$fca$1$gep88>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$22+4>>2]|0;
 __ZN10emscripten15select_overloadIFddE10maxiSampleEEDtfp_EMT0_T_($21,$$byval_copy34);
 $$fca$0$load90 = HEAP32[$21>>2]|0;
 $$fca$1$gep92 = ((($21)) + 4|0);
 $$fca$1$load93 = HEAP32[$$fca$1$gep92>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load90;
 $$fca$1$gep$i624 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i624>>2] = $$fca$1$load93;
 $466 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $467 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getCountEv($1)|0);
 $468 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getTypesEv($1)|0);
 $469 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $470 = (__ZN10emscripten8internal10getContextIM10maxiSampleFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($466|0),(8103|0),($467|0),($468|0),($469|0),(2|0),($470|0),0);
 HEAP32[$24>>2] = (5);
 $$fca$1$gep76 = ((($24)) + 4|0);
 HEAP32[$$fca$1$gep76>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$24+4>>2]|0;
 __ZN10emscripten15select_overloadIFddddE10maxiSampleEEDtfp_EMT0_T_($23,$$byval_copy34);
 $$fca$0$load78 = HEAP32[$23>>2]|0;
 $$fca$1$gep80 = ((($23)) + 4|0);
 $$fca$1$load81 = HEAP32[$$fca$1$gep80>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load78;
 $$fca$1$gep$i630 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i630>>2] = $$fca$1$load81;
 $471 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $472 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getCountEv($1)|0);
 $473 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getTypesEv($1)|0);
 $474 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $475 = (__ZN10emscripten8internal10getContextIM10maxiSampleFddddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($471|0),(8103|0),($472|0),($473|0),($474|0),(3|0),($475|0),0);
 HEAP32[$$byval_copy34>>2] = (6);
 $$fca$1$gep$i636 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i636>>2] = 0;
 $476 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $477 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getCountEv($1)|0);
 $478 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getTypesEv($1)|0);
 $479 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $480 = (__ZN10emscripten8internal10getContextIM10maxiSampleFddddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($476|0),(8108|0),($477|0),($478|0),($479|0),(3|0),($480|0),0);
 HEAP32[$$byval_copy34>>2] = (152);
 $$fca$1$gep$i642 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i642>>2] = 0;
 $481 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $482 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $483 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $484 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $485 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvvEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($481|0),(7737|0),($482|0),($483|0),($484|0),(7|0),($485|0),0);
 HEAP32[$$byval_copy34>>2] = (153);
 $$fca$1$gep$i648 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i648>>2] = 0;
 $486 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $487 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $488 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $489 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $490 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvvEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($486|0),(8114|0),($487|0),($488|0),($489|0),(7|0),($490|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiMapEEvv();
 $491 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiMapEEPFvvEv()|0);
 $492 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiMapEEPFvvEv()|0);
 $493 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $494 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiMapEEE3getEv()|0);
 $495 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiMapEEE3getEv()|0);
 $496 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $497 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $498 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $499 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $500 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($493|0),($494|0),($495|0),($496|0),($497|0),(33|0),($498|0),($491|0),($499|0),($492|0),(8120|0),($500|0),(154|0));
 $501 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiMapEEE3getEv()|0);
 $502 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $503 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE18get_sharing_policyEv()|0);
 $504 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $505 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $506 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $507 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($501|0),($502|0),(8128|0),($503|0),($504|0),(34|0),($505|0),(10|0),($506|0),(28|0),($507|0),(155|0));
 $508 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $509 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMapEEEE8getCountEv($$byval_copy34)|0);
 $510 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMapEEEE8getTypesEv($$byval_copy34)|0);
 $511 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($508|0),($509|0),($510|0),($511|0),(35|0),(156|0));
 HEAP32[$$byval_copy34>>2] = 1;
 $512 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $513 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getCountEv($1)|0);
 $514 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getTypesEv($1)|0);
 $515 = (__ZN10emscripten8internal19getGenericSignatureIJdidddddEEEPKcv()|0);
 $516 = (__ZN10emscripten8internal10getContextIPFddddddEEEPT_RKS4_($$byval_copy34)|0);
 __embind_register_class_function(($512|0),(8148|0),($513|0),($514|0),($515|0),(1|0),($516|0),0);
 HEAP32[$$byval_copy34>>2] = 2;
 $517 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $518 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getCountEv($1)|0);
 $519 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getTypesEv($1)|0);
 $520 = (__ZN10emscripten8internal19getGenericSignatureIJdidddddEEEPKcv()|0);
 $521 = (__ZN10emscripten8internal10getContextIPFddddddEEEPT_RKS4_($$byval_copy34)|0);
 __embind_register_class_function(($517|0),(8155|0),($518|0),($519|0),($520|0),(1|0),($521|0),0);
 HEAP32[$$byval_copy34>>2] = 3;
 $522 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $523 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getCountEv($1)|0);
 $524 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getTypesEv($1)|0);
 $525 = (__ZN10emscripten8internal19getGenericSignatureIJdidddddEEEPKcv()|0);
 $526 = (__ZN10emscripten8internal10getContextIPFddddddEEEPT_RKS4_($$byval_copy34)|0);
 __embind_register_class_function(($522|0),(8162|0),($523|0),($524|0),($525|0),(1|0),($526|0),0);
 HEAP32[$$byval_copy34>>2] = 1;
 $527 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $528 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddEE8getCountEv($1)|0);
 $529 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddEE8getTypesEv($1)|0);
 $530 = (__ZN10emscripten8internal19getGenericSignatureIJdidddEEEPKcv()|0);
 $531 = (__ZN10emscripten8internal10getContextIPFddddEEEPT_RKS4_($$byval_copy34)|0);
 __embind_register_class_function(($527|0),(8169|0),($528|0),($529|0),($530|0),(7|0),($531|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiDynEEvv();
 $532 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiDynEEPFvvEv()|0);
 $533 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiDynEEPFvvEv()|0);
 $534 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $535 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiDynEEE3getEv()|0);
 $536 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiDynEEE3getEv()|0);
 $537 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $538 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $539 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $540 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $541 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($534|0),($535|0),($536|0),($537|0),($538|0),(36|0),($539|0),($532|0),($540|0),($533|0),(8175|0),($541|0),(157|0));
 $542 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiDynEEE3getEv()|0);
 $543 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $544 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE18get_sharing_policyEv()|0);
 $545 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $546 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $547 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $548 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($542|0),($543|0),(8183|0),($544|0),($545|0),(37|0),($546|0),(11|0),($547|0),(29|0),($548|0),(158|0));
 $549 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $550 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiDynEEEE8getCountEv($$byval_copy34)|0);
 $551 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiDynEEEE8getTypesEv($$byval_copy34)|0);
 $552 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($549|0),($550|0),($551|0),($552|0),(38|0),(159|0));
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i654 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i654>>2] = 0;
 $553 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $554 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEE8getCountEv($1)|0);
 $555 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEE8getTypesEv($1)|0);
 $556 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddiddEEEPKcv()|0);
 $557 = (__ZN10emscripten8internal10getContextIM7maxiDynFdddlddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($553|0),(8203|0),($554|0),($555|0),($556|0),(1|0),($557|0),0);
 HEAP32[$$byval_copy34>>2] = (2);
 $$fca$1$gep$i660 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i660>>2] = 0;
 $558 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $559 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEE8getCountEv($1)|0);
 $560 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEE8getTypesEv($1)|0);
 $561 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddddEEEPKcv()|0);
 $562 = (__ZN10emscripten8internal10getContextIM7maxiDynFddddddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($558|0),(8208|0),($559|0),($560|0),($561|0),(1|0),($562|0),0);
 HEAP32[$$byval_copy34>>2] = (12);
 $$fca$1$gep$i666 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i666>>2] = 0;
 $563 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $564 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $565 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $566 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $567 = (__ZN10emscripten8internal10getContextIM7maxiDynFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($563|0),(8219|0),($564|0),($565|0),($566|0),(3|0),($567|0),0);
 HEAP32[$$byval_copy34>>2] = (9);
 $$fca$1$gep$i672 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i672>>2] = 0;
 $568 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $569 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $570 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $571 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $572 = (__ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($568|0),(8228|0),($569|0),($570|0),($571|0),(7|0),($572|0),0);
 HEAP32[$$byval_copy34>>2] = (10);
 $$fca$1$gep$i678 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i678>>2] = 0;
 $573 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $574 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $575 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $576 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $577 = (__ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($573|0),(8238|0),($574|0),($575|0),($576|0),(7|0),($577|0),0);
 HEAP32[$$byval_copy34>>2] = (11);
 $$fca$1$gep$i684 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i684>>2] = 0;
 $578 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $579 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $580 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $581 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $582 = (__ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($578|0),(8249|0),($579|0),($580|0),($581|0),(7|0),($582|0),0);
 HEAP32[$$byval_copy34>>2] = (12);
 $$fca$1$gep$i690 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i690>>2] = 0;
 $583 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $584 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $585 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $586 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $587 = (__ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($583|0),(8262|0),($584|0),($585|0),($586|0),(7|0),($587|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiEnvEEvv();
 $588 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiEnvEEPFvvEv()|0);
 $589 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiEnvEEPFvvEv()|0);
 $590 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $591 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiEnvEEE3getEv()|0);
 $592 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiEnvEEE3getEv()|0);
 $593 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $594 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $595 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $596 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $597 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($590|0),($591|0),($592|0),($593|0),($594|0),(39|0),($595|0),($588|0),($596|0),($589|0),(8271|0),($597|0),(160|0));
 $598 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiEnvEEE3getEv()|0);
 $599 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $600 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE18get_sharing_policyEv()|0);
 $601 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $602 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $603 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $604 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($598|0),($599|0),(8279|0),($600|0),($601|0),(40|0),($602|0),(12|0),($603|0),(30|0),($604|0),(161|0));
 $605 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $606 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiEnvEEEE8getCountEv($$byval_copy34)|0);
 $607 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiEnvEEEE8getTypesEv($$byval_copy34)|0);
 $608 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($605|0),($606|0),($607|0),($608|0),(41|0),(162|0));
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i696 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i696>>2] = 0;
 $609 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $610 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEE8getCountEv($1)|0);
 $611 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEE8getTypesEv($1)|0);
 $612 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddiiEEEPKcv()|0);
 $613 = (__ZN10emscripten8internal10getContextIM7maxiEnvFddddliEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($609|0),(8299|0),($610|0),($611|0),($612|0),(1|0),($613|0),0);
 HEAP32[$26>>2] = (1);
 $$fca$1$gep42 = ((($26)) + 4|0);
 HEAP32[$$fca$1$gep42>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$26+4>>2]|0;
 __ZN10emscripten15select_overloadIFddddddliE7maxiEnvEEDtfp_EMT0_T_($25,$$byval_copy34);
 $$fca$0$load44 = HEAP32[$25>>2]|0;
 $$fca$1$gep46 = ((($25)) + 4|0);
 $$fca$1$load47 = HEAP32[$$fca$1$gep46>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load44;
 $$fca$1$gep$i702 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i702>>2] = $$fca$1$load47;
 $614 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $615 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEE8getCountEv($1)|0);
 $616 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEE8getTypesEv($1)|0);
 $617 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddddiiEEEPKcv()|0);
 $618 = (__ZN10emscripten8internal10getContextIM7maxiEnvFddddddliEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($614|0),(8302|0),($615|0),($616|0),($617|0),(1|0),($618|0),0);
 HEAP32[$28>>2] = (1);
 $$fca$1$gep34 = ((($28)) + 4|0);
 HEAP32[$$fca$1$gep34>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$28+4>>2]|0;
 __ZN10emscripten15select_overloadIFddiE7maxiEnvEEDtfp_EMT0_T_($27,$$byval_copy34);
 $$fca$0$load = HEAP32[$27>>2]|0;
 $$fca$1$gep36 = ((($27)) + 4|0);
 $$fca$1$load = HEAP32[$$fca$1$gep36>>2]|0;
 HEAP32[$$byval_copy34>>2] = $$fca$0$load;
 $$fca$1$gep$i708 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i708>>2] = $$fca$1$load;
 $619 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $620 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEE8getCountEv($1)|0);
 $621 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEE8getTypesEv($1)|0);
 $622 = (__ZN10emscripten8internal19getGenericSignatureIJdiidiEEEPKcv()|0);
 $623 = (__ZN10emscripten8internal10getContextIM7maxiEnvFddiEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($619|0),(8302|0),($620|0),($621|0),($622|0),(1|0),($623|0),0);
 HEAP32[$$byval_copy34>>2] = (13);
 $$fca$1$gep$i714 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i714>>2] = 0;
 $624 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $625 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($1)|0);
 $626 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($1)|0);
 $627 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $628 = (__ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($624|0),(8228|0),($625|0),($626|0),($627|0),(8|0),($628|0),0);
 HEAP32[$$byval_copy34>>2] = (14);
 $$fca$1$gep$i720 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i720>>2] = 0;
 $629 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $630 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($1)|0);
 $631 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($1)|0);
 $632 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $633 = (__ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($629|0),(8238|0),($630|0),($631|0),($632|0),(8|0),($633|0),0);
 HEAP32[$$byval_copy34>>2] = (15);
 $$fca$1$gep$i726 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i726>>2] = 0;
 $634 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $635 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($1)|0);
 $636 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($1)|0);
 $637 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $638 = (__ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($634|0),(8307|0),($635|0),($636|0),($637|0),(8|0),($638|0),0);
 HEAP32[$$byval_copy34>>2] = (16);
 $$fca$1$gep$i732 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i732>>2] = 0;
 $639 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $640 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($1)|0);
 $641 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($1)|0);
 $642 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $643 = (__ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($639|0),(8316|0),($640|0),($641|0),($642|0),(8|0),($643|0),0);
 $644 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $645 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $646 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (42);
 $$fca$1$gep4$i742 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i742>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$1+4>>2]|0;
 $647 = (__ZN10emscripten8internal12GetterPolicyIM7maxiEnvKFivEE10getContextES4_($$byval_copy34)|0);
 $648 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $649 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (9);
 $$fca$1$gep$i744 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i744>>2] = 0;
 ;HEAP32[$$byval_copy34>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$2+4>>2]|0;
 $650 = (__ZN10emscripten8internal12SetterPolicyIM7maxiEnvFviEE10getContextES4_($$byval_copy34)|0);
 __embind_register_class_property(($644|0),(7737|0),($645|0),($646|0),(31|0),($647|0),($648|0),($649|0),(6|0),($650|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI7convertEEvv();
 $651 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7convertEEPFvvEv()|0);
 $652 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7convertEEPFvvEv()|0);
 $653 = (__ZN10emscripten8internal6TypeIDI7convertE3getEv()|0);
 $654 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7convertEEE3getEv()|0);
 $655 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7convertEEE3getEv()|0);
 $656 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $657 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $658 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $659 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $660 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($653|0),($654|0),($655|0),($656|0),($657|0),(43|0),($658|0),($651|0),($659|0),($652|0),(8327|0),($660|0),(163|0));
 $661 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7convertEEE3getEv()|0);
 $662 = (__ZN10emscripten8internal6TypeIDI7convertE3getEv()|0);
 $663 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE18get_sharing_policyEv()|0);
 $664 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $665 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $666 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $667 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($661|0),($662|0),(8335|0),($663|0),($664|0),(44|0),($665|0),(13|0),($666|0),(32|0),($667|0),(164|0));
 $668 = (__ZN10emscripten8internal6TypeIDI7convertE3getEv()|0);
 $669 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7convertEEEE8getCountEv($$byval_copy34)|0);
 $670 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7convertEEEE8getTypesEv($$byval_copy34)|0);
 $671 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($668|0),($669|0),($670|0),($671|0),(45|0),(165|0));
 HEAP32[$$byval_copy34>>2] = (7);
 $$fca$1$gep$i750 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i750>>2] = 0;
 $672 = (__ZN10emscripten8internal6TypeIDI7convertE3getEv()|0);
 $673 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7convertEEiEE8getCountEv($1)|0);
 $674 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7convertEEiEE8getTypesEv($1)|0);
 $675 = (__ZN10emscripten8internal19getGenericSignatureIJdiiiEEEPKcv()|0);
 $676 = (__ZN10emscripten8internal10getContextIM7convertFdiEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($672|0),(8355|0),($673|0),($674|0),($675|0),(2|0),($676|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI14maxiDistortionEEvv();
 $677 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI14maxiDistortionEEPFvvEv()|0);
 $678 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI14maxiDistortionEEPFvvEv()|0);
 $679 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $680 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI14maxiDistortionEEE3getEv()|0);
 $681 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK14maxiDistortionEEE3getEv()|0);
 $682 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $683 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $684 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $685 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $686 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($679|0),($680|0),($681|0),($682|0),($683|0),(46|0),($684|0),($677|0),($685|0),($678|0),(8360|0),($686|0),(166|0));
 $687 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI14maxiDistortionEEE3getEv()|0);
 $688 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $689 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE18get_sharing_policyEv()|0);
 $690 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $691 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $692 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $693 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($687|0),($688|0),(8375|0),($689|0),($690|0),(47|0),($691|0),(14|0),($692|0),(33|0),($693|0),(167|0));
 $694 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $695 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI14maxiDistortionEEEE8getCountEv($$byval_copy34)|0);
 $696 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI14maxiDistortionEEEE8getTypesEv($$byval_copy34)|0);
 $697 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($694|0),($695|0),($696|0),($697|0),(48|0),(168|0));
 HEAP32[$$byval_copy34>>2] = (13);
 $$fca$1$gep$i756 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i756>>2] = 0;
 $698 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $699 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEE8getCountEv($1)|0);
 $700 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEE8getTypesEv($1)|0);
 $701 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $702 = (__ZN10emscripten8internal10getContextIM14maxiDistortionFddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($698|0),(8402|0),($699|0),($700|0),($701|0),(4|0),($702|0),0);
 HEAP32[$$byval_copy34>>2] = (5);
 $$fca$1$gep$i762 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i762>>2] = 0;
 $703 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $704 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getCountEv($1)|0);
 $705 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getTypesEv($1)|0);
 $706 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $707 = (__ZN10emscripten8internal10getContextIM14maxiDistortionFdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($703|0),(8411|0),($704|0),($705|0),($706|0),(3|0),($707|0),0);
 HEAP32[$$byval_copy34>>2] = (6);
 $$fca$1$gep$i768 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i768>>2] = 0;
 $708 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $709 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getCountEv($1)|0);
 $710 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getTypesEv($1)|0);
 $711 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $712 = (__ZN10emscripten8internal10getContextIM14maxiDistortionFdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($708|0),(8420|0),($709|0),($710|0),($711|0),(3|0),($712|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI11maxiFlangerEEvv();
 $713 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI11maxiFlangerEEPFvvEv()|0);
 $714 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI11maxiFlangerEEPFvvEv()|0);
 $715 = (__ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv()|0);
 $716 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI11maxiFlangerEEE3getEv()|0);
 $717 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK11maxiFlangerEEE3getEv()|0);
 $718 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $719 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $720 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $721 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $722 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($715|0),($716|0),($717|0),($718|0),($719|0),(49|0),($720|0),($713|0),($721|0),($714|0),(8433|0),($722|0),(169|0));
 $723 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI11maxiFlangerEEE3getEv()|0);
 $724 = (__ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv()|0);
 $725 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE18get_sharing_policyEv()|0);
 $726 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $727 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $728 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $729 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($723|0),($724|0),(8445|0),($725|0),($726|0),(50|0),($727|0),(15|0),($728|0),(34|0),($729|0),(170|0));
 $730 = (__ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv()|0);
 $731 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI11maxiFlangerEEEE8getCountEv($$byval_copy34)|0);
 $732 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI11maxiFlangerEEEE8getTypesEv($$byval_copy34)|0);
 $733 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($730|0),($731|0),($732|0),($733|0),(51|0),(171|0));
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i774 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i774>>2] = 0;
 $734 = (__ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv()|0);
 $735 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEE8getCountEv($1)|0);
 $736 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEE8getTypesEv($1)|0);
 $737 = (__ZN10emscripten8internal19getGenericSignatureIJdiididddEEEPKcv()|0);
 $738 = (__ZN10emscripten8internal10getContextIM11maxiFlangerFddjdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($734|0),(8469|0),($735|0),($736|0),($737|0),(1|0),($738|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI10maxiChorusEEvv();
 $739 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiChorusEEPFvvEv()|0);
 $740 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiChorusEEPFvvEv()|0);
 $741 = (__ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv()|0);
 $742 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiChorusEEE3getEv()|0);
 $743 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiChorusEEE3getEv()|0);
 $744 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $745 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $746 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $747 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $748 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($741|0),($742|0),($743|0),($744|0),($745|0),(52|0),($746|0),($739|0),($747|0),($740|0),(8476|0),($748|0),(172|0));
 $749 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiChorusEEE3getEv()|0);
 $750 = (__ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv()|0);
 $751 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE18get_sharing_policyEv()|0);
 $752 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $753 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $754 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $755 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($749|0),($750|0),(8487|0),($751|0),($752|0),(53|0),($753|0),(16|0),($754|0),(35|0),($755|0),(173|0));
 $756 = (__ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv()|0);
 $757 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiChorusEEEE8getCountEv($$byval_copy34)|0);
 $758 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiChorusEEEE8getTypesEv($$byval_copy34)|0);
 $759 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($756|0),($757|0),($758|0),($759|0),(54|0),(174|0));
 HEAP32[$$byval_copy34>>2] = (2);
 $$fca$1$gep$i780 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i780>>2] = 0;
 $760 = (__ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv()|0);
 $761 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEE8getCountEv($1)|0);
 $762 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEE8getTypesEv($1)|0);
 $763 = (__ZN10emscripten8internal19getGenericSignatureIJdiididddEEEPKcv()|0);
 $764 = (__ZN10emscripten8internal10getContextIM10maxiChorusFddjdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($760|0),(8510|0),($761|0),($762|0),($763|0),(2|0),($764|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI13maxiDCBlockerEEvv();
 $765 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI13maxiDCBlockerEEPFvvEv()|0);
 $766 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI13maxiDCBlockerEEPFvvEv()|0);
 $767 = (__ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv()|0);
 $768 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI13maxiDCBlockerEEE3getEv()|0);
 $769 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK13maxiDCBlockerEEE3getEv()|0);
 $770 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $771 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $772 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $773 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $774 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($767|0),($768|0),($769|0),($770|0),($771|0),(55|0),($772|0),($765|0),($773|0),($766|0),(8517|0),($774|0),(175|0));
 $775 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI13maxiDCBlockerEEE3getEv()|0);
 $776 = (__ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv()|0);
 $777 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE18get_sharing_policyEv()|0);
 $778 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $779 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $780 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $781 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($775|0),($776|0),(8531|0),($777|0),($778|0),(56|0),($779|0),(17|0),($780|0),(36|0),($781|0),(176|0));
 $782 = (__ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv()|0);
 $783 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEE8getCountEv($$byval_copy34)|0);
 $784 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEE8getTypesEv($$byval_copy34)|0);
 $785 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($782|0),($783|0),($784|0),($785|0),(57|0),(177|0));
 HEAP32[$$byval_copy34>>2] = (7);
 $$fca$1$gep$i786 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i786>>2] = 0;
 $786 = (__ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv()|0);
 $787 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEE8getCountEv($1)|0);
 $788 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEE8getTypesEv($1)|0);
 $789 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $790 = (__ZN10emscripten8internal10getContextIM13maxiDCBlockerFdddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($786|0),(8103|0),($787|0),($788|0),($789|0),(4|0),($790|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiSVFEEvv();
 $791 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiSVFEEPFvvEv()|0);
 $792 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiSVFEEPFvvEv()|0);
 $793 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $794 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiSVFEEE3getEv()|0);
 $795 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiSVFEEE3getEv()|0);
 $796 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $797 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $798 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $799 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $800 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($793|0),($794|0),($795|0),($796|0),($797|0),(58|0),($798|0),($791|0),($799|0),($792|0),(8557|0),($800|0),(178|0));
 $801 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiSVFEEE3getEv()|0);
 $802 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $803 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE18get_sharing_policyEv()|0);
 $804 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $805 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $806 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $807 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($801|0),($802|0),(8565|0),($803|0),($804|0),(59|0),($805|0),(18|0),($806|0),(37|0),($807|0),(179|0));
 $808 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $809 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiSVFEEEE8getCountEv($$byval_copy34)|0);
 $810 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiSVFEEEE8getTypesEv($$byval_copy34)|0);
 $811 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($808|0),($809|0),($810|0),($811|0),(60|0),(180|0));
 HEAP32[$$byval_copy34>>2] = (1);
 $$fca$1$gep$i792 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i792>>2] = 0;
 $812 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $813 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getCountEv($1)|0);
 $814 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getTypesEv($1)|0);
 $815 = (__ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv()|0);
 $816 = (__ZN10emscripten8internal10getContextIM7maxiSVFFRS2_dEEEPT_RKS6_($$byval_copy34)|0);
 __embind_register_class_function(($812|0),(8585|0),($813|0),($814|0),($815|0),(1|0),($816|0),0);
 HEAP32[$$byval_copy34>>2] = (2);
 $$fca$1$gep$i798 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i798>>2] = 0;
 $817 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $818 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getCountEv($1)|0);
 $819 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getTypesEv($1)|0);
 $820 = (__ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv()|0);
 $821 = (__ZN10emscripten8internal10getContextIM7maxiSVFFRS2_dEEEPT_RKS6_($$byval_copy34)|0);
 __embind_register_class_function(($817|0),(8595|0),($818|0),($819|0),($820|0),(1|0),($821|0),0);
 HEAP32[$$byval_copy34>>2] = (3);
 $$fca$1$gep$i804 = ((($$byval_copy34)) + 4|0);
 HEAP32[$$fca$1$gep$i804>>2] = 0;
 $822 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $823 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEE8getCountEv($1)|0);
 $824 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEE8getTypesEv($1)|0);
 $825 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddddEEEPKcv()|0);
 $826 = (__ZN10emscripten8internal10getContextIM7maxiSVFFddddddEEEPT_RKS5_($$byval_copy34)|0);
 __embind_register_class_function(($822|0),(8103|0),($823|0),($824|0),($825|0),(2|0),($826|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIiEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i28 = 0, $$fca$1$gep$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIiNS3_9allocatorIiEEEEEEvv();
 $3 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv()|0);
 $4 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $9 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($5|0),($6|0),($7|0),($8|0),($9|0),(61|0),($10|0),($3|0),($11|0),($4|0),($0|0),($12|0),(181|0));
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $14 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getCountEv($1)|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getTypesEv($1)|0);
 $16 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($13|0),($14|0),($15|0),($16|0),(62|0),(19|0));
 HEAP32[$1>>2] = (10);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $17 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $18 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getCountEv($2)|0);
 $19 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getTypesEv($2)|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($17|0),(8608|0),($18|0),($19|0),($20|0),(7|0),($21|0),0);
 HEAP32[$1>>2] = (8);
 $$fca$1$gep$i28 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i28>>2] = 0;
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEmRKiEE8getCountEv($2)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEmRKiEE8getTypesEv($2)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $26 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvmRKiEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($22|0),(8618|0),($23|0),($24|0),($25|0),(6|0),($26|0),0);
 HEAP32[$1>>2] = (63);
 $$fca$1$gep$i34 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i34>>2] = 0;
 $27 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getCountEv($2)|0);
 $29 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getTypesEv($2)|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFmvEEEPT_RKS9_($1)|0);
 __embind_register_class_function(($27|0),(8625|0),($28|0),($29|0),($30|0),(38|0),($31|0),0);
 HEAP32[$1>>2] = 9;
 $32 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEmEE8getCountEv($2)|0);
 $34 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEmEE8getTypesEv($2)|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEmEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($32|0),(8630|0),($33|0),($34|0),($35|0),(7|0),($36|0),0);
 HEAP32[$1>>2] = 8;
 $37 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEmRKiEE8getCountEv($2)|0);
 $39 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEmRKiEE8getTypesEv($2)|0);
 $40 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $41 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEmRKiEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($37|0),(8634|0),($38|0),($39|0),($40|0),(1|0),($41|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIdEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i28 = 0, $$fca$1$gep$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIdNS3_9allocatorIdEEEEEEvv();
 $3 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIdNS3_9allocatorIdEEEEEEPFvvEv()|0);
 $4 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIdNS3_9allocatorIdEEEEEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIdNS3_9allocatorIdEEEEEEE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIdNS3_9allocatorIdEEEEEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $9 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($5|0),($6|0),($7|0),($8|0),($9|0),(64|0),($10|0),($3|0),($11|0),($4|0),($0|0),($12|0),(182|0));
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $14 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIdNS5_9allocatorIdEEEEEE8getCountEv($1)|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIdNS5_9allocatorIdEEEEEE8getTypesEv($1)|0);
 $16 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($13|0),($14|0),($15|0),($16|0),(65|0),(20|0));
 HEAP32[$1>>2] = (11);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $17 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $18 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEERKdEE8getCountEv($2)|0);
 $19 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEERKdEE8getTypesEv($2)|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvRKdEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($17|0),(8608|0),($18|0),($19|0),($20|0),(9|0),($21|0),0);
 HEAP32[$1>>2] = (10);
 $$fca$1$gep$i28 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i28>>2] = 0;
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEEmRKdEE8getCountEv($2)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEEmRKdEE8getTypesEv($2)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJviiidEEEPKcv()|0);
 $26 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvmRKdEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($22|0),(8618|0),($23|0),($24|0),($25|0),(2|0),($26|0),0);
 HEAP32[$1>>2] = (66);
 $$fca$1$gep$i34 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i34>>2] = 0;
 $27 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS5_9allocatorIdEEEEEEEE8getCountEv($2)|0);
 $29 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS5_9allocatorIdEEEEEEEE8getTypesEv($2)|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEKFmvEEEPT_RKS9_($1)|0);
 __embind_register_class_function(($27|0),(8625|0),($28|0),($29|0),($30|0),(39|0),($31|0),0);
 HEAP32[$1>>2] = 11;
 $32 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIdNS5_9allocatorIdEEEEmEE8getCountEv($2)|0);
 $34 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIdNS5_9allocatorIdEEEEmEE8getTypesEv($2)|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIdNS3_9allocatorIdEEEEmEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($32|0),(8630|0),($33|0),($34|0),($35|0),(9|0),($36|0),0);
 HEAP32[$1>>2] = 10;
 $37 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIdNS4_9allocatorIdEEEEmRKdEE8getCountEv($2)|0);
 $39 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIdNS4_9allocatorIdEEEEmRKdEE8getTypesEv($2)|0);
 $40 = (__ZN10emscripten8internal19getGenericSignatureIJiiiidEEEPKcv()|0);
 $41 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIdNS2_9allocatorIdEEEEmRKdEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($37|0),(8634|0),($38|0),($39|0),($40|0),(1|0),($41|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIcEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i28 = 0, $$fca$1$gep$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIcNS3_9allocatorIcEEEEEEvv();
 $3 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIcNS3_9allocatorIcEEEEEEPFvvEv()|0);
 $4 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIcNS3_9allocatorIcEEEEEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIcNS3_9allocatorIcEEEEEEE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIcNS3_9allocatorIcEEEEEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $9 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($5|0),($6|0),($7|0),($8|0),($9|0),(67|0),($10|0),($3|0),($11|0),($4|0),($0|0),($12|0),(183|0));
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $14 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIcNS5_9allocatorIcEEEEEE8getCountEv($1)|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIcNS5_9allocatorIcEEEEEE8getTypesEv($1)|0);
 $16 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($13|0),($14|0),($15|0),($16|0),(68|0),(21|0));
 HEAP32[$1>>2] = (12);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $17 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $18 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEERKcEE8getCountEv($2)|0);
 $19 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEERKcEE8getTypesEv($2)|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvRKcEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($17|0),(8608|0),($18|0),($19|0),($20|0),(12|0),($21|0),0);
 HEAP32[$1>>2] = (13);
 $$fca$1$gep$i28 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i28>>2] = 0;
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEEmRKcEE8getCountEv($2)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEEmRKcEE8getTypesEv($2)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $26 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvmRKcEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($22|0),(8618|0),($23|0),($24|0),($25|0),(7|0),($26|0),0);
 HEAP32[$1>>2] = (69);
 $$fca$1$gep$i34 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i34>>2] = 0;
 $27 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS5_9allocatorIcEEEEEEEE8getCountEv($2)|0);
 $29 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS5_9allocatorIcEEEEEEEE8getTypesEv($2)|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEKFmvEEEPT_RKS9_($1)|0);
 __embind_register_class_function(($27|0),(8625|0),($28|0),($29|0),($30|0),(40|0),($31|0),0);
 HEAP32[$1>>2] = 14;
 $32 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIcNS5_9allocatorIcEEEEmEE8getCountEv($2)|0);
 $34 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIcNS5_9allocatorIcEEEEmEE8getTypesEv($2)|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIcNS3_9allocatorIcEEEEmEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($32|0),(8630|0),($33|0),($34|0),($35|0),(11|0),($36|0),0);
 HEAP32[$1>>2] = 12;
 $37 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIcNS4_9allocatorIcEEEEmRKcEE8getCountEv($2)|0);
 $39 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIcNS4_9allocatorIcEEEEmRKcEE8getTypesEv($2)|0);
 $40 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $41 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIcNS2_9allocatorIcEEEEmRKcEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($37|0),(8634|0),($38|0),($39|0),($40|0),(2|0),($41|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIfEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i28 = 0, $$fca$1$gep$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIfNS3_9allocatorIfEEEEEEvv();
 $3 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIfNS3_9allocatorIfEEEEEEPFvvEv()|0);
 $4 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIfNS3_9allocatorIfEEEEEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIfNS3_9allocatorIfEEEEEEE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIfNS3_9allocatorIfEEEEEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $9 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($5|0),($6|0),($7|0),($8|0),($9|0),(70|0),($10|0),($3|0),($11|0),($4|0),($0|0),($12|0),(184|0));
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $14 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIfNS5_9allocatorIfEEEEEE8getCountEv($1)|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIfNS5_9allocatorIfEEEEEE8getTypesEv($1)|0);
 $16 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($13|0),($14|0),($15|0),($16|0),(71|0),(22|0));
 HEAP32[$1>>2] = (13);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $17 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $18 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEERKfEE8getCountEv($2)|0);
 $19 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEERKfEE8getTypesEv($2)|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvRKfEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($17|0),(8608|0),($18|0),($19|0),($20|0),(10|0),($21|0),0);
 HEAP32[$1>>2] = (15);
 $$fca$1$gep$i28 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i28>>2] = 0;
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEEmRKfEE8getCountEv($2)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEEmRKfEE8getTypesEv($2)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJviiifEEEPKcv()|0);
 $26 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvmRKfEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($22|0),(8618|0),($23|0),($24|0),($25|0),(3|0),($26|0),0);
 HEAP32[$1>>2] = (72);
 $$fca$1$gep$i34 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i34>>2] = 0;
 $27 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS5_9allocatorIfEEEEEEEE8getCountEv($2)|0);
 $29 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS5_9allocatorIfEEEEEEEE8getTypesEv($2)|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEKFmvEEEPT_RKS9_($1)|0);
 __embind_register_class_function(($27|0),(8625|0),($28|0),($29|0),($30|0),(41|0),($31|0),0);
 HEAP32[$1>>2] = 16;
 $32 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIfNS5_9allocatorIfEEEEmEE8getCountEv($2)|0);
 $34 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIfNS5_9allocatorIfEEEEmEE8getTypesEv($2)|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIfNS3_9allocatorIfEEEEmEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($32|0),(8630|0),($33|0),($34|0),($35|0),(13|0),($36|0),0);
 HEAP32[$1>>2] = 14;
 $37 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIfNS4_9allocatorIfEEEEmRKfEE8getCountEv($2)|0);
 $39 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIfNS4_9allocatorIfEEEEmRKfEE8getTypesEv($2)|0);
 $40 = (__ZN10emscripten8internal19getGenericSignatureIJiiiifEEEPKcv()|0);
 $41 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIfNS2_9allocatorIfEEEEmRKfEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($37|0),(8634|0),($38|0),($39|0),($40|0),(2|0),($41|0),0);
 STACKTOP = sp;return;
}
function __ZN11vectorTools14clearVectorDblERNSt3__26vectorIdNS0_9allocatorIdEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN11vectorTools16clearVectorFloatERNSt3__26vectorIfNS0_9allocatorIfEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN12maxiSettings5setupEiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[__ZN12maxiSettings10sampleRateE>>2] = $0;
 HEAP32[__ZN12maxiSettings8channelsE>>2] = $1;
 HEAP32[__ZN12maxiSettings10bufferSizeE>>2] = $2;
 return;
}
function __ZNK12maxiSettings13getSampleRateEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[__ZN12maxiSettings10sampleRateE>>2]|0;
 return ($1|0);
}
function __ZN12maxiSettings13setSampleRateEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[__ZN12maxiSettings10sampleRateE>>2] = $1;
 return;
}
function __ZNK12maxiSettings14getNumChannelsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[__ZN12maxiSettings8channelsE>>2]|0;
 return ($1|0);
}
function __ZN12maxiSettings14setNumChannelsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[__ZN12maxiSettings8channelsE>>2] = $1;
 return;
}
function __ZNK12maxiSettings13getBufferSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[__ZN12maxiSettings10bufferSizeE>>2]|0;
 return ($1|0);
}
function __ZN12maxiSettings13setBufferSizeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[__ZN12maxiSettings10bufferSizeE>>2] = $1;
 return;
}
function __ZN10emscripten15select_overloadIFddE7maxiOscEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10emscripten15select_overloadIFddddE7maxiOscEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK12maxiEnvelope12getAmplitudeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN12maxiEnvelope12setAmplitudeEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZNK12maxiEnvelope11getValindexEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN12maxiEnvelope11setValindexEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN10emscripten15select_overloadIFddidE13maxiDelaylineEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10emscripten15select_overloadIFddidiE13maxiDelaylineEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10maxiFilter9getCutoffEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 224|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10maxiFilter9setCutoffEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 224|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZNK10maxiFilter12getResonanceEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 232|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10maxiFilter12setResonanceEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 232|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN10maxiLagExpIdE4initEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$0>>3] = $1;
 $3 = 1.0 - $1;
 $4 = ((($0)) + 8|0);
 HEAPF64[$4>>3] = $3;
 $5 = ((($0)) + 16|0);
 HEAPF64[$5>>3] = $2;
 return;
}
function __ZN10maxiLagExpIdE9addSampleEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 * $1;
 $4 = ((($0)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = ((($0)) + 16|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $5 * $7;
 $9 = $3 + $8;
 HEAPF64[$6>>3] = $9;
 return;
}
function __ZNK10maxiLagExpIdE5valueEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZNK10maxiLagExpIdE8getAlphaEv($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function __ZN10maxiLagExpIdE8setAlphaEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$0>>3] = $1;
 return;
}
function __ZNK10maxiLagExpIdE18getAlphaReciprocalEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10maxiLagExpIdE18setAlphaReciprocalEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN10maxiLagExpIdE6setValEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN10emscripten15select_overloadIFvRNSt3__26vectorIdNS1_9allocatorIdEEEEE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10emscripten15select_overloadIFvRNSt3__26vectorIdNS1_9allocatorIdEEEEiE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10emscripten15select_overloadIFdvE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10emscripten15select_overloadIFddE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10emscripten15select_overloadIFddddE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10maxiSample5clearEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 128|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 132|0);
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN7maxiMap6linlinEddddd($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$sroa$speculated = 0.0, $$sroa$speculated7 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2 < $0;
 $$sroa$speculated7 = $5 ? $2 : $0;
 $6 = $$sroa$speculated7 < $1;
 $$sroa$speculated = $6 ? $1 : $$sroa$speculated7;
 $7 = $$sroa$speculated - $1;
 $8 = $2 - $1;
 $9 = $7 / $8;
 $10 = $4 - $3;
 $11 = $10 * $9;
 $12 = $11 + $3;
 return (+$12);
}
function __ZN7maxiMap6linexpEddddd($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$sroa$speculated = 0.0, $$sroa$speculated7 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2 < $0;
 $$sroa$speculated7 = $5 ? $2 : $0;
 $6 = $$sroa$speculated7 < $1;
 $$sroa$speculated = $6 ? $1 : $$sroa$speculated7;
 $7 = $4 / $3;
 $8 = $$sroa$speculated - $1;
 $9 = $2 - $1;
 $10 = $8 / $9;
 $11 = (+Math_pow((+$7),(+$10)));
 $12 = $11 * $3;
 return (+$12);
}
function __ZN7maxiMap6explinEddddd($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$sroa$speculated = 0.0, $$sroa$speculated7 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2 < $0;
 $$sroa$speculated7 = $5 ? $2 : $0;
 $6 = $$sroa$speculated7 < $1;
 $$sroa$speculated = $6 ? $1 : $$sroa$speculated7;
 $7 = $$sroa$speculated / $1;
 $8 = (+Math_log((+$7)));
 $9 = $2 / $1;
 $10 = (+Math_log((+$9)));
 $11 = $8 / $10;
 $12 = $4 - $3;
 $13 = $12 * $11;
 $14 = $13 + $3;
 return (+$14);
}
function __ZN7maxiMap5clampIdEET_S1_S1_S1_($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$0 = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 > $2;
 if ($3) {
  $$0 = $2;
 } else {
  $4 = $0 < $1;
  if ($4) {
   $$0 = $1;
  } else {
   $$0 = $0;
  }
 }
 return (+$$0);
}
function __ZN10emscripten15select_overloadIFddddddliE7maxiEnvEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10emscripten15select_overloadIFddiE7maxiEnvEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK7maxiEnv10getTriggerEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN7maxiEnv10setTriggerEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN14maxiDistortion8fastatanEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 * $1;
 $3 = $2 * 0.28000000000000003;
 $4 = $3 + 1.0;
 $5 = $1 / $4;
 return (+$5);
}
function __ZN14maxiDistortion8atanDistEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_atan((+$2)));
 $4 = 1.0 / $3;
 $5 = $1 * $2;
 $6 = (+Math_atan((+$5)));
 $7 = $4 * $6;
 return (+$7);
}
function __ZN14maxiDistortion12fastAtanDistEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+__ZN14maxiDistortion8fastatanEd($0,$2));
 $4 = 1.0 / $3;
 $5 = $1 * $2;
 $6 = (+__ZN14maxiDistortion8fastatanEd($0,$5));
 $7 = $4 * $6;
 return (+$7);
}
function __ZN11maxiFlanger6flangeEdjddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 705640|0);
 $7 = (+__ZN7maxiOsc8triangleEd(($6|0),(+$4)));
 $8 = (+($2>>>0));
 $9 = $7 * $5;
 $10 = $9 * $8;
 $11 = $10 + $8;
 $12 = $11 + 1.0;
 $13 = (~~(($12)));
 $14 = (+__ZN13maxiDelayline2dlEdid(($0|0),(+$1),($13|0),(+$3)));
 $15 = (+Math_abs((+$14)));
 $16 = 1.0 - $15;
 $17 = $14 * $16;
 $18 = $17 + $1;
 $19 = $18 * 0.5;
 return (+$19);
}
function __ZN10maxiChorus6chorusEdjddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 1411280|0);
 $7 = (+__ZN7maxiOsc5noiseEv(($6|0)));
 $8 = ((($0)) + 1411328|0);
 $9 = (+__ZN10maxiFilter5loresEddd(($8|0),(+$7),(+$4),1.0));
 $10 = $9 * 2.0;
 $11 = (+($2>>>0));
 $12 = $10 * $5;
 $13 = $12 * $11;
 $14 = $13 + $11;
 $15 = $14 + 1.0;
 $16 = (~~(($15)));
 $17 = (+__ZN13maxiDelayline2dlEdid(($0|0),(+$1),($16|0),(+$3)));
 $18 = ((($0)) + 705640|0);
 $19 = $13 * 1.02;
 $20 = $19 + $11;
 $21 = $20 + 1.0;
 $22 = $21 * 0.97999999999999998;
 $23 = (~~(($22)));
 $24 = $3 * 0.98999999999999999;
 $25 = (+__ZN13maxiDelayline2dlEdid(($18|0),(+$1),($23|0),(+$24)));
 $26 = (+Math_abs((+$17)));
 $27 = 1.0 - $26;
 $28 = $17 * $27;
 $29 = (+Math_abs((+$25)));
 $30 = 1.0 - $29;
 $31 = $25 * $30;
 $32 = $28 + $31;
 $33 = $32 + $1;
 $34 = $33 / 3.0;
 return (+$34);
}
function __ZN13maxiDCBlocker4playEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = +HEAPF64[$0>>3];
 $4 = $1 - $3;
 $5 = ((($0)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 * $2;
 $8 = $4 + $7;
 HEAPF64[$5>>3] = $8;
 HEAPF64[$0>>3] = $1;
 return (+$8);
}
function __ZN7maxiSVF9setCutoffEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 96|0);
 $3 = +HEAPF64[$2>>3];
 __ZN7maxiSVF9setParamsEdd($0,$1,$3);
 return ($0|0);
}
function __ZN7maxiSVF12setResonanceEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 88|0);
 $3 = +HEAPF64[$2>>3];
 __ZN7maxiSVF9setParamsEdd($0,$3,$1);
 return ($0|0);
}
function __ZN7maxiSVF4playEddddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($0)) + 16|0);
 $9 = +HEAPF64[$8>>3];
 $10 = +HEAPF64[$0>>3];
 $11 = $10 + $1;
 $12 = $9 * 2.0;
 $13 = $11 - $12;
 $14 = ((($0)) + 56|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $15 * $13;
 $17 = ((($0)) + 64|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $7 * $18;
 $20 = $16 - $19;
 $21 = $7 + $20;
 HEAPF64[$6>>3] = $21;
 $22 = ((($0)) + 72|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $13 * $23;
 $25 = ((($0)) + 80|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $7 * $26;
 $28 = $24 + $27;
 $29 = $9 + $28;
 HEAPF64[$8>>3] = $29;
 HEAPF64[$0>>3] = $1;
 $30 = ((($0)) + 40|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $21 * $31;
 $33 = $1 - $32;
 $34 = $33 - $29;
 $35 = $29 * $2;
 $36 = $21 * $3;
 $37 = $36 + $35;
 $38 = $34 * $4;
 $39 = $37 + $38;
 $40 = $33 * $5;
 $41 = $40 + $39;
 return (+$41);
}
function __ZNKSt3__26vectorIdNS_9allocatorIdEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 3;
 return ($5|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZN7maxiSVF9setParamsEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 88|0);
 HEAPF64[$3>>3] = $1;
 $4 = ((($0)) + 96|0);
 HEAPF64[$4>>3] = $2;
 $5 = $1 * 3.1415926535897931;
 $6 = HEAP32[__ZN12maxiSettings10sampleRateE>>2]|0;
 $7 = (+($6|0));
 $8 = $5 / $7;
 $9 = (+Math_tan((+$8)));
 $10 = ((($0)) + 24|0);
 HEAPF64[$10>>3] = $9;
 $11 = $2 == 0.0;
 $12 = 1.0 / $2;
 $13 = $11 ? 0.0 : $12;
 $14 = ((($0)) + 32|0);
 HEAPF64[$14>>3] = $13;
 $15 = ((($0)) + 40|0);
 HEAPF64[$15>>3] = $13;
 $16 = $13 + $9;
 $17 = $9 * $16;
 $18 = $17 + 1.0;
 $19 = $9 / $18;
 $20 = ((($0)) + 48|0);
 HEAPF64[$20>>3] = $19;
 $21 = ((($0)) + 56|0);
 HEAPF64[$21>>3] = $19;
 $22 = $16 * 2.0;
 $23 = $22 * $19;
 $24 = ((($0)) + 64|0);
 HEAPF64[$24>>3] = $23;
 $25 = $9 * $19;
 $26 = ((($0)) + 72|0);
 HEAPF64[$26>>3] = $25;
 $27 = $19 * 2.0;
 $28 = ((($0)) + 80|0);
 HEAPF64[$28>>3] = $27;
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE9push_backERKi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($0,$1);
  return;
 } else {
  $7 = HEAP32[$1>>2]|0;
  HEAP32[$3>>2] = $7;
  $8 = ((($3)) + 4|0);
  HEAP32[$2>>2] = $8;
  return;
 }
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE6resizeEmRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $9 = (($1) - ($7))|0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE8__appendEmRKi($0,$9,$2);
  return;
 }
 $10 = ($7>>>0)>($1>>>0);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($1<<2)|0);
 HEAP32[$3>>2] = $12;
 return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3getERKS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($2>>>0);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($2<<2)|0);
  __ZN10emscripten3valC2IRKiEEOT_($0,$10);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3setERS6_mRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 HEAP32[$5>>2] = $3;
 return 1;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 8|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 2;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 1;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $spec$select$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 2;
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($2,$spec$select$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$25>>2] = $26;
  $27 = ((($25)) + 4|0);
  HEAP32[$24>>2] = $27;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($8,8638);
    HEAP32[$8>>2] = (7324);
    ___cxa_throw(($8|0),(5216|0),(120|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwm($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 return;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE8__appendEmRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$promoted$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)<($1>>>0);
 if ($10) {
  $16 = HEAP32[$0>>2]|0;
  $17 = (($7) - ($16))|0;
  $18 = $17 >> 2;
  $19 = (($18) + ($1))|0;
  $20 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0)|0);
  $21 = ($20>>>0)<($19>>>0);
  if ($21) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $22 = ((($0)) + 8|0);
  $23 = ((($0)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 2;
  $28 = $20 >>> 1;
  $29 = ($27>>>0)<($28>>>0);
  $30 = $26 >> 1;
  $31 = ($30>>>0)<($19>>>0);
  $$sroa$speculated$i = $31 ? $19 : $30;
  $spec$select$i = $29 ? $$sroa$speculated$i : $20;
  $32 = HEAP32[$6>>2]|0;
  $33 = (($32) - ($25))|0;
  $34 = $33 >> 2;
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($3,$spec$select$i,$34,$22);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEmRKi($3,$1,$2);
  __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($0,$3);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($3);
  STACKTOP = sp;return;
 } else {
  $$promoted$i = HEAP32[$6>>2]|0;
  $$0$i = $1;$12 = $$promoted$i;
  while(1) {
   $11 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $11;
   $13 = ((($12)) + 4|0);
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;$12 = $13;
   }
  }
  $scevgep$i = (($$promoted$i) + ($1<<2)|0);
  HEAP32[$6>>2] = $scevgep$i;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEmRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$promoted = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$promoted = HEAP32[$3>>2]|0;
 $$0 = $1;$5 = $$promoted;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $4;
  $6 = ((($5)) + 4|0);
  $7 = (($$0) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;$5 = $6;
  }
 }
 $scevgep = (($$promoted) + ($1<<2)|0);
 HEAP32[$3>>2] = $scevgep;
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIiNS3_9allocatorIiEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIiNS2_9allocatorIiEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3264|0);
}
function __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3264|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3288|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3304|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8898|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8901|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8903|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIiNS2_9allocatorIiEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIiNS2_9allocatorIiEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5408|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEvPS6_JS8_EE6invokeERKSA_SB_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $5 = $$unpack3 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack3 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 HEAP32[$3>>2] = $13;
 FUNCTION_TABLE_vii[$14 & 15]($6,$3);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEERKiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEERKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5412|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8906|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvmRKiEvPS6_JmS8_EE6invokeERKSA_SB_mi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 HEAP32[$4>>2] = $15;
 FUNCTION_TABLE_viii[$16 & 31]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEmRKiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEmRKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEmRKiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvmRKiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEmRKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (16|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8911|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFmvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5424|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8917|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEmES2_S9_JmEE6invokeEPSB_PS7_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 FUNCTION_TABLE_viii[$4 & 31]($3,$5,$6);
 $7 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIiNS4_9allocatorIiEEEEmEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEmEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __emval_incref(($1|0));
 $2 = HEAP32[$0>>2]|0;
 return ($2|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __emval_decref(($1|0));
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIiNS4_9allocatorIiEEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5432|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8940|0);
}
function __ZN10emscripten3valC2IRKiEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKiE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten3val9undefinedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(1));
 return;
}
function __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKiE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5344|0);
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEmRKiEbS7_JmS9_EE6invokeEPSB_PS6_mi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 HEAP32[$4>>2] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 15]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEmRKiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEmRKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIiNS3_9allocatorIiEEEEmRKiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEmRKiEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIiNS3_9allocatorIiEEEEmRKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8945|0);
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE9push_backERKd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($0,$1);
  return;
 } else {
  $7 = +HEAPF64[$1>>3];
  HEAPF64[$3>>3] = $7;
  $8 = ((($3)) + 8|0);
  HEAP32[$2>>2] = $8;
  return;
 }
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE6resizeEmRKd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $9 = (($1) - ($7))|0;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE8__appendEmRKd($0,$9,$2);
  return;
 }
 $10 = ($7>>>0)>($1>>>0);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($1<<3)|0);
 HEAP32[$3>>2] = $12;
 return;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIdNS2_9allocatorIdEEEEE3getERKS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = ($7>>>0)>($2>>>0);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($2<<3)|0);
  __ZN10emscripten3valC2IRKdEEOT_($0,$10);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIdNS2_9allocatorIdEEEEE3setERS6_mRKd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = +HEAPF64[$2>>3];
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1<<3)|0);
 HEAPF64[$5>>3] = $3;
 return 1;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 8|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 3;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 2;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $spec$select$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 3;
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($2,$spec$select$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = +HEAPF64[$1>>3];
  HEAPF64[$25>>3] = $26;
  $27 = ((($25)) + 8|0);
  HEAP32[$24>>2] = $27;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(536870911);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($8,8638);
    HEAP32[$8>>2] = (7324);
    ___cxa_throw(($8|0),(5216|0),(120|0));
    // unreachable;
   } else {
    $9 = $1 << 3;
    $10 = (__Znwm($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<3)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<3)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 3;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<3)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 return;
}
function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -8|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 3;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<3)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 536870911;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE8__appendEmRKd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$promoted$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 3;
 $10 = ($9>>>0)<($1>>>0);
 if ($10) {
  $16 = HEAP32[$0>>2]|0;
  $17 = (($7) - ($16))|0;
  $18 = $17 >> 3;
  $19 = (($18) + ($1))|0;
  $20 = (__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0)|0);
  $21 = ($20>>>0)<($19>>>0);
  if ($21) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $22 = ((($0)) + 8|0);
  $23 = ((($0)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 3;
  $28 = $20 >>> 1;
  $29 = ($27>>>0)<($28>>>0);
  $30 = $26 >> 2;
  $31 = ($30>>>0)<($19>>>0);
  $$sroa$speculated$i = $31 ? $19 : $30;
  $spec$select$i = $29 ? $$sroa$speculated$i : $20;
  $32 = HEAP32[$6>>2]|0;
  $33 = (($32) - ($25))|0;
  $34 = $33 >> 3;
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($3,$spec$select$i,$34,$22);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEmRKd($3,$1,$2);
  __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($0,$3);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($3);
  STACKTOP = sp;return;
 } else {
  $$promoted$i = HEAP32[$6>>2]|0;
  $$0$i = $1;$12 = $$promoted$i;
  while(1) {
   $11 = +HEAPF64[$2>>3];
   HEAPF64[$12>>3] = $11;
   $13 = ((($12)) + 8|0);
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;$12 = $13;
   }
  }
  $scevgep$i = (($$promoted$i) + ($1<<3)|0);
  HEAP32[$6>>2] = $scevgep$i;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEmRKd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$promoted = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$promoted = HEAP32[$3>>2]|0;
 $$0 = $1;$5 = $$promoted;
 while(1) {
  $4 = +HEAPF64[$2>>3];
  HEAPF64[$5>>3] = $4;
  $6 = ((($5)) + 8|0);
  $7 = (($$0) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;$5 = $6;
  }
 }
 $scevgep = (($$promoted) + ($1<<3)|0);
 HEAP32[$3>>2] = $scevgep;
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIdNS3_9allocatorIdEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIdNS2_9allocatorIdEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIdNS3_9allocatorIdEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIdNS3_9allocatorIdEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIdNS2_9allocatorIdEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIdNS3_9allocatorIdEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIdNS3_9allocatorIdEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3352|0);
}
function __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3352|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3376|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3392|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIdNS2_9allocatorIdEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIdNS2_9allocatorIdEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIdNS5_9allocatorIdEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIdNS5_9allocatorIdEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5444|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvRKdEvPS6_JS8_EE6invokeERKSA_SB_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 HEAPF64[$3>>3] = $13;
 FUNCTION_TABLE_vii[$14 & 15]($6,$3);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEERKdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEERKdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEERKdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvRKdEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($0) {
 $0 = +$0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (+$0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEERKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5448|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9106|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvmRKdEvPS6_JmS8_EE6invokeERKSA_SB_md($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 HEAPF64[$4>>3] = $15;
 FUNCTION_TABLE_viii[$16 & 31]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEEmRKdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEEmRKdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEEmRKdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvmRKdEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEEmRKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (48|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9111|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS5_9allocatorIdEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS5_9allocatorIdEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEKFmvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5460|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIdNS3_9allocatorIdEEEEmES2_S9_JmEE6invokeEPSB_PS7_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 FUNCTION_TABLE_viii[$4 & 31]($3,$5,$6);
 $7 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIdNS5_9allocatorIdEEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIdNS5_9allocatorIdEEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIdNS4_9allocatorIdEEEEmEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIdNS3_9allocatorIdEEEEmEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIdNS4_9allocatorIdEEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5468|0);
}
function __ZN10emscripten3valC2IRKdEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKdE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($1));
 __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKdE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAPF64[$2>>3] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5384|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIdNS2_9allocatorIdEEEEmRKdEbS7_JmS9_EE6invokeEPSB_PS6_md($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 HEAPF64[$4>>3] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 15]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIdNS4_9allocatorIdEEEEmRKdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIdNS4_9allocatorIdEEEEmRKdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIdNS3_9allocatorIdEEEEmRKdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIdNS2_9allocatorIdEEEEmRKdEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIdNS3_9allocatorIdEEEEmRKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (64|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9117|0);
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE9push_backERKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_($0,$1);
  return;
 } else {
  $7 = HEAP8[$1>>0]|0;
  HEAP8[$3>>0] = $7;
  $8 = HEAP32[$2>>2]|0;
  $9 = ((($8)) + 1|0);
  HEAP32[$2>>2] = $9;
  return;
 }
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE6resizeEmRKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)<($1>>>0);
 if ($7) {
  $8 = (($1) - ($6))|0;
  __ZNSt3__26vectorIcNS_9allocatorIcEEE8__appendEmRKc($0,$8,$2);
  return;
 }
 $9 = ($6>>>0)>($1>>>0);
 if (!($9)) {
  return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + ($1)|0);
 HEAP32[$3>>2] = $11;
 return;
}
function __ZNKSt3__26vectorIcNS_9allocatorIcEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIcNS2_9allocatorIcEEEEE3getERKS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($2>>>0);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + ($2)|0);
  __ZN10emscripten3valC2IRKcEEOT_($0,$9);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIcNS2_9allocatorIcEEEEE3setERS6_mRKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$2>>0]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1)|0);
 HEAP8[$5>>0] = $3;
 return 1;
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6) + 1)|0;
 $8 = (__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($0)|0);
 $9 = ($8>>>0)<($7>>>0);
 if ($9) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $10 = ((($0)) + 8|0);
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = $8 >>> 1;
  $16 = ($14>>>0)<($15>>>0);
  $17 = $14 << 1;
  $18 = ($17>>>0)<($7>>>0);
  $$sroa$speculated$i = $18 ? $7 : $17;
  $spec$select$i = $16 ? $$sroa$speculated$i : $8;
  $19 = HEAP32[$3>>2]|0;
  $20 = (($19) - ($13))|0;
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($2,$spec$select$i,$20,$10);
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP8[$1>>0]|0;
  HEAP8[$22>>0] = $23;
  $24 = HEAP32[$21>>2]|0;
  $25 = ((($24)) + 1|0);
  HEAP32[$21>>2] = $25;
  __ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__Znwm($1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9)|0);
 HEAP32[$5>>2] = $10;
 $11 = ($7|0)>(0);
 if ($11) {
  _memcpy(($10|0),($2|0),($7|0))|0;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 return;
}
function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -1|0);
   $8 = ($6|0)==($2|0);
   if ($8) {
    break;
   } else {
    $7 = $6;
   }
  }
  HEAP32[$3>>2] = $6;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __ZdlPv($9);
 return;
}
function __ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE8__appendEmRKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = ($8>>>0)<($1>>>0);
 if (!($9)) {
  $$0$i = $1;
  while(1) {
   $10 = HEAP32[$6>>2]|0;
   $11 = HEAP8[$2>>0]|0;
   HEAP8[$10>>0] = $11;
   $12 = HEAP32[$6>>2]|0;
   $13 = ((($12)) + 1|0);
   HEAP32[$6>>2] = $13;
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;
   }
  }
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = (($7) - ($16))|0;
 $18 = (($17) + ($1))|0;
 $19 = (__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($0)|0);
 $20 = ($19>>>0)<($18>>>0);
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $21 = ((($0)) + 8|0);
 $22 = ((($0)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $19 >>> 1;
 $27 = ($25>>>0)<($26>>>0);
 $28 = $25 << 1;
 $29 = ($28>>>0)<($18>>>0);
 $$sroa$speculated$i = $29 ? $18 : $28;
 $spec$select$i = $27 ? $$sroa$speculated$i : $19;
 $30 = HEAP32[$6>>2]|0;
 $31 = (($30) - ($24))|0;
 __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($3,$spec$select$i,$31,$21);
 __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEE18__construct_at_endEmRKc($3,$1,$2);
 __ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($0,$3);
 __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEE18__construct_at_endEmRKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$0 = $1;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP8[$2>>0]|0;
  HEAP8[$4>>0] = $5;
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[$3>>2] = $7;
  $8 = (($$0) + -1)|0;
  $9 = ($8|0)==(0);
  if ($9) {
   break;
  } else {
   $$0 = $8;
  }
 }
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIcNS3_9allocatorIcEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIcNS2_9allocatorIcEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIcNS3_9allocatorIcEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIcNS3_9allocatorIcEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIcNS2_9allocatorIcEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIcNS3_9allocatorIcEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIcNS3_9allocatorIcEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3432|0);
}
function __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3432|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3456|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3472|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIcNS2_9allocatorIcEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIcNS2_9allocatorIcEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIcNS5_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIcNS5_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5480|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvRKcEvPS6_JS8_EE6invokeERKSA_SB_c($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $5 = $$unpack3 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack3 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIcE12fromWireTypeEc($2)|0);
 HEAP8[$3>>0] = $13;
 FUNCTION_TABLE_vii[$14 & 15]($6,$3);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEERKcEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEERKcEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEERKcEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvRKcEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIcE12fromWireTypeEc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEERKcEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5484|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvmRKcEvPS6_JmS8_EE6invokeERKSA_SB_mc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIcE12fromWireTypeEc($3)|0);
 HEAP8[$4>>0] = $15;
 FUNCTION_TABLE_viii[$16 & 31]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEEmRKcEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEEmRKcEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEEmRKcEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvmRKcEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEEmRKcEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (80|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS5_9allocatorIcEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS5_9allocatorIcEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS4_9allocatorIcEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEKFmvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS4_9allocatorIcEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5496|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIcNS3_9allocatorIcEEEEmES2_S9_JmEE6invokeEPSB_PS7_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 FUNCTION_TABLE_viii[$4 & 31]($3,$5,$6);
 $7 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIcNS5_9allocatorIcEEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIcNS5_9allocatorIcEEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIcNS4_9allocatorIcEEEEmEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIcNS3_9allocatorIcEEEEmEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIcNS4_9allocatorIcEEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5504|0);
}
function __ZN10emscripten3valC2IRKcEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKcEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKcE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKcEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKcEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (__ZN10emscripten8internal11BindingTypeIcE10toWireTypeERKc($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIcEEvRPNS0_15GenericWireTypeET_($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKcE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKcEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIcEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 8|0);
 HEAP32[$0>>2] = $5;
 return;
}
function __ZN10emscripten8internal11BindingTypeIcE10toWireTypeERKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5304|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIcNS2_9allocatorIcEEEEmRKcEbS7_JmS9_EE6invokeEPSB_PS6_mc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $8 = (__ZN10emscripten8internal11BindingTypeIcE12fromWireTypeEc($3)|0);
 HEAP8[$4>>0] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 15]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIcNS4_9allocatorIcEEEEmRKcEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIcNS4_9allocatorIcEEEEmRKcEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIcNS3_9allocatorIcEEEEmRKcEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIcNS2_9allocatorIcEEEEmRKcEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIcNS3_9allocatorIcEEEEmRKcEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (96|0);
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE9push_backERKf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_($0,$1);
  return;
 } else {
  $7 = HEAP32[$1>>2]|0;
  HEAP32[$3>>2] = $7;
  $8 = ((($3)) + 4|0);
  HEAP32[$2>>2] = $8;
  return;
 }
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE6resizeEmRKf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $9 = (($1) - ($7))|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE8__appendEmRKf($0,$9,$2);
  return;
 }
 $10 = ($7>>>0)>($1>>>0);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($1<<2)|0);
 HEAP32[$3>>2] = $12;
 return;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIfNS2_9allocatorIfEEEEE3getERKS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($2>>>0);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($2<<2)|0);
  __ZN10emscripten3valC2IRKfEEOT_($0,$10);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIfNS2_9allocatorIfEEEEE3setERS6_mRKf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 HEAP32[$5>>2] = $3;
 return 1;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = ((($0)) + 8|0);
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 2;
  $17 = $9 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 1;
  $20 = ($19>>>0)<($8>>>0);
  $$sroa$speculated$i = $20 ? $8 : $19;
  $spec$select$i = $18 ? $$sroa$speculated$i : $9;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 2;
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EmmS3_($2,$spec$select$i,$23,$11);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$25>>2] = $26;
  $27 = ((($25)) + 4|0);
  HEAP32[$24>>2] = $27;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE26__swap_out_circular_bufferERNS_14__split_bufferIfRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($8,8638);
    HEAP32[$8>>2] = (7324);
    ___cxa_throw(($8|0),(5216|0),(120|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwm($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE26__swap_out_circular_bufferERNS_14__split_bufferIfRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 return;
}
function __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE8__appendEmRKf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$promoted$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)<($1>>>0);
 if ($10) {
  $16 = HEAP32[$0>>2]|0;
  $17 = (($7) - ($16))|0;
  $18 = $17 >> 2;
  $19 = (($18) + ($1))|0;
  $20 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($0)|0);
  $21 = ($20>>>0)<($19>>>0);
  if ($21) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $22 = ((($0)) + 8|0);
  $23 = ((($0)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 2;
  $28 = $20 >>> 1;
  $29 = ($27>>>0)<($28>>>0);
  $30 = $26 >> 1;
  $31 = ($30>>>0)<($19>>>0);
  $$sroa$speculated$i = $31 ? $19 : $30;
  $spec$select$i = $29 ? $$sroa$speculated$i : $20;
  $32 = HEAP32[$6>>2]|0;
  $33 = (($32) - ($25))|0;
  $34 = $33 >> 2;
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EmmS3_($3,$spec$select$i,$34,$22);
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEE18__construct_at_endEmRKf($3,$1,$2);
  __ZNSt3__26vectorIfNS_9allocatorIfEEE26__swap_out_circular_bufferERNS_14__split_bufferIfRS2_EE($0,$3);
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($3);
  STACKTOP = sp;return;
 } else {
  $$promoted$i = HEAP32[$6>>2]|0;
  $$0$i = $1;$12 = $$promoted$i;
  while(1) {
   $11 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $11;
   $13 = ((($12)) + 4|0);
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;$12 = $13;
   }
  }
  $scevgep$i = (($$promoted$i) + ($1<<2)|0);
  HEAP32[$6>>2] = $scevgep$i;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEE18__construct_at_endEmRKf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$promoted = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$promoted = HEAP32[$3>>2]|0;
 $$0 = $1;$5 = $$promoted;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $4;
  $6 = ((($5)) + 4|0);
  $7 = (($$0) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;$5 = $6;
  }
 }
 $scevgep = (($$promoted) + ($1<<2)|0);
 HEAP32[$3>>2] = $scevgep;
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIfNS3_9allocatorIfEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIfNS2_9allocatorIfEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIfNS3_9allocatorIfEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIfNS3_9allocatorIfEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIfNS2_9allocatorIfEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__213__vector_baseIfNS_9allocatorIfEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIfNS3_9allocatorIfEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIfNS3_9allocatorIfEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3512|0);
}
function __ZNSt3__213__vector_baseIfNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3512|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3536|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3552|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIfNS2_9allocatorIfEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIfNS2_9allocatorIfEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIfNS5_9allocatorIfEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIfNS5_9allocatorIfEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5516|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvRKfEvPS6_JS8_EE6invokeERKSA_SB_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($2));
 HEAPF32[$3>>2] = $13;
 FUNCTION_TABLE_vii[$14 & 15]($6,$3);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEERKfEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEERKfEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEERKfEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvRKfEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($0) {
 $0 = +$0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (+$0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEERKfEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5520|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9433|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvmRKfEvPS6_JmS8_EE6invokeERKSA_SB_mf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $15 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($3));
 HEAPF32[$4>>2] = $15;
 FUNCTION_TABLE_viii[$16 & 31]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEEmRKfEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEEmRKfEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEEmRKfEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvmRKfEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEEmRKfEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (112|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiifEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9438|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS5_9allocatorIfEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS5_9allocatorIfEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS4_9allocatorIfEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEKFmvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS4_9allocatorIfEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5532|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIfNS3_9allocatorIfEEEEmES2_S9_JmEE6invokeEPSB_PS7_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 FUNCTION_TABLE_viii[$4 & 31]($3,$5,$6);
 $7 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIfNS5_9allocatorIfEEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIfNS5_9allocatorIfEEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIfNS4_9allocatorIfEEEEmEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIfNS3_9allocatorIfEEEEmEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIfNS4_9allocatorIfEEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5540|0);
}
function __ZN10emscripten3valC2IRKfEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKfEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKfE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKfEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKfEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (+__ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($1));
 __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEf($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKfE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKfEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAPF32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 return (+$1);
}
function __ZN10emscripten8internal11LightTypeIDIRKfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5376|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIfNS2_9allocatorIfEEEEmRKfEbS7_JmS9_EE6invokeEPSB_PS6_mf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $8 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($3));
 HEAPF32[$4>>2] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 15]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIfNS4_9allocatorIfEEEEmRKfEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIfNS4_9allocatorIfEEEEmRKfEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIfNS3_9allocatorIfEEEEmRKfEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIfNS2_9allocatorIfEEEEmRKfEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIfNS3_9allocatorIfEEEEmRKfEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (128|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiifEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9444|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI11vectorToolsEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI11vectorToolsEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI11vectorToolsEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI11vectorToolsEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI11vectorToolsEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI11vectorToolsEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI11vectorToolsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI11vectorToolsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP11vectorToolsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK11vectorToolsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK11vectorToolsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI11vectorToolsEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3568|0);
}
function __ZN10emscripten8internal11LightTypeIDI11vectorToolsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3568|0);
}
function __ZN10emscripten8internal11LightTypeIDIP11vectorToolsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3576|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK11vectorToolsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3592|0);
}
function __ZN10emscripten8internal12operator_newI11vectorToolsJEEEPT_DpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(1)|0);
 return ($0|0);
}
function __ZN10emscripten8internal7InvokerIP11vectorToolsJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIP11vectorToolsE10toWireTypeES3_($1)|0);
 return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP11vectorToolsEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP11vectorToolsEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI11vectorToolsEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP11vectorToolsE10toWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI11vectorToolsEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5552|0);
}
function __ZN10emscripten8internal7InvokerIvJRNSt3__26vectorIdNS2_9allocatorIdEEEEEE6invokeEPFvS7_EPS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($1)|0);
 FUNCTION_TABLE_vi[$0 & 255]($2);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIdNS4_9allocatorIdEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIdNS4_9allocatorIdEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5556|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9495|0);
}
function __ZN10emscripten8internal7InvokerIvJRNSt3__26vectorIfNS2_9allocatorIfEEEEEE6invokeEPFvS7_EPS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeEPS6_($1)|0);
 FUNCTION_TABLE_vi[$0 & 255]($2);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIfNS4_9allocatorIfEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIfNS4_9allocatorIfEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__26vectorIfNS3_9allocatorIfEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__26vectorIfNS3_9allocatorIfEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5564|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI12maxiSettingsEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI12maxiSettingsEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI12maxiSettingsEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI12maxiSettingsEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI12maxiSettingsEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI12maxiSettingsEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI12maxiSettingsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI12maxiSettingsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP12maxiSettingsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK12maxiSettingsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK12maxiSettingsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI12maxiSettingsEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3608|0);
}
function __ZN10emscripten8internal11LightTypeIDI12maxiSettingsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3608|0);
}
function __ZN10emscripten8internal11LightTypeIDIP12maxiSettingsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3616|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK12maxiSettingsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3632|0);
}
function __ZN10emscripten8internal12operator_newI12maxiSettingsJEEEPT_DpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(1)|0);
 return ($0|0);
}
function __ZN10emscripten8internal7InvokerIP12maxiSettingsJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIP12maxiSettingsE10toWireTypeES3_($1)|0);
 return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP12maxiSettingsEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP12maxiSettingsEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI12maxiSettingsEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP12maxiSettingsE10toWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI12maxiSettingsEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5572|0);
}
function __ZN10emscripten8internal7InvokerIvJiiiEE6invokeEPFviiiEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1)|0);
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 FUNCTION_TABLE_viii[$0 & 31]($4,$5,$6);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (144|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($4)|0);
 HEAP32[$2>>2] = $12;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 FUNCTION_TABLE_vii[$12 & 15]($4,$11);
 return;
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiSettingsKFivEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiSettingsFviEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5344|0);
}
function __ZN10emscripten8internal10getContextIM12maxiSettingsKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiSettingsFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiOscEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI7maxiOscEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiOscEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiOscEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiOscEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiOscEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI7maxiOscE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiOscE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiOscEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiOscE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiOscEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiOscE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiOscEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3648|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiOscE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3648|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiOscE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3656|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiOscE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3672|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiOscEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiOscEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI7maxiOscED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiOscEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiOscEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiOscEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI7maxiOscEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiOscEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiOscED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiOscEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiOscEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiOscEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (5584);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI7maxiOscE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten3valC2IRS0_EEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRNS_3valEEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRNS_3valEE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRNS_3valEEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRNS_3valEEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeINS0_7_EM_VALEEEvRPNS0_15GenericWireTypeEPT_($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRNS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRNS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRNS_3valEEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeINS0_7_EM_VALEEEvRPNS0_15GenericWireTypeEPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11LightTypeIDIRNS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3320|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiOscE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN10emscripten3valC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 __emval_incref(($2|0));
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiOscEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5584);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(9705|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZN10emscripten3valC2EOS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiOscEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiOscEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiOscEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNK10emscripten3valclIJEEES0_DpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK10emscripten3val12internalCallIPFPNS_8internal7_EM_VALES4_jPKPKvS6_EJEEES0_T_DpOT0_($0,$1,3);
 return;
}
function __ZN10emscripten3valaSEOS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 __emval_decref(($2|0));
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $3;
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZNK10emscripten3val12internalCallIPFPNS_8internal7_EM_VALES4_jPKPKvS6_EJEEES0_T_DpOT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp;
 __ZN10emscripten8internal12WireTypePackIJEEC2Ev($4);
 $5 = HEAP32[$1>>2]|0;
 $6 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getCountEv($3)|0);
 $7 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getTypesEv($3)|0);
 $8 = (__ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($4)|0);
 $9 = (FUNCTION_TABLE_iiiii[$2 & 3]($5,$6,$7,$8)|0);
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$9);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($1);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJEEEE3getEv()|0);
 return ($1|0);
}
function __ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18528|0);
}
function __ZNSt3__210shared_ptrI7maxiOscED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiOscEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3704|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9813|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiOscEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiOscEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5604|0);
}
function __ZNSt3__211make_sharedI7maxiOscJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiOscE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiOscE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(64)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (5616);
 $4 = ((($1)) + 16|0);
 __ZN7maxiOscC1Ev(($4|0));
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI7maxiOscE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFddEdPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+FUNCTION_TABLE_did[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5636|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9875|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFddddEdPS2_JdddEE6invokeERKS4_S5_ddd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $7 = $$unpack6 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack6 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+FUNCTION_TABLE_diddd[$18 & 7]($8,$15,$16,$17));
 HEAPF64[$5>>3] = $19;
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$20);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (160|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9880|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFdddEdPS2_JddEE6invokeERKS4_S5_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+FUNCTION_TABLE_didd[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (192|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9887|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFdvEdPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (+FUNCTION_TABLE_di[$12 & 15]($5));
 HEAPF64[$2>>3] = $13;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$14);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5648|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9893|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFvdEvPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5656|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI12maxiEnvelopeEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI12maxiEnvelopeEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI12maxiEnvelopeEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI12maxiEnvelopeEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI12maxiEnvelopeEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI12maxiEnvelopeEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI12maxiEnvelopeE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI12maxiEnvelopeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP12maxiEnvelopeE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK12maxiEnvelopeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK12maxiEnvelopeE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI12maxiEnvelopeEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3728|0);
}
function __ZN10emscripten8internal11LightTypeIDI12maxiEnvelopeE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3728|0);
}
function __ZN10emscripten8internal11LightTypeIDIP12maxiEnvelopeE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3736|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK12maxiEnvelopeE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3752|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI12maxiEnvelopeEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI12maxiEnvelopeEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI12maxiEnvelopeED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI12maxiEnvelopeEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI12maxiEnvelopeEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI12maxiEnvelopeED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI12maxiEnvelopeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI12maxiEnvelopeEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI12maxiEnvelopeEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (5676);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI12maxiEnvelopeE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI12maxiEnvelopeE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI12maxiEnvelopeEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5676);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(10079|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI12maxiEnvelopeEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI12maxiEnvelopeEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI12maxiEnvelopeEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI12maxiEnvelopeED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI12maxiEnvelopeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3784|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI12maxiEnvelopeEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5696|0);
}
function __ZNSt3__211make_sharedI12maxiEnvelopeJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI12maxiEnvelopeE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI12maxiEnvelopeE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(72)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (5708);
 $4 = ((($1)) + 16|0);
 dest=$4; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI12maxiEnvelopeE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM12maxiEnvelopeFdiRNSt3__26vectorIdNS3_9allocatorIdEEEEEdPS2_JiS8_EE6invokeERKSA_SB_iPS7_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP12maxiEnvelopeE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $15 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($3)|0);
 $17 = (+FUNCTION_TABLE_diii[$16 & 3]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS6_9allocatorIdEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeFdiRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP12maxiEnvelopeE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS6_9allocatorIdEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (208|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10265|0);
}
function __ZN10emscripten8internal13MethodInvokerIM12maxiEnvelopeFvidEvPS2_JidEE6invokeERKS4_S5_id($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP12maxiEnvelopeE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 FUNCTION_TABLE_viid[$15 & 15]($6,$13,$14);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeFvidEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (224|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFdvEE3getIS2_EEdRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (+FUNCTION_TABLE_di[$11 & 15]($4));
 HEAPF64[$2>>3] = $12;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$13);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFvdEE3setIS2_EEvRKS4_RT_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0.0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $3 = $$unpack4 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$12 & 31]($4,$11);
 return;
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFdvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeKFdvEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFvdEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeFvdEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5384|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeKFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($4)|0);
 HEAP32[$2>>2] = $12;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 FUNCTION_TABLE_vii[$12 & 15]($4,$11);
 return;
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeKFivEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeFviEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI13maxiDelaylineEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI13maxiDelaylineEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI13maxiDelaylineEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI13maxiDelaylineEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI13maxiDelaylineEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI13maxiDelaylineEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI13maxiDelaylineE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI13maxiDelaylineEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP13maxiDelaylineE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK13maxiDelaylineEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK13maxiDelaylineE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI13maxiDelaylineEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3808|0);
}
function __ZN10emscripten8internal11LightTypeIDI13maxiDelaylineE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3808|0);
}
function __ZN10emscripten8internal11LightTypeIDIP13maxiDelaylineE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3816|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK13maxiDelaylineE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3832|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI13maxiDelaylineEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI13maxiDelaylineEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI13maxiDelaylineED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI13maxiDelaylineEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI13maxiDelaylineEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI13maxiDelaylineED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI13maxiDelaylineEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI13maxiDelaylineEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDelaylineEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (5736);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI13maxiDelaylineE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDelaylineE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDelaylineEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5736);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(10457|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDelaylineEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDelaylineEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDelaylineEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDelaylineED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI13maxiDelaylineEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3864|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI13maxiDelaylineEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5756|0);
}
function __ZNSt3__211make_sharedI13maxiDelaylineJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI13maxiDelaylineE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDelaylineE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(705656)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (5768);
 $4 = ((($1)) + 16|0);
 __ZN13maxiDelaylineC1Ev(($4|0));
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI13maxiDelaylineE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM13maxiDelaylineFddidEdPS2_JdidEE6invokeERKS4_S5_did($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP13maxiDelaylineE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $7 = $$unpack5 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack5 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+FUNCTION_TABLE_didid[$18 & 1]($8,$15,$16,$17));
 HEAPF64[$5>>3] = $19;
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$20);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM13maxiDelaylineFddidEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP13maxiDelaylineE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (240|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiididEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10646|0);
}
function __ZN10emscripten8internal13MethodInvokerIM13maxiDelaylineFddidiEdPS2_JdidiEE6invokeERKS4_S5_didi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = (__ZN10emscripten8internal11BindingTypeIP13maxiDelaylineE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $8 = $$unpack6 >> 1;
 $9 = (($7) + ($8)|0);
 $10 = $$unpack6 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $20 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $20 = $14;
 }
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $17 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $21 = (+FUNCTION_TABLE_dididi[$20 & 1]($9,$16,$17,$18,$19));
 HEAPF64[$6>>3] = $21;
 $22 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($6));
 STACKTOP = sp;return (+$22);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM13maxiDelaylineFddidiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (272|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiididiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10653|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10maxiFilterEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI10maxiFilterEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI10maxiFilterEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiFilterEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiFilterEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI10maxiFilterEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10maxiFilterE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiFilterEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10maxiFilterE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiFilterEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10maxiFilterE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10maxiFilterEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3888|0);
}
function __ZN10emscripten8internal11LightTypeIDI10maxiFilterE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3888|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10maxiFilterE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3896|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10maxiFilterE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3912|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiFilterEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiFilterEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI10maxiFilterED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiFilterEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiFilterEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiFilterEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI10maxiFilterEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiFilterEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI10maxiFilterED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiFilterEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiFilterEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiFilterEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (5796);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI10maxiFilterE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiFilterE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiFilterEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5796);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(10835|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiFilterEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiFilterEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiFilterEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI10maxiFilterED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiFilterEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3944|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiFilterEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiFilterEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5816|0);
}
function __ZNSt3__211make_sharedI10maxiFilterJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI10maxiFilterE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI10maxiFilterE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(256)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (5828);
 $4 = ((($1)) + 16|0);
 __ZN10maxiFilterC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI10maxiFilterE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10maxiFilterC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 192|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;HEAP32[$1+24>>2]=0|0;HEAP32[$1+28>>2]=0|0;
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiFilterFddddEdPS2_JdddEE6invokeERKS4_S5_ddd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP10maxiFilterE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $7 = $$unpack6 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack6 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+FUNCTION_TABLE_diddd[$18 & 7]($8,$15,$16,$17));
 HEAPF64[$5>>3] = $19;
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$20);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiFilterFddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP10maxiFilterE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (304|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiFilterFdddEdPS2_JddEE6invokeERKS4_S5_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP10maxiFilterE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+FUNCTION_TABLE_didd[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiFilterFdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (336|0);
}
function __ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE3getIS2_EEdRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (+FUNCTION_TABLE_di[$11 & 15]($4));
 HEAPF64[$2>>3] = $12;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$13);
}
function __ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE3setIS2_EEvRKS4_RT_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0.0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $3 = $$unpack4 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$12 & 31]($4,$11);
 return;
}
function __ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM10maxiFilterKFdvEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM10maxiFilterFvdEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal10getContextIM10maxiFilterKFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiFilterFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiMixEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI7maxiMixEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiMixEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiMixEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiMixEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiMixEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI7maxiMixE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiMixE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiMixEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiMixE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiMixEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiMixE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiMixEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3968|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiMixE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3968|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiMixE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3976|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiMixE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3992|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiMixEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiMixEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI7maxiMixED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMixEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMixEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiMixEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI7maxiMixEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiMixEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiMixED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiMixEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiMixEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMixEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (5856);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI7maxiMixE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMixE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMixEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5856);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(11173|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMixEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMixEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMixEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMixED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiMixEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4024|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiMixEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiMixEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5876|0);
}
function __ZNSt3__211make_sharedI7maxiMixJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiMixE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMixE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(136)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (5888);
 $4 = ((($1)) + 16|0);
 dest=$4; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI7maxiMixE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdEvPS2_JdS8_dEE6invokeERKSA_SB_dPS7_d($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP7maxiMixE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $6 = $$unpack6 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($3)|0);
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 FUNCTION_TABLE_vidid[$17 & 1]($7,$14,$15,$16);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiMixE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (352|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviididEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11341|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEddEvPS2_JdS8_ddEE6invokeERKSA_SB_dPS7_dd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP7maxiMixE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $7 = $$unpack7 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($3)|0);
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 FUNCTION_TABLE_vididd[$19 & 1]($8,$15,$16,$17,$18);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEddEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (384|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviididdEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11348|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdddEvPS2_JdS8_dddEE6invokeERKSA_SB_dPS7_ddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt7 = 0, $$unpack = 0, $$unpack8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (__ZN10emscripten8internal11BindingTypeIP7maxiMixE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt7 = ((($0)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 $8 = $$unpack8 >> 1;
 $9 = (($7) + ($8)|0);
 $10 = $$unpack8 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $21 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $21 = $14;
 }
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $17 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($3)|0);
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 FUNCTION_TABLE_vididdd[$21 & 1]($9,$16,$17,$18,$19,$20);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdddEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (416|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviididddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11356|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10maxiLagExpIdEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI10maxiLagExpIdEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI10maxiLagExpIdEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiLagExpIdEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiLagExpIdEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI10maxiLagExpIdEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10maxiLagExpIdEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiLagExpIdEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10maxiLagExpIdEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiLagExpIdEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10maxiLagExpIdEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10maxiLagExpIdEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4048|0);
}
function __ZN10emscripten8internal11LightTypeIDI10maxiLagExpIdEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4048|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10maxiLagExpIdEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4056|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10maxiLagExpIdEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4072|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiLagExpIdEEEJEE6invokeEPFS6_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiLagExpIdEEEE10toWireTypeEOS6_($1)|0);
 __ZNSt3__210shared_ptrI10maxiLagExpIdEED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE3getERKS5_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE5shareEPS4_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI10maxiLagExpIdEEC2IS2_N10emscripten15smart_ptr_traitIS3_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleISA_PS2_EE5valueENS3_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiLagExpIdEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI10maxiLagExpIdEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiLagExpIdEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiLagExpIdEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiLagExpIdEEC2IS2_N10emscripten15smart_ptr_traitIS3_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleISA_PS2_EE5valueENS3_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2ERKS7_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (5916);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2EOS7_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEC2EOSA_($11,$4);
 __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI10maxiLagExpIdEE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2ERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiLagExpIdEE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiLagExpIdEEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5916);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS3_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(11551|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2EOS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEC2EOSA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiLagExpIdEEEE11val_deleterELi1ELb0EEC2EOS9_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiLagExpIdEEEE11val_deleterELi1ELb0EEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2EOS7_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiLagExpIdEEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS3_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI10maxiLagExpIdEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiLagExpIdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4104|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiLagExpIdEEEE10toWireTypeEOS6_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5936|0);
}
function __ZNSt3__211make_sharedI10maxiLagExpIdEJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS4_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI10maxiLagExpIdEE11make_sharedIJEEES3_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI10maxiLagExpIdEE11make_sharedIJEEES3_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(40)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (5948);
 $4 = ((($1)) + 16|0);
 __ZN10maxiLagExpIdEC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI10maxiLagExpIdEE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10maxiLagExpIdEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10maxiLagExpIdE4initEdd($0,0.5,0.0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEFvddEvPS3_JddEE6invokeERKS5_S6_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP10maxiLagExpIdEE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $5 = $$unpack5 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 FUNCTION_TABLE_vidd[$15 & 1]($6,$13,$14);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvddEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP10maxiLagExpIdEE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (448|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11740|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEFvdEvPS3_JdEE6invokeERKS5_S6_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP10maxiLagExpIdEE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvdEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5968|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEKFdvEdPKS3_JEE6invokeERKS5_S7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPK10maxiLagExpIdEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (+FUNCTION_TABLE_di[$12 & 15]($5));
 HEAPF64[$2>>3] = $13;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$14);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiLagExpIdEKFdvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPK10maxiLagExpIdEE12fromWireTypeES5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5980|0);
}
function __ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE3getIS3_EEdRKS5_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (+FUNCTION_TABLE_di[$11 & 15]($4));
 HEAPF64[$2>>3] = $12;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$13);
}
function __ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE3setIS3_EEvRKS5_RT_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0.0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $3 = $$unpack4 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$12 & 31]($4,$11);
 return;
}
function __ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE10getContextES5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEKFdvEEEPT_RKS6_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE10getContextES5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvdEEEPT_RKS6_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10maxiSampleEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI10maxiSampleEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI10maxiSampleEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiSampleEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiSampleEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI10maxiSampleEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN10maxiSampleD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10maxiSampleE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiSampleEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10maxiSampleE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiSampleEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10maxiSampleE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10maxiSampleEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4128|0);
}
function __ZN10maxiSampleD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 128|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 132|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 116|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 120|0);
 HEAP32[$6>>2] = $5;
 (_printf(11759,$vararg_buffer)|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($1);
 __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN10emscripten8internal11LightTypeIDI10maxiSampleE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4128|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10maxiSampleE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4136|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10maxiSampleE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4152|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiSampleEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiSampleEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI10maxiSampleED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI10maxiSampleEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiSampleEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI10maxiSampleED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiSampleEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiSampleEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiSampleEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (5996);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI10maxiSampleE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiSampleE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiSampleEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5996);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(11939|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiSampleEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiSampleEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiSampleEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI10maxiSampleED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiSampleEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4184|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiSampleEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6016|0);
}
function __ZNSt3__211make_sharedI10maxiSampleJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI10maxiSampleE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI10maxiSampleE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(160)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6028);
 $4 = ((($1)) + 16|0);
 __ZN10maxiSampleC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI10maxiSampleE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6028);
 $1 = ((($0)) + 16|0);
 __ZNSt3__222__compressed_pair_elemI10maxiSampleLi1ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 __ZN10maxiSampleD2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10maxiSampleC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 40|0);
 $2 = ((($0)) + 72|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 __ZN10maxiLagExpIdEC2Ev($2);
 $3 = ((($0)) + 100|0);
 HEAP16[$3>>1] = 1;
 $4 = ((($0)) + 104|0);
 $5 = HEAP32[__ZN12maxiSettings10sampleRateE>>2]|0;
 HEAP32[$4>>2] = $5;
 $6 = ((($0)) + 116|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 120|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 124|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 128|0);
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Em($9,0);
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ($1|0)==(0);
 if ($4) {
  return;
 }
 __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEm($0,$1);
 __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endEm($0,$1);
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1|0)<(0);
 if ($4) {
  $5 = (___cxa_allocate_exception(8)|0);
  __ZNSt11logic_errorC2EPKc($5,8638);
  HEAP32[$5>>2] = (7324);
  ___cxa_throw(($5|0),(5216|0),(120|0));
  // unreachable;
 } else {
  $6 = $1 << 1;
  $7 = (__Znwm($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<1)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  return;
 }
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$promoted = 0, $2 = 0, $3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$promoted = HEAP32[$2>>2]|0;
 $3 = $1 << 1;
 _memset(($$promoted|0),0,($3|0))|0;
 $scevgep = (($$promoted) + ($1<<1)|0);
 HEAP32[$2>>2] = $scevgep;
 return;
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNSt3__222__compressed_pair_elemI10maxiSampleLi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10maxiSampleD2Ev($0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvvEvPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
  FUNCTION_TABLE_vi[$11 & 255]($4);
  return;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
  FUNCTION_TABLE_vi[$11 & 255]($4);
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFvvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6048|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEEvPS2_JS8_EE6invokeERKSA_SB_PS7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($2)|0);
 FUNCTION_TABLE_vii[$13 & 15]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS6_9allocatorIdEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS6_9allocatorIdEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6056|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEiEvPS2_JS8_iEE6invokeERKSA_SB_PS7_i($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($2)|0);
 $14 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 FUNCTION_TABLE_viii[$15 & 31]($6,$13,$14);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS6_9allocatorIdEEEEiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS6_9allocatorIdEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (464|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFbvEbPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($4)|0);
 $13 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($12)|0);
 return ($13|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFbvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6068|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFdvEdPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (+FUNCTION_TABLE_di[$12 & 15]($5));
 HEAPF64[$2>>3] = $13;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$14);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6076|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFddEdPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+FUNCTION_TABLE_did[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6084|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFddddEdPS2_JdddEE6invokeERKS4_S5_ddd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $7 = $$unpack6 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack6 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+FUNCTION_TABLE_diddd[$18 & 7]($8,$15,$16,$17));
 HEAPF64[$5>>3] = $19;
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$20);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (480|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiMapEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI7maxiMapEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiMapEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiMapEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiMapEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiMapEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI7maxiMapE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiMapE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiMapEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiMapE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiMapEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiMapE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiMapEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4208|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiMapE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4208|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiMapE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4216|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiMapE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4232|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiMapEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiMapEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI7maxiMapED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMapEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMapEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiMapEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI7maxiMapEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiMapEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiMapED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiMapEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiMapEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMapEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6104);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI7maxiMapE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMapE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMapEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6104);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(12277|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMapEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMapEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMapEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMapED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiMapEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4264|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiMapEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiMapEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6124|0);
}
function __ZNSt3__211make_sharedI7maxiMapJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiMapE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMapE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(16)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6136);
 $4 = ((($0)) + 4|0);
 $5 = ((($1)) + 12|0);
 HEAP32[$0>>2] = $5;
 HEAP32[$4>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 __ZNSt3__210shared_ptrI7maxiMapE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal15FunctionInvokerIPFddddddEddJddddEE6invokeEPS3_ddddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($1));
 $9 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $13 = (+FUNCTION_TABLE_dddddd[$7 & 3]($8,$9,$10,$11,$12));
 HEAPF64[$6>>3] = $13;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($6));
 STACKTOP = sp;return (+$14);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJddddddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFddddddEEEPT_RKS4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJddddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (512|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdidddddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12445|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFddddEddJddEE6invokeEPS3_ddd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($1));
 $7 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $9 = (+FUNCTION_TABLE_dddd[$5 & 1]($6,$7,$8));
 HEAPF64[$4>>3] = $9;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$10);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJddddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFddddEEEPT_RKS4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (544|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdidddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12453|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiDynEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI7maxiDynEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiDynEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiDynEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiDynEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiDynEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI7maxiDynE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiDynE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiDynEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiDynE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiDynEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiDynE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiDynEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4288|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiDynE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4288|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiDynE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4296|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiDynE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4312|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiDynEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiDynEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI7maxiDynED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiDynEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiDynEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiDynEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI7maxiDynEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiDynEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiDynED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiDynEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiDynEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiDynEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6164);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI7maxiDynE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiDynE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiDynEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6164);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(12617|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiDynEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiDynEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiDynEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiDynED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiDynEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4344|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiDynEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiDynEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6184|0);
}
function __ZNSt3__211make_sharedI7maxiDynJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiDynE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiDynE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(104)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6196);
 $4 = ((($1)) + 16|0);
 dest=$4; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI7maxiDynE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiDynFdddlddEdPS2_JddlddEE6invokeERKS4_S5_ddldd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $9 = $$unpack7 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack7 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $19 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($4)|0);
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_diddidd[$22 & 1]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiDynFdddlddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (560|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiddiddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12785|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiDynFddddddEdPS2_JdddddEE6invokeERKS4_S5_ddddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt7 = 0, $$unpack = 0, $$unpack8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt7 = ((($0)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 $9 = $$unpack8 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack8 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_diddddd[$22 & 3]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiDynFddddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (592|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidddddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12794|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiDynFddEdPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+FUNCTION_TABLE_did[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiDynFddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6216|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiDynFvdEvPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6228|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiEnvEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI7maxiEnvEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiEnvEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiEnvEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiEnvEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiEnvEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiEnvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiEnvEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiEnvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiEnvEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiEnvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiEnvEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4368|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiEnvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4368|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiEnvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4376|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiEnvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4392|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiEnvEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiEnvEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI7maxiEnvED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiEnvEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiEnvEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiEnvEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI7maxiEnvEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiEnvEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiEnvED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiEnvEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiEnvEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiEnvEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6248);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI7maxiEnvE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiEnvE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiEnvEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6248);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(12961|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiEnvEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiEnvEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiEnvEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiEnvED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiEnvEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4424|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiEnvEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiEnvEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6268|0);
}
function __ZNSt3__211make_sharedI7maxiEnvJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiEnvE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiEnvE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(104)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6280);
 $4 = ((($1)) + 16|0);
 dest=$4; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZN7maxiEnvC2Ev($4);
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI7maxiEnvE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN7maxiEnvC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 HEAP32[$1>>2] = 1;
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddddliEdPS2_JdddliEE6invokeERKS4_S5_dddli($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $9 = $$unpack7 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack7 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($5)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 $23 = (+FUNCTION_TABLE_didddii[$22 & 1]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFddddliEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (624|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidddiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13129|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddddddliEdPS2_JdddddliEE6invokeERKS4_S5_dddddli($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 var $$elt8 = 0, $$unpack = 0, $$unpack9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $9 = sp;
 $10 = (__ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt8 = ((($0)) + 4|0);
 $$unpack9 = HEAP32[$$elt8>>2]|0;
 $11 = $$unpack9 >> 1;
 $12 = (($10) + ($11)|0);
 $13 = $$unpack9 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  $18 = $$unpack;
  $26 = $18;
 } else {
  $15 = HEAP32[$12>>2]|0;
  $16 = (($15) + ($$unpack)|0);
  $17 = HEAP32[$16>>2]|0;
  $26 = $17;
 }
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $22 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $23 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $24 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($7)|0);
 $25 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($8)|0);
 $27 = (+FUNCTION_TABLE_didddddii[$26 & 1]($12,$19,$20,$21,$22,$23,$24,$25));
 HEAPF64[$9>>3] = $27;
 $28 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($9));
 STACKTOP = sp;return (+$28);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 9;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFddddddliEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (656|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidddddiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13138|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddiEdPS2_JdiEE6invokeERKS4_S5_di($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $17 = (+FUNCTION_TABLE_didi[$16 & 1]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFddiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (704|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13149|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiEnvFvdEvPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6300|0);
}
function __ZN10emscripten8internal12GetterPolicyIM7maxiEnvKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($4)|0);
 HEAP32[$2>>2] = $12;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN10emscripten8internal12SetterPolicyIM7maxiEnvFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 FUNCTION_TABLE_vii[$12 & 15]($4,$11);
 return;
}
function __ZN10emscripten8internal12GetterPolicyIM7maxiEnvKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM7maxiEnvKFivEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12SetterPolicyIM7maxiEnvFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM7maxiEnvFviEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7convertEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI7convertEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7convertEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7convertEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7convertEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI7convertEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI7convertE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7convertE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7convertEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7convertE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7convertEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7convertE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7convertEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4448|0);
}
function __ZN10emscripten8internal11LightTypeIDI7convertE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4448|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7convertE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4456|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7convertE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4472|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7convertEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7convertEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI7convertED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7convertEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7convertEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7convertEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI7convertEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7convertEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7convertED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7convertEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7convertEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7convertEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6320);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI7convertE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7convertE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7convertEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6320);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(13313|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7convertEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7convertEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7convertEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI7convertED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7convertEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4504|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7convertEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7convertEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6340|0);
}
function __ZNSt3__211make_sharedI7convertJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7convertE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI7convertE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(16)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6352);
 $4 = ((($0)) + 4|0);
 $5 = ((($1)) + 12|0);
 HEAP32[$0>>2] = $5;
 HEAP32[$4>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 __ZNSt3__210shared_ptrI7convertE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM7convertFdiEdPS2_JiEE6invokeERKS4_S5_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP7convertE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $5 = $$unpack3 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack3 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $15 = (+FUNCTION_TABLE_dii[$14 & 7]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7convertEEiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7convertEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7convertEEiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7convertFdiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP7convertE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7convertEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6372|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13481|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI14maxiDistortionEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI14maxiDistortionEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI14maxiDistortionEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI14maxiDistortionEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI14maxiDistortionEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI14maxiDistortionEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI14maxiDistortionE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI14maxiDistortionEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP14maxiDistortionE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK14maxiDistortionEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK14maxiDistortionE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI14maxiDistortionEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4528|0);
}
function __ZN10emscripten8internal11LightTypeIDI14maxiDistortionE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4528|0);
}
function __ZN10emscripten8internal11LightTypeIDIP14maxiDistortionE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4536|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK14maxiDistortionE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4552|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI14maxiDistortionEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI14maxiDistortionEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI14maxiDistortionED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI14maxiDistortionEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI14maxiDistortionEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI14maxiDistortionEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI14maxiDistortionEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI14maxiDistortionEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI14maxiDistortionED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI14maxiDistortionEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI14maxiDistortionEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI14maxiDistortionEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6392);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI14maxiDistortionE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI14maxiDistortionE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI14maxiDistortionEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6392);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(13676|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI14maxiDistortionEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI14maxiDistortionEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI14maxiDistortionEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI14maxiDistortionED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI14maxiDistortionEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4584|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI14maxiDistortionEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI14maxiDistortionEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6412|0);
}
function __ZNSt3__211make_sharedI14maxiDistortionJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI14maxiDistortionE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI14maxiDistortionE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(16)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6424);
 $4 = ((($0)) + 4|0);
 $5 = ((($1)) + 12|0);
 HEAP32[$0>>2] = $5;
 HEAP32[$4>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 __ZNSt3__210shared_ptrI14maxiDistortionE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM14maxiDistortionFddEdPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP14maxiDistortionE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+FUNCTION_TABLE_did[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM14maxiDistortionFddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP14maxiDistortionE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6444|0);
}
function __ZN10emscripten8internal13MethodInvokerIM14maxiDistortionFdddEdPS2_JddEE6invokeERKS4_S5_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP14maxiDistortionE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+FUNCTION_TABLE_didd[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM14maxiDistortionFdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (720|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI11maxiFlangerEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI11maxiFlangerEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI11maxiFlangerEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI11maxiFlangerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI11maxiFlangerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI11maxiFlangerEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI11maxiFlangerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI11maxiFlangerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP11maxiFlangerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK11maxiFlangerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK11maxiFlangerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI11maxiFlangerEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4608|0);
}
function __ZN10emscripten8internal11LightTypeIDI11maxiFlangerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4608|0);
}
function __ZN10emscripten8internal11LightTypeIDIP11maxiFlangerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4616|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK11maxiFlangerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4632|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI11maxiFlangerEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI11maxiFlangerEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI11maxiFlangerED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI11maxiFlangerEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI11maxiFlangerEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI11maxiFlangerEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI11maxiFlangerEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI11maxiFlangerEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI11maxiFlangerED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI11maxiFlangerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI11maxiFlangerEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI11maxiFlangerEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6464);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI11maxiFlangerE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI11maxiFlangerE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI11maxiFlangerEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6464);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(14046|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI11maxiFlangerEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI11maxiFlangerEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI11maxiFlangerEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI11maxiFlangerED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI11maxiFlangerEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4664|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI11maxiFlangerEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI11maxiFlangerEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6484|0);
}
function __ZNSt3__211make_sharedI11maxiFlangerJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI11maxiFlangerE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI11maxiFlangerE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(705704)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6496);
 $4 = ((($1)) + 16|0);
 _memset(($4|0),0,705688)|0;
 __ZN11maxiFlangerC2Ev($4);
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI11maxiFlangerE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN11maxiFlangerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13maxiDelaylineC1Ev(($0|0));
 $1 = ((($0)) + 705640|0);
 __ZN7maxiOscC1Ev(($1|0));
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM11maxiFlangerFddjdddEdPS2_JdjdddEE6invokeERKS4_S5_djddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP11maxiFlangerE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $9 = $$unpack7 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack7 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($3)|0);
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_dididdd[$22 & 3]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM11maxiFlangerFddjdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP11maxiFlangerE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (736|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiididddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14229|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10maxiChorusEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI10maxiChorusEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI10maxiChorusEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiChorusEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiChorusEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI10maxiChorusEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10maxiChorusE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiChorusEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10maxiChorusE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiChorusEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10maxiChorusE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10maxiChorusEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4688|0);
}
function __ZN10emscripten8internal11LightTypeIDI10maxiChorusE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4688|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10maxiChorusE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4696|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10maxiChorusE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4712|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiChorusEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiChorusEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI10maxiChorusED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiChorusEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiChorusEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiChorusEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI10maxiChorusEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiChorusEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI10maxiChorusED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiChorusEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiChorusEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiChorusEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6524);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI10maxiChorusE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiChorusE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiChorusEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6524);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(14412|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiChorusEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiChorusEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiChorusEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI10maxiChorusED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiChorusEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4744|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiChorusEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiChorusEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6544|0);
}
function __ZNSt3__211make_sharedI10maxiChorusJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI10maxiChorusE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI10maxiChorusE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(1411584)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6556);
 $4 = ((($1)) + 16|0);
 _memset(($4|0),0,1411568)|0;
 __ZN10maxiChorusC2Ev($4);
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI10maxiChorusE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10maxiChorusC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13maxiDelaylineC1Ev(($0|0));
 $1 = ((($0)) + 705640|0);
 __ZN13maxiDelaylineC1Ev(($1|0));
 $2 = ((($0)) + 1411280|0);
 __ZN7maxiOscC1Ev(($2|0));
 $3 = ((($0)) + 1411328|0);
 __ZN10maxiFilterC2Ev($3);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiChorusFddjdddEdPS2_JdjdddEE6invokeERKS4_S5_djddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP10maxiChorusE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $9 = $$unpack7 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack7 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($3)|0);
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_dididdd[$22 & 3]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiChorusFddjdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP10maxiChorusE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (768|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI13maxiDCBlockerEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI13maxiDCBlockerEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI13maxiDCBlockerEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI13maxiDCBlockerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI13maxiDCBlockerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI13maxiDCBlockerEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI13maxiDCBlockerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI13maxiDCBlockerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP13maxiDCBlockerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK13maxiDCBlockerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK13maxiDCBlockerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI13maxiDCBlockerEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4768|0);
}
function __ZN10emscripten8internal11LightTypeIDI13maxiDCBlockerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4768|0);
}
function __ZN10emscripten8internal11LightTypeIDIP13maxiDCBlockerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4776|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK13maxiDCBlockerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4792|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI13maxiDCBlockerEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI13maxiDCBlockerEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI13maxiDCBlockerED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI13maxiDCBlockerEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI13maxiDCBlockerEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI13maxiDCBlockerED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI13maxiDCBlockerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI13maxiDCBlockerEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDCBlockerEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6584);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI13maxiDCBlockerE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDCBlockerE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDCBlockerEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6584);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(14778|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDCBlockerEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDCBlockerEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDCBlockerEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDCBlockerED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI13maxiDCBlockerEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4824|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI13maxiDCBlockerEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6604|0);
}
function __ZNSt3__211make_sharedI13maxiDCBlockerJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI13maxiDCBlockerE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDCBlockerE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(32)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6616);
 $4 = ((($1)) + 16|0);
 __ZN13maxiDCBlockerC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI13maxiDCBlockerE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN13maxiDCBlockerC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM13maxiDCBlockerFdddEdPS2_JddEE6invokeERKS4_S5_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP13maxiDCBlockerE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+FUNCTION_TABLE_didd[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM13maxiDCBlockerFdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP13maxiDCBlockerE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (800|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiSVFEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeI7maxiSVFEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiSVFEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiSVFEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiSVFEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiSVFEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiSVFE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiSVFEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiSVFE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiSVFEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiSVFE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiSVFEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4848|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiSVFE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4848|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiSVFE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4856|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiSVFE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4872|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiSVFEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 255]($1);
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiSVFEEE10toWireTypeEOS5_($1)|0);
 __ZNSt3__210shared_ptrI7maxiSVFED2Ev($1);
 STACKTOP = sp;return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiSVFEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiSVFEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiSVFEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($3,$1);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2ENS_3valE($2,$3);
 HEAP32[$4>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__210shared_ptrI7maxiSVFEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($5,$0,$2,$$byval_copy);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($2);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiSVFEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiSVFED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiSVFEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiSVFEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiSVFEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 $6 = (__Znwm(20)|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2ERKS6_($5,$2);
 $7 = $1;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = (6644);
 HEAP32[$4>>2] = $7;
 $10 = ((($4)) + 4|0);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2EOS6_($10,$5);
 $11 = ((($6)) + 12|0);
 __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($11,$4);
 __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $6;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($5);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 __ZNSt3__210shared_ptrI7maxiSVFE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiSVFE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 (__ZN10emscripten3valaSEOS0_($0,$3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiSVFEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6644);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterclEPKv($1,$3);
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($1);
 return;
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(15125|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiSVFEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiSVFEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiSVFEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiSVFED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 255]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiSVFEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4904|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiSVFEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiSVFEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6664|0);
}
function __ZNSt3__211make_sharedI7maxiSVFJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiSVFE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiSVFE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(120)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (6676);
 $4 = ((($1)) + 16|0);
 __ZN7maxiSVFC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI7maxiSVFE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN7maxiSVFC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 __ZN7maxiSVF9setParamsEdd($0,1000.0,1.0);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiSVFFRS2_dES3_PS2_JdEE6invokeERKS5_S6_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiSVFE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $14 = (FUNCTION_TABLE_iid[$13 & 3]($5,$12)|0);
 $15 = (__ZN10emscripten8internal18GenericBindingTypeI7maxiSVFE10toWireTypeERKS2_($14)|0);
 return ($15|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJR7maxiSVFNS0_17AllowedRawPointerIS3_EEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiSVFFRS2_dEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal18GenericBindingTypeI7maxiSVFE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = (__Znwm(104)|0);
 dest=$1; src=$0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiSVFE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJR7maxiSVFNS0_17AllowedRawPointerIS3_EEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6696|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15293|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiSVFFddddddEdPS2_JdddddEE6invokeERKS4_S5_ddddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt7 = 0, $$unpack = 0, $$unpack8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP7maxiSVFE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt7 = ((($0)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 $9 = $$unpack8 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack8 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_diddddd[$22 & 3]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiSVFFddddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (816|0);
}
function __GLOBAL__sub_I_maximilian_embind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_2();
 return;
}
function ___cxx_global_var_init_2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(15298|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(15303|0),1,1,0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_116register_integerItEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_116register_integerImEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc();
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(15308|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(15320|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(15353|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(15366|0));
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(15382);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(15419);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(15458);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(15489);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(15529);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(15558);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(15596);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(15628);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(15661);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(15694);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(15728);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(15761);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_116register_integerIcEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 __embind_register_integer(($0|0),(16689|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIaEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 __embind_register_integer(($0|0),(16677|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIhEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 __embind_register_integer(($0|0),(16663|0),1,0,255);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIsEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 __embind_register_integer(($0|0),(16657|0),2,-32768,32767);
 return;
}
function __ZN12_GLOBAL__N_116register_integerItEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 __embind_register_integer(($0|0),(16642|0),2,0,65535);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIiEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 __embind_register_integer(($0|0),(16638|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIjEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 __embind_register_integer(($0|0),(16625|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIlEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 __embind_register_integer(($0|0),(16620|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_116register_integerImEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 __embind_register_integer(($0|0),(16606|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_114register_floatIfEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 __embind_register_float(($0|0),(16600|0),4);
 return;
}
function __ZN12_GLOBAL__N_114register_floatIdEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 __embind_register_float(($0|0),(16593|0),8);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 __embind_register_memory_view(($0|0),0,(16305|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 __embind_register_memory_view(($1|0),0,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 __embind_register_memory_view(($1|0),1,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 __embind_register_memory_view(($1|0),2,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 __embind_register_memory_view(($1|0),3,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 __embind_register_memory_view(($1|0),4,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 __embind_register_memory_view(($1|0),5,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 __embind_register_memory_view(($0|0),4,(16058|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 __embind_register_memory_view(($0|0),5,(15988|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 __embind_register_memory_view(($0|0),6,(15926|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 __embind_register_memory_view(($0|0),7,(15863|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 __embind_register_memory_view(($0|0),7,(15795|0));
 return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4928|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4936|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4944|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4952|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4960|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4968|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4976|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4984|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4992|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5000|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5008|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5016|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3320|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5024|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5056|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5080|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5376|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5368|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5360|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5352|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5336|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5328|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5312|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5320|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5304|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5296|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5280|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___strdup($2)|0);
 return ($3|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18592|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 1;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6968|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 15]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $23 = (($$03846) + -1)|0;
      $24 = (($0) + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $22 = ($23|0)==(0);
      if ($22) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $23;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 15]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((18596|0));
 return (18604|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((18596|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1741]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1741]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 15]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out_655($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint_656($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint_656($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((848 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_658($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 16694;$$2256 = $spec$select295;$$4266 = $spec$select;$277 = $240;$279 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 16694;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 16694 : (16696);
       $spec$select296 = $266 ? $$ : (16695);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 16694;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 16694;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 16704 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_661($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 16694;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (16694 + ($236)|0);
      $spec$select293 = $or$cond278 ? 16694 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$277 = $225;$279 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$277 = $271;$279 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 16694;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_661($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out_655($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $276 = ($277|0)!=(0);
     $278 = ($279|0)!=(0);
     $280 = $276 | $278;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_661($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_661($0,32,$$2261,$341,$$6268);
    _out_655($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_661($0,48,$$2261,$341,$343);
    _pad_661($0,48,$spec$select284,$339,0);
    _out_655($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_661($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg_658($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $354 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $353 = ($354>>>0)<(10);
      if ($353) {
       $$3317 = $354;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out_655($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_656($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg_658($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (1312 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_78()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_661($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_655($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out_655($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_662($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_662($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 16711;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (16712) : (16717);
  $spec$select565 = $19 ? $$ : (16714);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 16730 : 16734;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 16738 : 16742;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_661($0,32,$2,$34,$35);
   _out_655($0,$$0523,$$0522);
   _out_655($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_661($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (1312 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_661($0,32,$2,$113,$4);
    _out_655($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_661($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out_655($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_661($0,48,$118,0,0);
    _out_655($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_661($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$135 = $$pr;
    while(1) {
     $134 = ($135|0)<(29);
     $136 = $134 ? $135 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $154 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($154>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $154;
        } else {
         $$3501$lcssa = $154;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$135 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $273 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $272 = ($273>>>0)>($$9>>>0);
      if ($272) {
       $$9507625 = $273;
      } else {
       $$9507$lcssa = $273;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_661($0,32,$2,$339,$4);
   _out_655($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_661($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out_655($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out_655($0,16746,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out_655($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_661($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out_655($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out_655($0,16746,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out_655($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_661($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out_655($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_661($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_662($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_888()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_888() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_78() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (1328 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 1424;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 1424;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[1709]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4652]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (18648 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[4652] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(18616)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (18648 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[4652] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(18628)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (18648 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[4652] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(18616)>>2] = $76;
     HEAP32[(18628)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(18612)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (18912 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (18912 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(18612)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(18628)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (18648 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[4652] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(18616)>>2] = $$0171$i;
       HEAP32[(18628)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(18612)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (18912 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (18912 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $314 = $312;
       } else {
        $314 = $309;
       }
       $313 = ($314|0)==(0|0);
       if ($313) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $314;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(18616)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (18912 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(18612)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (18648 + ($382<<2)|0);
           $384 = HEAP32[4652]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[4652] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (18912 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(18612)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(18616)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(18628)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(18628)>>2] = $465;
   HEAP32[(18616)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(18616)>>2] = 0;
   HEAP32[(18628)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(18620)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(18620)>>2] = $480;
  $481 = HEAP32[(18632)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(18632)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[4770]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(19088)>>2] = 4096;
  HEAP32[(19084)>>2] = 4096;
  HEAP32[(19092)>>2] = -1;
  HEAP32[(19096)>>2] = -1;
  HEAP32[(19100)>>2] = 0;
  HEAP32[(19052)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[4770] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(19088)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(19048)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(19040)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(19052)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(18632)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (19056);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(19084)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(19040)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(19048)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(19088)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(19052)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(19052)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(19040)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(19040)>>2] = $582;
  $583 = HEAP32[(19044)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(19044)>>2] = $582;
  }
  $585 = HEAP32[(18632)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(18624)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(18624)>>2] = $$748$i;
    }
    HEAP32[(19056)>>2] = $$748$i;
    HEAP32[(19060)>>2] = $$723947$i;
    HEAP32[(19068)>>2] = 0;
    $590 = HEAP32[4770]|0;
    HEAP32[(18644)>>2] = $590;
    HEAP32[(18640)>>2] = -1;
    HEAP32[(18660)>>2] = (18648);
    HEAP32[(18656)>>2] = (18648);
    HEAP32[(18668)>>2] = (18656);
    HEAP32[(18664)>>2] = (18656);
    HEAP32[(18676)>>2] = (18664);
    HEAP32[(18672)>>2] = (18664);
    HEAP32[(18684)>>2] = (18672);
    HEAP32[(18680)>>2] = (18672);
    HEAP32[(18692)>>2] = (18680);
    HEAP32[(18688)>>2] = (18680);
    HEAP32[(18700)>>2] = (18688);
    HEAP32[(18696)>>2] = (18688);
    HEAP32[(18708)>>2] = (18696);
    HEAP32[(18704)>>2] = (18696);
    HEAP32[(18716)>>2] = (18704);
    HEAP32[(18712)>>2] = (18704);
    HEAP32[(18724)>>2] = (18712);
    HEAP32[(18720)>>2] = (18712);
    HEAP32[(18732)>>2] = (18720);
    HEAP32[(18728)>>2] = (18720);
    HEAP32[(18740)>>2] = (18728);
    HEAP32[(18736)>>2] = (18728);
    HEAP32[(18748)>>2] = (18736);
    HEAP32[(18744)>>2] = (18736);
    HEAP32[(18756)>>2] = (18744);
    HEAP32[(18752)>>2] = (18744);
    HEAP32[(18764)>>2] = (18752);
    HEAP32[(18760)>>2] = (18752);
    HEAP32[(18772)>>2] = (18760);
    HEAP32[(18768)>>2] = (18760);
    HEAP32[(18780)>>2] = (18768);
    HEAP32[(18776)>>2] = (18768);
    HEAP32[(18788)>>2] = (18776);
    HEAP32[(18784)>>2] = (18776);
    HEAP32[(18796)>>2] = (18784);
    HEAP32[(18792)>>2] = (18784);
    HEAP32[(18804)>>2] = (18792);
    HEAP32[(18800)>>2] = (18792);
    HEAP32[(18812)>>2] = (18800);
    HEAP32[(18808)>>2] = (18800);
    HEAP32[(18820)>>2] = (18808);
    HEAP32[(18816)>>2] = (18808);
    HEAP32[(18828)>>2] = (18816);
    HEAP32[(18824)>>2] = (18816);
    HEAP32[(18836)>>2] = (18824);
    HEAP32[(18832)>>2] = (18824);
    HEAP32[(18844)>>2] = (18832);
    HEAP32[(18840)>>2] = (18832);
    HEAP32[(18852)>>2] = (18840);
    HEAP32[(18848)>>2] = (18840);
    HEAP32[(18860)>>2] = (18848);
    HEAP32[(18856)>>2] = (18848);
    HEAP32[(18868)>>2] = (18856);
    HEAP32[(18864)>>2] = (18856);
    HEAP32[(18876)>>2] = (18864);
    HEAP32[(18872)>>2] = (18864);
    HEAP32[(18884)>>2] = (18872);
    HEAP32[(18880)>>2] = (18872);
    HEAP32[(18892)>>2] = (18880);
    HEAP32[(18888)>>2] = (18880);
    HEAP32[(18900)>>2] = (18888);
    HEAP32[(18896)>>2] = (18888);
    HEAP32[(18908)>>2] = (18896);
    HEAP32[(18904)>>2] = (18896);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(18632)>>2] = $599;
    HEAP32[(18620)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(19096)>>2]|0;
    HEAP32[(18636)>>2] = $605;
   } else {
    $$024372$i = (19056);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(18620)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(18632)>>2] = $631;
       HEAP32[(18620)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(19096)>>2]|0;
       HEAP32[(18636)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(18624)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(18624)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (19056);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(18620)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(18620)>>2] = $678;
        HEAP32[(18632)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(18628)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(18616)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(18616)>>2] = $684;
         HEAP32[(18628)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[4652]|0;
            $703 = $702 & $701;
            HEAP32[4652] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (18912 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(18612)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(18612)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (18648 + ($763<<2)|0);
         $765 = HEAP32[4652]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[4652] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (18912 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(18612)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(18612)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (19056);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(18632)>>2] = $870;
    HEAP32[(18620)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(19096)>>2]|0;
    HEAP32[(18636)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(19056)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(19056)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(19056)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(19056)+12>>2]|0;
    HEAP32[(19056)>>2] = $$748$i;
    HEAP32[(19060)>>2] = $$723947$i;
    HEAP32[(19068)>>2] = 0;
    HEAP32[(19064)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (18648 + ($892<<2)|0);
      $894 = HEAP32[4652]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[4652] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (18912 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(18612)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(18612)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(18620)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(18620)>>2] = $971;
   $972 = HEAP32[(18632)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(18632)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(18624)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(18628)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(18616)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[4652]|0;
     $29 = $28 & $27;
     HEAP32[4652] = $29;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (18912 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(18612)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(18612)>>2] = $62;
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(18632)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(18620)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(18620)>>2] = $98;
   HEAP32[(18632)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(18628)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(18628)>>2] = 0;
   HEAP32[(18616)>>2] = 0;
   return;
  }
  $103 = HEAP32[(18628)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(18616)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(18616)>>2] = $106;
   HEAP32[(18628)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[4652]|0;
     $122 = $121 & $120;
     HEAP32[4652] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (18912 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(18612)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(18612)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(18628)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(18616)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (18648 + ($183<<2)|0);
  $185 = HEAP32[4652]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[4652] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (18912 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(18612)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(18612)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(18640)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(18640)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (19064);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(18640)>>2] = -1;
 return;
}
function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZNSt3__219__shared_weak_count14__release_weakEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 255]($0);
 } else {
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$1>>2] = $8;
  $9 = ($7|0)==(0);
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 255]($0);
  }
 }
 return;
}
function __Znwm($0) {
 $0 = $0|0;
 var $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $spec$store$select = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($spec$store$select)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 3]();
 }
 return ($$lcssa|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwm($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (7304);
 $2 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($2,$1);
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 16939;
    _abort_message(16889,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[1284]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 15](5136,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 127]($30)|0);
    HEAP32[$vararg_buffer>>2] = 16939;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(16803,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 16939;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(16848,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(16927,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((19104|0),(2|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[4777]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(17078,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[1677]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,5160,5144,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 7]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $18 & $17;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $28 = $4;
   } else {
    $28 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $27 = ($28|0)==(1);
   $or$cond22 = $26 & $27;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $spec$select = 0, $spec$select33 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 3]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $spec$select = $26 ? $8 : 0;
   $$0 = $spec$select;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 3]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $spec$select33 = $or$cond28 ? $38 : 0;
    $$0 = $spec$select33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 3]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $44 = ((($0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 3]($45,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 3]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 0;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$13>>2] = $2;
       $33 = ((($1)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($1)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($1)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($1)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($$037$off038) {
          label = 15;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($$037$off038) {
        label = 15;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $43 = 3;
     }
     HEAP32[$19>>2] = $43;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 7]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((19108|0),(185|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(17127,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[4777]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(17177,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 3]();
 _abort_message(17230,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1803]|0;
 $1 = (($0) + 0)|0;
 HEAP32[1803] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (7304);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_272($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = (($5) + -1)|0;
  $8 = ($7|0)<(0);
  if ($8) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_272($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,0)|0);
 if ($6) {
  $$4 = 1;
 } else {
  $7 = ($1|0)==(0|0);
  if ($7) {
   $$4 = 0;
  } else {
   $8 = (___dynamic_cast($1,5160,5248,0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$4 = 0;
   } else {
    $10 = ((($8)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 ^ -1;
    $15 = $11 & $14;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = ((($0)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($8)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($18,$20,0)|0);
     if ($21) {
      $$4 = 1;
     } else {
      $22 = HEAP32[$17>>2]|0;
      $23 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22,5280,0)|0);
      if ($23) {
       $$4 = 1;
      } else {
       $24 = HEAP32[$17>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $$4 = 0;
       } else {
        $26 = (___dynamic_cast($24,5160,5144,0)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         $$4 = 0;
        } else {
         $28 = HEAP32[$19>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $$4 = 0;
         } else {
          $30 = (___dynamic_cast($28,5160,5144,0)|0);
          $31 = ($30|0)==(0|0);
          if ($31) {
           $$4 = 0;
          } else {
           $32 = ((($3)) + 4|0);
           dest=$32; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$3>>2] = $30;
           $33 = ((($3)) + 8|0);
           HEAP32[$33>>2] = $26;
           $34 = ((($3)) + 12|0);
           HEAP32[$34>>2] = -1;
           $35 = ((($3)) + 48|0);
           HEAP32[$35>>2] = 1;
           $36 = HEAP32[$30>>2]|0;
           $37 = ((($36)) + 28|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = HEAP32[$2>>2]|0;
           FUNCTION_TABLE_viiii[$38 & 7]($30,$3,$39,1);
           $40 = ((($3)) + 24|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)==(1);
           if ($42) {
            $43 = ((($3)) + 16|0);
            $44 = HEAP32[$43>>2]|0;
            HEAP32[$2>>2] = $44;
            $$0 = 1;
           } else {
            $$0 = 0;
           }
           $$4 = $$0;
          }
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1,5288,0)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($0)) + 8|0);
    $21 = ((($1)) + 54|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$20>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$20>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $56 = ((($0)) + 16|0);
    $57 = ((($0)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($0)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$1,$2,$3,$4);
    $60 = ((($0)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($1)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $86 = ((($1)) + 54|0);
       $$2 = $60;
       while(1) {
        $87 = HEAP8[$86>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $91 = ((($$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($1)) + 24|0);
      $77 = ((($1)) + 54|0);
      $$1 = $60;
      while(1) {
       $78 = HEAP8[$77>>0]|0;
       $79 = ($78<<24>>24)==(0);
       if (!($79)) {
        break L1;
       }
       $80 = HEAP32[$66>>2]|0;
       $81 = ($80|0)==(1);
       if ($81) {
        $82 = HEAP32[$76>>2]|0;
        $83 = ($82|0)==(1);
        if ($83) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $84 = ((($$1)) + 8|0);
       $85 = ($84>>>0)<($59>>>0);
       if ($85) {
        $$1 = $84;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($1)) + 54|0);
    $$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $72 = ((($$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($0)) + 16|0);
     $23 = ((($0)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($0)) + 16|0) + ($24<<3)|0);
     $26 = ((($1)) + 52|0);
     $27 = ((($1)) + 53|0);
     $28 = ((($1)) + 54|0);
     $29 = ((($0)) + 8|0);
     $30 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $22;$$085$off0 = 0;
     L32: while(1) {
      $31 = ($$084>>>0)<($25>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$26>>0] = 0;
      HEAP8[$27>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$28>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$27>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$26>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$29>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L32;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$30>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L32;
        }
        $40 = HEAP32[$29>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L32;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$13>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = ((($1)) + 36|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==(1);
        if ($52) {
         $53 = HEAP32[$30>>2]|0;
         $54 = ($53|0)==(2);
         if ($54) {
          HEAP8[$28>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $55 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $55 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $55 = 3;
     }
     HEAP32[$19>>2] = $55;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)==(0);
 $19 = $18 ? 2 : $3;
 FUNCTION_TABLE_viiii[$15 & 7]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)==(0);
 $21 = $20 ? 2 : $4;
 FUNCTION_TABLE_viiiiii[$17 & 3]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)==(0);
 $20 = $19 ? 2 : $3;
 FUNCTION_TABLE_viiiii[$16 & 3]($13,$1,$17,$20,$4);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4778]|0;
 $1 = (($0) + 0)|0;
 HEAP32[4778] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 15]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0;
 } else {
  $2 = (___dynamic_cast($0,5160,5248,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $3 = $phitmp1;
 }
 return ($3|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory(newDynamicTop|0)|0;
      ___setErrNo(12);
      return -1;
    }

    totalMemory = _emscripten_get_heap_size()|0;
    if ((newDynamicTop|0) <= (totalMemory|0)) {
      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;
    } else {
      if ((_emscripten_resize_heap(newDynamicTop|0)|0) == 0) {
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_dddd(index,a1,a2,a3) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3;
  return +FUNCTION_TABLE_dddd[index&1](+a1,+a2,+a3);
}


function dynCall_dddddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  return +FUNCTION_TABLE_dddddd[index&3](+a1,+a2,+a3,+a4,+a5);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&15](a1|0);
}


function dynCall_did(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return +FUNCTION_TABLE_did[index&15](a1|0,+a2);
}


function dynCall_didd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  return +FUNCTION_TABLE_didd[index&7](a1|0,+a2,+a3);
}


function dynCall_diddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  return +FUNCTION_TABLE_diddd[index&7](a1|0,+a2,+a3,+a4);
}


function dynCall_diddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  return +FUNCTION_TABLE_diddddd[index&3](a1|0,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_didddddii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=a7|0; a8=a8|0;
  return +FUNCTION_TABLE_didddddii[index&1](a1|0,+a2,+a3,+a4,+a5,+a6,a7|0,a8|0);
}


function dynCall_didddii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=a5|0; a6=a6|0;
  return +FUNCTION_TABLE_didddii[index&1](a1|0,+a2,+a3,+a4,a5|0,a6|0);
}


function dynCall_diddidd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=a4|0; a5=+a5; a6=+a6;
  return +FUNCTION_TABLE_diddidd[index&1](a1|0,+a2,+a3,a4|0,+a5,+a6);
}


function dynCall_didi(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0;
  return +FUNCTION_TABLE_didi[index&1](a1|0,+a2,a3|0);
}


function dynCall_didid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4;
  return +FUNCTION_TABLE_didid[index&1](a1|0,+a2,a3|0,+a4);
}


function dynCall_dididdd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4; a5=+a5; a6=+a6;
  return +FUNCTION_TABLE_dididdd[index&3](a1|0,+a2,a3|0,+a4,+a5,+a6);
}


function dynCall_dididi(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4; a5=a5|0;
  return +FUNCTION_TABLE_dididi[index&1](a1|0,+a2,a3|0,+a4,a5|0);
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&7](a1|0,a2|0);
}


function dynCall_diid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return +FUNCTION_TABLE_diid[index&7](a1|0,a2|0,+a3);
}


function dynCall_diidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  return +FUNCTION_TABLE_diidd[index&7](a1|0,a2|0,+a3,+a4);
}


function dynCall_diiddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5;
  return +FUNCTION_TABLE_diiddd[index&3](a1|0,a2|0,+a3,+a4,+a5);
}


function dynCall_diiddddd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7;
  return +FUNCTION_TABLE_diiddddd[index&3](a1|0,a2|0,+a3,+a4,+a5,+a6,+a7);
}


function dynCall_diidddddii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0; a9=a9|0;
  return +FUNCTION_TABLE_diidddddii[index&1](a1|0,a2|0,+a3,+a4,+a5,+a6,+a7,a8|0,a9|0);
}


function dynCall_diidddii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=a6|0; a7=a7|0;
  return +FUNCTION_TABLE_diidddii[index&1](a1|0,a2|0,+a3,+a4,+a5,a6|0,a7|0);
}


function dynCall_diiddidd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=a5|0; a6=+a6; a7=+a7;
  return +FUNCTION_TABLE_diiddidd[index&1](a1|0,a2|0,+a3,+a4,a5|0,+a6,+a7);
}


function dynCall_diidi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0;
  return +FUNCTION_TABLE_diidi[index&1](a1|0,a2|0,+a3,a4|0);
}


function dynCall_diidid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5;
  return +FUNCTION_TABLE_diidid[index&1](a1|0,a2|0,+a3,a4|0,+a5);
}


function dynCall_diididdd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5; a6=+a6; a7=+a7;
  return +FUNCTION_TABLE_diididdd[index&3](a1|0,a2|0,+a3,a4|0,+a5,+a6,+a7);
}


function dynCall_diididi(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5; a6=a6|0;
  return +FUNCTION_TABLE_diididi[index&1](a1|0,a2|0,+a3,a4|0,+a5,a6|0);
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&3](a1|0,a2|0,a3|0);
}


function dynCall_diiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return +FUNCTION_TABLE_diiii[index&1](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&31]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&3](a1|0,+a2)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&1](a1|0,a2|0,+a3)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  return FUNCTION_TABLE_iiiid[index&3](a1|0,a2|0,a3|0,+a4)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&3](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&3]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&31](a1|0,+a2);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&1](a1|0,+a2,+a3);
}


function dynCall_vidid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_vidid[index&1](a1|0,+a2,a3|0,+a4);
}


function dynCall_vididd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vididd[index&1](a1|0,+a2,a3|0,+a4,+a5);
}


function dynCall_vididdd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vididdd[index&1](a1|0,+a2,a3|0,+a4,+a5,+a6);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&15](a1|0,a2|0);
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&15](a1|0,a2|0,+a3);
}


function dynCall_viidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viidd[index&1](a1|0,a2|0,+a3,+a4);
}


function dynCall_viidid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5;
  FUNCTION_TABLE_viidid[index&1](a1|0,a2|0,+a3,a4|0,+a5);
}


function dynCall_viididd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5; a6=+a6;
  FUNCTION_TABLE_viididd[index&1](a1|0,a2|0,+a3,a4|0,+a5,+a6);
}


function dynCall_viididdd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5; a6=+a6; a7=+a7;
  FUNCTION_TABLE_viididdd[index&1](a1|0,a2|0,+a3,a4|0,+a5,+a6,+a7);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&3](a1|0,a2|0,a3|0,+a4);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&7](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0,p1,p2) {
 p0 = +p0;p1 = +p1;p2 = +p2; nullFunc_dddd(0);return +0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_dddddd(1);return +0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_di(2);return +0;
}
function __ZN7maxiOsc5noiseEv__wrapper(p0) {
 p0 = p0|0; return +__ZN7maxiOsc5noiseEv(p0|0);
}
function __ZN10maxiSample8playOnceEv__wrapper(p0) {
 p0 = p0|0; return +__ZN10maxiSample8playOnceEv(p0|0);
}
function __ZN10maxiSample4playEv__wrapper(p0) {
 p0 = p0|0; return +__ZN10maxiSample4playEv(p0|0);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_did(3);return +0;
}
function __ZN7maxiOsc8sinewaveEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc8sinewaveEd(p0|0,+p1);
}
function __ZN7maxiOsc7coswaveEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc7coswaveEd(p0|0,+p1);
}
function __ZN7maxiOsc6phasorEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc6phasorEd(p0|0,+p1);
}
function __ZN7maxiOsc3sawEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc3sawEd(p0|0,+p1);
}
function __ZN7maxiOsc8triangleEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc8triangleEd(p0|0,+p1);
}
function __ZN7maxiOsc6squareEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc6squareEd(p0|0,+p1);
}
function __ZN7maxiOsc7sinebufEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc7sinebufEd(p0|0,+p1);
}
function __ZN7maxiOsc8sinebuf4Ed__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc8sinebuf4Ed(p0|0,+p1);
}
function __ZN7maxiOsc4sawnEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiOsc4sawnEd(p0|0,+p1);
}
function __ZN10maxiSample8playOnceEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN10maxiSample8playOnceEd(p0|0,+p1);
}
function __ZN10maxiSample4playEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN10maxiSample4playEd(p0|0,+p1);
}
function __ZN7maxiDyn8compressEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; return +__ZN7maxiDyn8compressEd(p0|0,+p1);
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_didd(4);return +0;
}
function __ZN7maxiOsc5pulseEdd__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; return +__ZN7maxiOsc5pulseEdd(p0|0,+p1,+p2);
}
function __ZN7maxiOsc4rectEdd__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; return +__ZN7maxiOsc4rectEdd(p0|0,+p1,+p2);
}
function __ZN10maxiFilter6lopassEdd__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; return +__ZN10maxiFilter6lopassEdd(p0|0,+p1,+p2);
}
function __ZN10maxiFilter6hipassEdd__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; return +__ZN10maxiFilter6hipassEdd(p0|0,+p1,+p2);
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_diddd(5);return +0;
}
function __ZN7maxiOsc6phasorEddd__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; return +__ZN7maxiOsc6phasorEddd(p0|0,+p1,+p2,+p3);
}
function __ZN10maxiFilter5loresEddd__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; return +__ZN10maxiFilter5loresEddd(p0|0,+p1,+p2,+p3);
}
function __ZN10maxiFilter5hiresEddd__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; return +__ZN10maxiFilter5hiresEddd(p0|0,+p1,+p2,+p3);
}
function __ZN10maxiFilter8bandpassEddd__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; return +__ZN10maxiFilter8bandpassEddd(p0|0,+p1,+p2,+p3);
}
function __ZN10maxiSample4playEddd__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; return +__ZN10maxiSample4playEddd(p0|0,+p1,+p2,+p3);
}
function __ZN10maxiSample5play4Eddd__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; return +__ZN10maxiSample5play4Eddd(p0|0,+p1,+p2,+p3);
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_diddddd(6);return +0;
}
function __ZN7maxiDyn10compressorEddddd__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; return +__ZN7maxiDyn10compressorEddddd(p0|0,+p1,+p2,+p3,+p4,+p5);
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = p6|0;p7 = p7|0; nullFunc_didddddii(7);return +0;
}
function __ZN7maxiEnv4adsrEdddddli__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = p6|0;p7 = p7|0; return +__ZN7maxiEnv4adsrEdddddli(p0|0,+p1,+p2,+p3,+p4,+p5,p6|0,p7|0);
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = p4|0;p5 = p5|0; nullFunc_didddii(8);return +0;
}
function __ZN7maxiEnv2arEdddli__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = p4|0;p5 = p5|0; return +__ZN7maxiEnv2arEdddli(p0|0,+p1,+p2,+p3,p4|0,p5|0);
}
function b9(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5; nullFunc_diddidd(9);return +0;
}
function __ZN7maxiDyn4gateEddldd__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5; return +__ZN7maxiDyn4gateEddldd(p0|0,+p1,+p2,p3|0,+p4,+p5);
}
function b10(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = p2|0; nullFunc_didi(10);return +0;
}
function __ZN7maxiEnv4adsrEdi__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = p2|0; return +__ZN7maxiEnv4adsrEdi(p0|0,+p1,p2|0);
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3; nullFunc_didid(11);return +0;
}
function __ZN13maxiDelayline2dlEdid__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3; return +__ZN13maxiDelayline2dlEdid(p0|0,+p1,p2|0,+p3);
}
function b12(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_dididdd(12);return +0;
}
function b13(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = p4|0; nullFunc_dididi(13);return +0;
}
function __ZN13maxiDelayline2dlEdidi__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = p4|0; return +__ZN13maxiDelayline2dlEdidi(p0|0,+p1,p2|0,+p3,p4|0);
}
function b14(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(14);return +0;
}
function __ZN7convert4mtofEi__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return +__ZN7convert4mtofEi(p0|0,p1|0);
}
function b15(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_diid(15);return +0;
}
function b16(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_diidd(16);return +0;
}
function b17(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_diiddd(17);return +0;
}
function b18(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_diiddddd(18);return +0;
}
function b19(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6;p7 = p7|0;p8 = p8|0; nullFunc_diidddddii(19);return +0;
}
function b20(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = p5|0;p6 = p6|0; nullFunc_diidddii(20);return +0;
}
function b21(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = p4|0;p5 = +p5;p6 = +p6; nullFunc_diiddidd(21);return +0;
}
function b22(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0; nullFunc_diidi(22);return +0;
}
function b23(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4; nullFunc_diidid(23);return +0;
}
function b24(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_diididdd(24);return +0;
}
function b25(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = p5|0; nullFunc_diididi(25);return +0;
}
function b26(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(26);return +0;
}
function __ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return +__ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE(p0|0,p1|0,p2|0);
}
function b27(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_diiii(27);return +0;
}
function b28() {
 ; nullFunc_i(28);return 0;
}
function b29(p0) {
 p0 = p0|0; nullFunc_ii(29);return 0;
}
function __ZN10maxiSample7isReadyEv__wrapper(p0) {
 p0 = p0|0; return __ZN10maxiSample7isReadyEv(p0|0)|0;
}
function b30(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_iid(30);return 0;
}
function b31(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(31);return 0;
}
function b32(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(32);return 0;
}
function b33(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(33);return 0;
}
function b34(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_iiiid(34);return 0;
}
function b35(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(35);return 0;
}
function __emval_call__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return __emval_call(p0|0,p1|0,p2|0,p3|0)|0;
}
function b36() {
 ; nullFunc_v(36);
}
function b37(p0) {
 p0 = p0|0; nullFunc_vi(37);
}
function __ZN10maxiSample9getLengthEv__wrapper(p0) {
 p0 = p0|0; __ZN10maxiSample9getLengthEv(p0|0);
}
function __ZN10maxiSample7triggerEv__wrapper(p0) {
 p0 = p0|0; __ZN10maxiSample7triggerEv(p0|0);
}
function b38(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(38);
}
function __ZN7maxiOsc10phaseResetEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiOsc10phaseResetEd(p0|0,+p1);
}
function __ZN7maxiDyn9setAttackEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiDyn9setAttackEd(p0|0,+p1);
}
function __ZN7maxiDyn10setReleaseEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiDyn10setReleaseEd(p0|0,+p1);
}
function __ZN7maxiDyn12setThresholdEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiDyn12setThresholdEd(p0|0,+p1);
}
function __ZN7maxiDyn8setRatioEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiDyn8setRatioEd(p0|0,+p1);
}
function __ZN7maxiEnv9setAttackEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiEnv9setAttackEd(p0|0,+p1);
}
function __ZN7maxiEnv10setReleaseEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiEnv10setReleaseEd(p0|0,+p1);
}
function __ZN7maxiEnv8setDecayEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiEnv8setDecayEd(p0|0,+p1);
}
function __ZN7maxiEnv10setSustainEd__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; __ZN7maxiEnv10setSustainEd(p0|0,+p1);
}
function b39(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(39);
}
function b40(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3; nullFunc_vidid(40);
}
function __ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3; __ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd(p0|0,+p1,p2|0,+p3);
}
function b41(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = +p4; nullFunc_vididd(41);
}
function __ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = +p4; __ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd(p0|0,+p1,p2|0,+p3,+p4);
}
function b42(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_vididdd(42);
}
function __ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5; __ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd(p0|0,+p1,p2|0,+p3,+p4,+p5);
}
function b43(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(43);
}
function __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE(p0|0,p1|0);
}
function b44(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(44);
}
function __ZN12maxiEnvelope7triggerEid__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; __ZN12maxiEnvelope7triggerEid(p0|0,p1|0,+p2);
}
function b45(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_viidd(45);
}
function b46(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4; nullFunc_viidid(46);
}
function b47(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5; nullFunc_viididd(47);
}
function b48(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_viididdd(48);
}
function b49(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(49);
}
function __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi(p0|0,p1|0,p2|0);
}
function b50(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(50);
}
function b51(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(51);
}
function b52(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(52);
}
function b53(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(53);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_dddd = [b0,__ZN7maxiMap5clampIdEET_S1_S1_S1_];
var FUNCTION_TABLE_dddddd = [b1,__ZN7maxiMap6linlinEddddd,__ZN7maxiMap6linexpEddddd,__ZN7maxiMap6explinEddddd];
var FUNCTION_TABLE_di = [b2,__ZN7maxiOsc5noiseEv__wrapper,__ZNK12maxiEnvelope12getAmplitudeEv,__ZNK10maxiFilter9getCutoffEv,__ZNK10maxiFilter12getResonanceEv,__ZNK10maxiLagExpIdE5valueEv,__ZNK10maxiLagExpIdE8getAlphaEv,__ZNK10maxiLagExpIdE18getAlphaReciprocalEv,__ZN10maxiSample8playOnceEv__wrapper,__ZN10maxiSample4playEv__wrapper,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_did = [b3,__ZN7maxiOsc8sinewaveEd__wrapper,__ZN7maxiOsc7coswaveEd__wrapper,__ZN7maxiOsc6phasorEd__wrapper,__ZN7maxiOsc3sawEd__wrapper,__ZN7maxiOsc8triangleEd__wrapper,__ZN7maxiOsc6squareEd__wrapper,__ZN7maxiOsc7sinebufEd__wrapper,__ZN7maxiOsc8sinebuf4Ed__wrapper,__ZN7maxiOsc4sawnEd__wrapper,__ZN10maxiSample8playOnceEd__wrapper,__ZN10maxiSample4playEd__wrapper,__ZN7maxiDyn8compressEd__wrapper,__ZN14maxiDistortion8fastatanEd,b3,b3];
var FUNCTION_TABLE_didd = [b4,__ZN7maxiOsc5pulseEdd__wrapper,__ZN7maxiOsc4rectEdd__wrapper,__ZN10maxiFilter6lopassEdd__wrapper,__ZN10maxiFilter6hipassEdd__wrapper,__ZN14maxiDistortion8atanDistEdd,__ZN14maxiDistortion12fastAtanDistEdd,__ZN13maxiDCBlocker4playEdd];
var FUNCTION_TABLE_diddd = [b5,__ZN7maxiOsc6phasorEddd__wrapper,__ZN10maxiFilter5loresEddd__wrapper,__ZN10maxiFilter5hiresEddd__wrapper,__ZN10maxiFilter8bandpassEddd__wrapper,__ZN10maxiSample4playEddd__wrapper,__ZN10maxiSample5play4Eddd__wrapper,__ZN10emscripten8internal15FunctionInvokerIPFddddEddJddEE6invokeEPS3_ddd];
var FUNCTION_TABLE_diddddd = [b6,__ZN10emscripten8internal15FunctionInvokerIPFddddddEddJddddEE6invokeEPS3_ddddd,__ZN7maxiDyn10compressorEddddd__wrapper,__ZN7maxiSVF4playEddddd];
var FUNCTION_TABLE_didddddii = [b7,__ZN7maxiEnv4adsrEdddddli__wrapper];
var FUNCTION_TABLE_didddii = [b8,__ZN7maxiEnv2arEdddli__wrapper];
var FUNCTION_TABLE_diddidd = [b9,__ZN7maxiDyn4gateEddldd__wrapper];
var FUNCTION_TABLE_didi = [b10,__ZN7maxiEnv4adsrEdi__wrapper];
var FUNCTION_TABLE_didid = [b11,__ZN13maxiDelayline2dlEdid__wrapper];
var FUNCTION_TABLE_dididdd = [b12,__ZN11maxiFlanger6flangeEdjddd,__ZN10maxiChorus6chorusEdjddd,b12];
var FUNCTION_TABLE_dididi = [b13,__ZN13maxiDelayline2dlEdidi__wrapper];
var FUNCTION_TABLE_dii = [b14,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFdvEdPS2_JEE6invokeERKS4_S5_,__ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFdvEE3getIS2_EEdRKS4_RKT_,__ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE3getIS2_EEdRKS4_RKT_,__ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEKFdvEdPKS3_JEE6invokeERKS5_S7_,__ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE3getIS3_EEdRKS5_RKT_,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFdvEdPS2_JEE6invokeERKS4_S5_,__ZN7convert4mtofEi__wrapper];
var FUNCTION_TABLE_diid = [b15,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFddEdPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFddEdPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM7maxiDynFddEdPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM14maxiDistortionFddEdPS2_JdEE6invokeERKS4_S5_d,b15,b15,b15];
var FUNCTION_TABLE_diidd = [b16,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFdddEdPS2_JddEE6invokeERKS4_S5_dd,__ZN10emscripten8internal13MethodInvokerIM10maxiFilterFdddEdPS2_JddEE6invokeERKS4_S5_dd,__ZN10emscripten8internal13MethodInvokerIM14maxiDistortionFdddEdPS2_JddEE6invokeERKS4_S5_dd,__ZN10emscripten8internal13MethodInvokerIM13maxiDCBlockerFdddEdPS2_JddEE6invokeERKS4_S5_dd,b16,b16,b16];
var FUNCTION_TABLE_diiddd = [b17,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFddddEdPS2_JdddEE6invokeERKS4_S5_ddd,__ZN10emscripten8internal13MethodInvokerIM10maxiFilterFddddEdPS2_JdddEE6invokeERKS4_S5_ddd,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFddddEdPS2_JdddEE6invokeERKS4_S5_ddd];
var FUNCTION_TABLE_diiddddd = [b18,__ZN10emscripten8internal13MethodInvokerIM7maxiDynFddddddEdPS2_JdddddEE6invokeERKS4_S5_ddddd,__ZN10emscripten8internal13MethodInvokerIM7maxiSVFFddddddEdPS2_JdddddEE6invokeERKS4_S5_ddddd,b18];
var FUNCTION_TABLE_diidddddii = [b19,__ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddddddliEdPS2_JdddddliEE6invokeERKS4_S5_dddddli];
var FUNCTION_TABLE_diidddii = [b20,__ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddddliEdPS2_JdddliEE6invokeERKS4_S5_dddli];
var FUNCTION_TABLE_diiddidd = [b21,__ZN10emscripten8internal13MethodInvokerIM7maxiDynFdddlddEdPS2_JddlddEE6invokeERKS4_S5_ddldd];
var FUNCTION_TABLE_diidi = [b22,__ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddiEdPS2_JdiEE6invokeERKS4_S5_di];
var FUNCTION_TABLE_diidid = [b23,__ZN10emscripten8internal13MethodInvokerIM13maxiDelaylineFddidEdPS2_JdidEE6invokeERKS4_S5_did];
var FUNCTION_TABLE_diididdd = [b24,__ZN10emscripten8internal13MethodInvokerIM11maxiFlangerFddjdddEdPS2_JdjdddEE6invokeERKS4_S5_djddd,__ZN10emscripten8internal13MethodInvokerIM10maxiChorusFddjdddEdPS2_JdjdddEE6invokeERKS4_S5_djddd,b24];
var FUNCTION_TABLE_diididi = [b25,__ZN10emscripten8internal13MethodInvokerIM13maxiDelaylineFddidiEdPS2_JdidiEE6invokeERKS4_S5_didi];
var FUNCTION_TABLE_diii = [b26,__ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE__wrapper,__ZN10emscripten8internal13MethodInvokerIM7convertFdiEdPS2_JiEE6invokeERKS4_S5_i,b26];
var FUNCTION_TABLE_diiii = [b27,__ZN10emscripten8internal13MethodInvokerIM12maxiEnvelopeFdiRNSt3__26vectorIdNS3_9allocatorIdEEEEEdPS2_JiS8_EE6invokeERKSA_SB_iPS7_];
var FUNCTION_TABLE_i = [b28,__ZN10emscripten8internal12operator_newI11vectorToolsJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newI12maxiSettingsJEEEPT_DpOT0_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE14construct_nullEv,__ZN10emscripten8internal12operator_newINSt3__26vectorIiNS2_9allocatorIiEEEEJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newINSt3__26vectorIdNS2_9allocatorIdEEEEJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newINSt3__26vectorIcNS2_9allocatorIcEEEEJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newINSt3__26vectorIfNS2_9allocatorIfEEEEJEEEPT_DpOT0_,b28,b28,b28,b28,b28,b28
,b28,b28,b28];
var FUNCTION_TABLE_ii = [b29,___stdio_close,__ZNKSt11logic_error4whatEv,__ZN10emscripten8internal13getActualTypeI11vectorToolsEEPKvPT_,__ZN10emscripten8internal7InvokerIP11vectorToolsJEE6invokeEPFS3_vE,__ZN10emscripten8internal13getActualTypeI12maxiSettingsEEPKvPT_,__ZN10emscripten8internal7InvokerIP12maxiSettingsJEE6invokeEPFS3_vE,__ZNK12maxiSettings13getSampleRateEv,__ZNK12maxiSettings14getNumChannelsEv,__ZNK12maxiSettings13getBufferSizeEv,__ZN10emscripten8internal13getActualTypeI7maxiOscEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiOscEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI12maxiEnvelopeEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI12maxiEnvelopeEEJEE6invokeEPFS5_vE,__ZNK12maxiEnvelope11getValindexEv,__ZN10emscripten8internal13getActualTypeI13maxiDelaylineEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI13maxiDelaylineEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI10maxiFilterEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiFilterEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI7maxiMixEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiMixEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI10maxiLagExpIdEEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE3getERKS5_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiLagExpIdEEEJEE6invokeEPFS6_vE
,__ZN10emscripten8internal13getActualTypeI10maxiSampleEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiSampleEEJEE6invokeEPFS5_vE,__ZN10maxiSample7isReadyEv__wrapper,__ZN10emscripten8internal13getActualTypeI7maxiMapEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiMapEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI7maxiDynEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiDynEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI7maxiEnvEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiEnvEEJEE6invokeEPFS5_vE,__ZNK7maxiEnv10getTriggerEv,__ZN10emscripten8internal13getActualTypeI7convertEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7convertEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI14maxiDistortionEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI14maxiDistortionEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI11maxiFlangerEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI11maxiFlangerEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI10maxiChorusEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiChorusEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI13maxiDCBlockerEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI13maxiDCBlockerEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI7maxiSVFEEPKvPT_
,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiSVFEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIiNS2_9allocatorIiEEEEJEE6invokeEPFS7_vE,__ZNKSt3__26vectorIiNS_9allocatorIiEEE4sizeEv,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIdNS2_9allocatorIdEEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIdNS2_9allocatorIdEEEEJEE6invokeEPFS7_vE,__ZNKSt3__26vectorIdNS_9allocatorIdEEE4sizeEv,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIcNS2_9allocatorIcEEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIcNS2_9allocatorIcEEEEJEE6invokeEPFS7_vE,__ZNKSt3__26vectorIcNS_9allocatorIcEEE4sizeEv,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIfNS2_9allocatorIfEEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIfNS2_9allocatorIfEEEEJEE6invokeEPFS7_vE,__ZNKSt3__26vectorIfNS_9allocatorIfEEE4sizeEv,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29];
var FUNCTION_TABLE_iid = [b30,__ZN7maxiSVF9setCutoffEd,__ZN7maxiSVF12setResonanceEd,b30];
var FUNCTION_TABLE_iii = [b31,__ZNKSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE3getIS2_EEiRKS4_RKT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFivEE3getIS2_EEiRKS4_RKT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE5shareEPS4_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFbvEbPS2_JEE6invokeERKS4_S5_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE5shareEPS3_PNS_8internal7_EM_VALE
,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten8internal12GetterPolicyIM7maxiEnvKFivEE3getIS2_EEiRKS4_RKT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31];
var FUNCTION_TABLE_iiid = [b32,__ZN10emscripten8internal13MethodInvokerIM7maxiSVFFRS2_dES3_PS2_JdEE6invokeERKS5_S6_d];
var FUNCTION_TABLE_iiii = [b33,___stdio_write,___stdio_seek,___stdout_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3setERS6_mRKi,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIdNS3_9allocatorIdEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIdNS2_9allocatorIdEEEEE3setERS6_mRKd,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIcNS3_9allocatorIcEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIcNS2_9allocatorIcEEEEE3setERS6_mRKc,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIfNS3_9allocatorIfEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIfNS2_9allocatorIfEEEEE3setERS6_mRKf,b33];
var FUNCTION_TABLE_iiiid = [b34,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIdNS2_9allocatorIdEEEEmRKdEbS7_JmS9_EE6invokeEPSB_PS6_md,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIfNS2_9allocatorIfEEEEmRKfEbS7_JmS9_EE6invokeEPSB_PS6_mf,b34];
var FUNCTION_TABLE_iiiii = [b35,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEmRKiEbS7_JmS9_EE6invokeEPSB_PS6_mi,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIcNS2_9allocatorIcEEEEmRKcEbS7_JmS9_EE6invokeEPSB_PS6_mc,__emval_call__wrapper];
var FUNCTION_TABLE_v = [b36,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b36];
var FUNCTION_TABLE_vi = [b37,__ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__214__shared_countD2Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEE16__on_zero_sharedEv
,__ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEE21__on_zero_shared_weakEv
,__ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev
,__ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev
,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv119__pointer_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN10emscripten8internal14raw_destructorI11vectorToolsEEvPT_,__ZN11vectorTools14clearVectorDblERNSt3__26vectorIdNS0_9allocatorIdEEEE,__ZN11vectorTools16clearVectorFloatERNSt3__26vectorIfNS0_9allocatorIfEEEE,__ZN10emscripten8internal14raw_destructorI12maxiSettingsEEvPT_,__ZN10emscripten8internal14raw_destructorI7maxiOscEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiOscEEEEvPT_,__ZNSt3__211make_sharedI7maxiOscJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI12maxiEnvelopeEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI12maxiEnvelopeEEEEvPT_,__ZNSt3__211make_sharedI12maxiEnvelopeJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI13maxiDelaylineEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI13maxiDelaylineEEEEvPT_,__ZNSt3__211make_sharedI13maxiDelaylineJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI10maxiFilterEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiFilterEEEEvPT_,__ZNSt3__211make_sharedI10maxiFilterJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7maxiMixEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiMixEEEEvPT_,__ZNSt3__211make_sharedI7maxiMixJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI10maxiLagExpIdEEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiLagExpIdEEEEEvPT_,__ZNSt3__211make_sharedI10maxiLagExpIdEJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS4_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI10maxiSampleEEvPT_
,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiSampleEEEEvPT_,__ZNSt3__211make_sharedI10maxiSampleJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10maxiSample9getLengthEv__wrapper,__ZN10maxiSample7triggerEv__wrapper,__ZN10maxiSample5clearEv,__ZN10emscripten8internal14raw_destructorI7maxiMapEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiMapEEEEvPT_,__ZNSt3__211make_sharedI7maxiMapJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7maxiDynEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiDynEEEEvPT_,__ZNSt3__211make_sharedI7maxiDynJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7maxiEnvEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiEnvEEEEvPT_,__ZNSt3__211make_sharedI7maxiEnvJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7convertEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7convertEEEEvPT_,__ZNSt3__211make_sharedI7convertJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI14maxiDistortionEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI14maxiDistortionEEEEvPT_,__ZNSt3__211make_sharedI14maxiDistortionJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI11maxiFlangerEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI11maxiFlangerEEEEvPT_,__ZNSt3__211make_sharedI11maxiFlangerJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI10maxiChorusEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiChorusEEEEvPT_,__ZNSt3__211make_sharedI10maxiChorusJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI13maxiDCBlockerEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI13maxiDCBlockerEEEEvPT_,__ZNSt3__211make_sharedI13maxiDCBlockerJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7maxiSVFEEvPT_
,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiSVFEEEEvPT_,__ZNSt3__211make_sharedI7maxiSVFJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIiNS2_9allocatorIiEEEEEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIdNS2_9allocatorIdEEEEEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIcNS2_9allocatorIcEEEEEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIfNS2_9allocatorIfEEEEEEvPT_,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37];
var FUNCTION_TABLE_vid = [b38,__ZN7maxiOsc10phaseResetEd__wrapper,__ZN12maxiEnvelope12setAmplitudeEd,__ZN10maxiFilter9setCutoffEd,__ZN10maxiFilter12setResonanceEd,__ZN10maxiLagExpIdE9addSampleEd,__ZN10maxiLagExpIdE8setAlphaEd,__ZN10maxiLagExpIdE18setAlphaReciprocalEd,__ZN10maxiLagExpIdE6setValEd,__ZN7maxiDyn9setAttackEd__wrapper,__ZN7maxiDyn10setReleaseEd__wrapper,__ZN7maxiDyn12setThresholdEd__wrapper,__ZN7maxiDyn8setRatioEd__wrapper,__ZN7maxiEnv9setAttackEd__wrapper,__ZN7maxiEnv10setReleaseEd__wrapper,__ZN7maxiEnv8setDecayEd__wrapper,__ZN7maxiEnv10setSustainEd__wrapper,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38
,b38,b38,b38];
var FUNCTION_TABLE_vidd = [b39,__ZN10maxiLagExpIdE4initEdd];
var FUNCTION_TABLE_vidid = [b40,__ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd__wrapper];
var FUNCTION_TABLE_vididd = [b41,__ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd__wrapper];
var FUNCTION_TABLE_vididdd = [b42,__ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd__wrapper];
var FUNCTION_TABLE_vii = [b43,__ZN10emscripten8internal7InvokerIvJRNSt3__26vectorIdNS2_9allocatorIdEEEEEE6invokeEPFvS7_EPS6_,__ZN10emscripten8internal7InvokerIvJRNSt3__26vectorIfNS2_9allocatorIfEEEEEE6invokeEPFvS7_EPS6_,__ZN12maxiSettings13setSampleRateEi,__ZN12maxiSettings14setNumChannelsEi,__ZN12maxiSettings13setBufferSizeEi,__ZN12maxiEnvelope11setValindexEi,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvvEvPS2_JEE6invokeERKS4_S5_,__ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE__wrapper,__ZN7maxiEnv10setTriggerEi,__ZNSt3__26vectorIiNS_9allocatorIiEEE9push_backERKi,__ZNSt3__26vectorIdNS_9allocatorIdEEE9push_backERKd,__ZNSt3__26vectorIcNS_9allocatorIcEEE9push_backERKc,__ZNSt3__26vectorIfNS_9allocatorIfEEE9push_backERKf,b43,b43];
var FUNCTION_TABLE_viid = [b44,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFvdEvPS2_JdEE6invokeERKS4_S5_d,__ZN12maxiEnvelope7triggerEid__wrapper,__ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFvdEE3setIS2_EEvRKS4_RT_d,__ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE3setIS2_EEvRKS4_RT_d,__ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEFvdEvPS3_JdEE6invokeERKS5_S6_d,__ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE3setIS3_EEvRKS5_RT_d,__ZN10emscripten8internal13MethodInvokerIM7maxiDynFvdEvPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM7maxiEnvFvdEvPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvRKdEvPS6_JS8_EE6invokeERKSA_SB_d,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvRKfEvPS6_JS8_EE6invokeERKSA_SB_f,b44,b44,b44,b44,b44];
var FUNCTION_TABLE_viidd = [b45,__ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEFvddEvPS3_JddEE6invokeERKS5_S6_dd];
var FUNCTION_TABLE_viidid = [b46,__ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdEvPS2_JdS8_dEE6invokeERKSA_SB_dPS7_d];
var FUNCTION_TABLE_viididd = [b47,__ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEddEvPS2_JdS8_ddEE6invokeERKSA_SB_dPS7_dd];
var FUNCTION_TABLE_viididdd = [b48,__ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdddEvPS2_JdS8_dddEE6invokeERKSA_SB_dPS7_ddd];
var FUNCTION_TABLE_viii = [b49,__ZN12maxiSettings5setupEiii,__ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE3setIS2_EEvRKS4_RT_i,__ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFviEE3setIS2_EEvRKS4_RT_i,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEEvPS2_JS8_EE6invokeERKSA_SB_PS7_,__ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi__wrapper,__ZN10emscripten8internal12SetterPolicyIM7maxiEnvFviEE3setIS2_EEvRKS4_RT_i,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEvPS6_JS8_EE6invokeERKSA_SB_i,__ZNSt3__26vectorIiNS_9allocatorIiEEE6resizeEmRKi,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3getERKS6_m,__ZNSt3__26vectorIdNS_9allocatorIdEEE6resizeEmRKd,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIdNS2_9allocatorIdEEEEE3getERKS6_m,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvRKcEvPS6_JS8_EE6invokeERKSA_SB_c,__ZNSt3__26vectorIcNS_9allocatorIcEEE6resizeEmRKc,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIcNS2_9allocatorIcEEEEE3getERKS6_m,__ZNSt3__26vectorIfNS_9allocatorIfEEE6resizeEmRKf,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIfNS2_9allocatorIfEEEEE3getERKS6_m,b49,b49,b49,b49,b49,b49,b49,b49,b49,b49,b49,b49
,b49,b49,b49];
var FUNCTION_TABLE_viiid = [b50,__ZN10emscripten8internal13MethodInvokerIM12maxiEnvelopeFvidEvPS2_JidEE6invokeERKS4_S5_id,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvmRKdEvPS6_JmS8_EE6invokeERKSA_SB_md,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvmRKfEvPS6_JmS8_EE6invokeERKSA_SB_mf];
var FUNCTION_TABLE_viiii = [b51,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZN10emscripten8internal7InvokerIvJiiiEE6invokeEPFviiiEiii,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEiEvPS2_JS8_iEE6invokeERKSA_SB_PS7_i,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvmRKiEvPS6_JmS8_EE6invokeERKSA_SB_mi,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvmRKcEvPS6_JmS8_EE6invokeERKSA_SB_mc];
var FUNCTION_TABLE_viiiii = [b52,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b53,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_dddd: dynCall_dddd, dynCall_dddddd: dynCall_dddddd, dynCall_di: dynCall_di, dynCall_did: dynCall_did, dynCall_didd: dynCall_didd, dynCall_diddd: dynCall_diddd, dynCall_diddddd: dynCall_diddddd, dynCall_didddddii: dynCall_didddddii, dynCall_didddii: dynCall_didddii, dynCall_diddidd: dynCall_diddidd, dynCall_didi: dynCall_didi, dynCall_didid: dynCall_didid, dynCall_dididdd: dynCall_dididdd, dynCall_dididi: dynCall_dididi, dynCall_dii: dynCall_dii, dynCall_diid: dynCall_diid, dynCall_diidd: dynCall_diidd, dynCall_diiddd: dynCall_diiddd, dynCall_diiddddd: dynCall_diiddddd, dynCall_diidddddii: dynCall_diidddddii, dynCall_diidddii: dynCall_diidddii, dynCall_diiddidd: dynCall_diiddidd, dynCall_diidi: dynCall_diidi, dynCall_diidid: dynCall_diidid, dynCall_diididdd: dynCall_diididdd, dynCall_diididi: dynCall_diididi, dynCall_diii: dynCall_diii, dynCall_diiii: dynCall_diiii, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iid: dynCall_iid, dynCall_iii: dynCall_iii, dynCall_iiid: dynCall_iiid, dynCall_iiii: dynCall_iiii, dynCall_iiiid: dynCall_iiiid, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vid: dynCall_vid, dynCall_vidd: dynCall_vidd, dynCall_vidid: dynCall_vidid, dynCall_vididd: dynCall_vididd, dynCall_vididdd: dynCall_vididdd, dynCall_vii: dynCall_vii, dynCall_viid: dynCall_viid, dynCall_viidd: dynCall_viidd, dynCall_viidid: dynCall_viidid, dynCall_viididd: dynCall_viididd, dynCall_viididdd: dynCall_viididdd, dynCall_viii: dynCall_viii, dynCall_viiid: dynCall_viiid, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_globalCtors = asm["globalCtors"]; asm["globalCtors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_globalCtors.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_dddd = Module["dynCall_dddd"] = asm["dynCall_dddd"];
var dynCall_dddddd = Module["dynCall_dddddd"] = asm["dynCall_dddddd"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_did = Module["dynCall_did"] = asm["dynCall_did"];
var dynCall_didd = Module["dynCall_didd"] = asm["dynCall_didd"];
var dynCall_diddd = Module["dynCall_diddd"] = asm["dynCall_diddd"];
var dynCall_diddddd = Module["dynCall_diddddd"] = asm["dynCall_diddddd"];
var dynCall_didddddii = Module["dynCall_didddddii"] = asm["dynCall_didddddii"];
var dynCall_didddii = Module["dynCall_didddii"] = asm["dynCall_didddii"];
var dynCall_diddidd = Module["dynCall_diddidd"] = asm["dynCall_diddidd"];
var dynCall_didi = Module["dynCall_didi"] = asm["dynCall_didi"];
var dynCall_didid = Module["dynCall_didid"] = asm["dynCall_didid"];
var dynCall_dididdd = Module["dynCall_dididdd"] = asm["dynCall_dididdd"];
var dynCall_dididi = Module["dynCall_dididi"] = asm["dynCall_dididi"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_diid = Module["dynCall_diid"] = asm["dynCall_diid"];
var dynCall_diidd = Module["dynCall_diidd"] = asm["dynCall_diidd"];
var dynCall_diiddd = Module["dynCall_diiddd"] = asm["dynCall_diiddd"];
var dynCall_diiddddd = Module["dynCall_diiddddd"] = asm["dynCall_diiddddd"];
var dynCall_diidddddii = Module["dynCall_diidddddii"] = asm["dynCall_diidddddii"];
var dynCall_diidddii = Module["dynCall_diidddii"] = asm["dynCall_diidddii"];
var dynCall_diiddidd = Module["dynCall_diiddidd"] = asm["dynCall_diiddidd"];
var dynCall_diidi = Module["dynCall_diidi"] = asm["dynCall_diidi"];
var dynCall_diidid = Module["dynCall_diidid"] = asm["dynCall_diidid"];
var dynCall_diididdd = Module["dynCall_diididdd"] = asm["dynCall_diididdd"];
var dynCall_diididi = Module["dynCall_diididi"] = asm["dynCall_diididi"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_diiii = Module["dynCall_diiii"] = asm["dynCall_diiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiid = Module["dynCall_iiiid"] = asm["dynCall_iiiid"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_vidid = Module["dynCall_vidid"] = asm["dynCall_vidid"];
var dynCall_vididd = Module["dynCall_vididd"] = asm["dynCall_vididd"];
var dynCall_vididdd = Module["dynCall_vididdd"] = asm["dynCall_vididdd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viidd = Module["dynCall_viidd"] = asm["dynCall_viidd"];
var dynCall_viidid = Module["dynCall_viidid"] = asm["dynCall_viidid"];
var dynCall_viididd = Module["dynCall_viididd"] = asm["dynCall_viididd"];
var dynCall_viididdd = Module["dynCall_viididdd"] = asm["dynCall_viididdd"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



/*
Copyright notice for the base64 to arraybuffer conversion algorithm.

Copyright (c) 2011, Daniel Guerrero
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL DANIEL GUERRERO BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global Module */

"use strict";
var currentDate = "20 February 2019, 12:17am";
console.log("MaxiLib: " + currentDate);

// ------------------------------------------------
// maxiArray - could extend Array object?
// cheaty array method to avoid mixing vector terminology with arrays
// but have to copy everything?!
// better to use GetArrayAsVectorDbl function ???
Module.maxiArray = function maxiArray() {
    this.length = 0;
    var vec = new Module.VectorDouble();

// this.update = function(){
//     var lengthsMatch = this.length !== this.vec.size();
//     if(!lengthsMatch){
//         if(this.length < this.vec.size()){
//             for(var i = this.length; i < this.vec.size(); i++){
//                 this[i] = this.vec.get(i);
//             }
//         } else{
//             for(var i = this.length; i < this.vec.size(); i++){
//                 delete this[i];
//             }
//         }

//         // reset length var
//         this.length = this.vec.size();
//     }
// };
};

Module.maxiArray.prototype.asVector = function (arrayIn) {
    return this.vec;
};

Module.maxiArray.prototype.asJsArray = function (arrayIn) {
    var arrayOut = [];

    for (var i = 0; i < this.length; i++) {
        array.push(this.vec.get(i)); //FIXME: mz I think this must be a bug? What is "array"? arrayOut maybe?
    }

    return arrayOut;
};

Module.maxiArray.prototype.set = function (arrayIn) {
    this.clear();
    this.vec = GetArrayAsVectorDbl(arrayIn); //FIXME: mz this is part of maxiTools
    this.length = this.vec.size();
    this.SetSqBrackets(true);
};

Module.maxiArray.prototype.push = function (num) {
    this.vec.push_back(num);
    this[this.length] = num;
    this.length++;
};

// set object properties to mimic array
// this doesn't seem particularly efficient or smart
Module.maxiArray.prototype.SetSqBrackets = function (useSq) {
    for (var i = 0; i < this.length; i++) {
        if (useSq) {
            this[i] = this.vec.get(i);
        } else {
            delete this[i];
        }
    }
};

Module.maxiArray.prototype.clear = function (useSq) {
    for (var i = 0; i < this.length; i++) {
        delete this[i];
    }
    Module.vectorTools.clearVectorDbl(this.vec); //FIXME: mz this is also part of maxiTools
    this.length = 0;
};


// tools
Module.maxiTools = function () {
};

// not sure this is good
// Module.maxiTools.arrayOfObj = function(obj, num){
//     var array = [];

//     for(var i = 0; i < num; i++){
//         array.push(new obj());
//     }
//     return array;
// };

Module.maxiTools.getArrayAsVectorDbl = function (arrayIn) {
    var vecOut = new Module.VectorDouble();
    for (var i = 0; i < arrayIn.length; i++) {
        vecOut.push_back(arrayIn[i]);
    }

    return vecOut;
};

Module.maxiTools.getBase64 = function (str) {
    //check if the string is a data URI
    if (str.indexOf(';base64,') !== -1) {
        //see where the actual data begins
        var dataStart = str.indexOf(';base64,') + 8;
        //check if the data is base64-encoded, if yes, return it
        // taken from
        // http://stackoverflow.com/a/8571649
        return str.slice(dataStart).match(/^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/) ? str.slice(dataStart) : false;
    }
    else return false;
};

Module.maxiTools._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

Module.maxiTools.removePaddingFromBase64 = function (input) {
    var lkey = Module.maxiTools._keyStr.indexOf(input.charAt(input.length - 1));
    if (lkey === 64) {
        return input.substring(0, input.length - 1);
    }
    return input;
};


// ------------------------------------------------
Module.maxiAudio = function () {
    this.numChannels = 2;
    this.output = 0;

    this.context = null;
    this.source = null;
    this.analyser = null;
    this.jsProcessor = null;
    this.bufferSize = 1024;
    this.initDone = false;
};

Module.maxiAudio.play = function () {
};

Module.maxiAudio.prototype.mzedTest = function () {
    console.log("mzed loves you!");
};

// don't really need setup??
Module.maxiAudio.setup = function () {
    console.log("non-overrided setup");
};

Module.maxiAudio.prototype.getNumChannels = function () {
    return this.numChannels;
};

// isArray should be second param really
// set num channels and set output as an array
// use this if you want to change number of channels
Module.maxiAudio.prototype.setNumChannels = function (isArray, numChannels_) {

    this.numChannels = numChannels_;
    this.outputIsArray(isArray, numChannels_);

    this.resetAudio();
};

Module.maxiAudio.prototype.setBufferSize = function (newBufferSize) {
    this.bufferSize = newBufferSize;
    this.resetAudio();
};

// use this if you want to keep num of outputs but change
// method e.g. array or not
Module.maxiAudio.prototype.outputIsArray = function (isArray) {
    if (isArray) {
        this.output = new Array(this.numChannels);

        for (var i = 0; i < this.numChannels; i++) {
            this.output[i] = 0;
        }
    } else {
        this.output = 0;
    }
};

Module.maxiAudio.prototype.init = function () {

    // Temporary patch until all browsers support unprefixed context.
    this.context = new (window.AudioContext || window.webkitAudioContext)();
    this.source = this.context.createBufferSource();
    this.jsProcessor = this.context.createScriptProcessor(this.bufferSize, this.numChannels, this.numChannels);
    // var process = this.process;

    this.jsProcessor.onaudioprocess = function (event) {
        var numChannels = event.outputBuffer.numberOfChannels;
        var outputLength = event.outputBuffer.getChannelData(0).length;
        for (var i = 0; i < outputLength; ++i) {
            this.play();
            // if(this.play===undefined)
            //   break;
            // else
            //   this.play();
            var channel = 0;
            if (this.output instanceof Array) {
                for (channel = 0; channel < numChannels; channel++) {
                    event.outputBuffer.getChannelData(channel)[i] = this.output[channel];
                }
            }
            else {
                for (channel = 0; channel < numChannels; channel++) {
                    event.outputBuffer.getChannelData(channel)[i] = this.output;
                }
            }
        }
    }
        .bind(this)
    ;

    this.analyser = this.context.createAnalyser();
    this.analyser.fftSize = 2048;

    // Connect the processing graph: source -> jsProcessor -> analyser -> destination
    this.source.connect(this.jsProcessor);
    this.jsProcessor.connect(this.analyser);
    this.analyser.connect(this.context.destination);
    this.initDone = true;
};

Module.maxiAudio.prototype.resetAudio = function () {
    if (this.initDone) {
        this.source.disconnect();
        this.jsProcessor.disconnect();
        this.analyser.disconnect();
    }

    this.init();
};

// option to load sample if a different context is used
Module.maxiAudio.prototype.loadSample = function (url, samplePlayer, contextIn) {
    var data = [];
    var context;

    if (!contextIn) {
        context = this.context;
    } else {
        context = contextIn;
    }

    samplePlayer.clear();

    //check if url is actually a base64-encoded string
    var b64 = Module.maxiTools.getBase64(url);
    if (b64) {
        //convert to arraybuffer
        //modified version of this:
        // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js
        var ab_bytes = (b64.length / 4) * 3;
        var arrayBuffer = new ArrayBuffer(ab_bytes);

        b64 = Module.maxiTools.removePaddingFromBase64(Module.maxiTools.removePaddingFromBase64(b64));

        var bytes = parseInt((b64.length / 4) * 3, 10);

        var uarray;
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        var j = 0;

        uarray = new Uint8Array(arrayBuffer);

        b64 = b64.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        for (i = 0; i < bytes; i += 3) {
            //get the 3 octects in 4 ascii chars
            enc1 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
            enc2 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
            enc3 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
            enc4 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            uarray[i] = chr1;
            if (enc3 !== 64) uarray[i + 1] = chr2;
            if (enc4 !== 64) uarray[i + 2] = chr3;
        }

        context.decodeAudioData(
            arrayBuffer,
            function (buffer) {
                // source.buffer = buffer;
                // source.loop = true;
                // source.start(0);
                data = buffer.getChannelData(0);

                if (data) {
                    var myBufferData = new Module.VectorDouble();
                    // Module.vectorTools.clearVectorDbl(myBufferData);

                    for (var n = 0; n < data.length; n++) {
                        myBufferData.push_back(data[n]);
                    }

                    samplePlayer.setSample(myBufferData/*, context.sampleRate*/);
                }

            },

            function (buffer) {
                console.log("Error decoding source!");
            }
        );


    }
    else {
        // Load asynchronously
        var request = new XMLHttpRequest();
        request.addEventListener("load",
            function (evt) {
                console.log("The transfer is complete.");
            });
        request.open("GET", url, true);

        request.responseType = "arraybuffer";

        request.onload = function () {
            context.decodeAudioData(
                request.response,
                function (buffer) {
                    // source.buffer = buffer;
                    // source.loop = true;
                    // source.start(0);
                    data = buffer.getChannelData(0);

                    if (data) {
                        var myBufferData = new Module.VectorDouble();
                        // Module.vectorTools.clearVectorDbl(myBufferData);

                        for (var n = 0; n < data.length; n++) {
                            myBufferData.push_back(data[n]);
                        }

                        samplePlayer.setSample(myBufferData/*, context.sampleRate*/);
                    }

                },

                function (buffer) {
                    console.log("Error decoding source!");
                }
            );
        };

        request.send();
    }

};

